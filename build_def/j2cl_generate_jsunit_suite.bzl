"""j2cl_generate_jsunit_suite build macro

Takes Java source that contains JUnit tests and translates it into a goog.testing.testSuite.


Example using a jsunit_test:

j2cl_generate_jsunit_suite(
    name = "FooTest",
    srcs = ["FooTest.java"],
    deps = [
        "//third_party/java/junit",
    ],
)

jsunit_test(
  name = "MyTest",
  srcs = [":FooTest"],
  deps = [":FooTest_lib"],
  ...
)

"""


load("//third_party/java/j2cl:j2cl_library.bzl", "j2cl_library")
load("//build_def:j2cl_util.bzl", "get_java_package")

_TEMPLATE = """
// THIS IS GENERATED CODE. DO NOT EDIT.
// GENERATED FROM //%s/BUILD (target: %s)

package %s;

import com.google.j2cl.junit.apt.J2clTestInput;

/**
 * J2CL java tests.
 *
 * @author generated by j2cl_generate_jsunit_suite.bzl.
 */
@J2clTestInput(%s.class)
public class %s {}
"""

def _generate_test_input(name, test_class):
  java_package = get_java_package(PACKAGE_NAME) or "_default_"
  java_class = name.replace('-', '_').title() + "__generated_j2cl_test_input"
  java_code = _TEMPLATE % (PACKAGE_NAME, name, java_package, test_class, java_class)

  native.genrule(
      name = java_class,
      outs = [java_class + ".java"],
      cmd="echo \"%s\" > $@" % java_code
  )

  return java_class + ".java"


def j2cl_generate_jsunit_suite(base_name, test_class, **kwargs):
  """Macro for cross compiling a JUnit Suite to JavaScript testSuite"""

  test_input = _generate_test_input(base_name, test_class)

  # add the generated test input to the java_srcs for the java_library so we see
  # it in transpilation
  kwargs["srcs"] = kwargs.get("srcs", []) + [":" + test_input]

  # Add our deps
  test_transpile_deps = [
      "//third_party/java/j2cl:internal_junit_annotations",
      "//third_party/java/gwt:gwt-jsinterop-annotations-j2cl",
  ]

  kwargs["deps"] =  list(set(kwargs.get("deps", []) + test_transpile_deps))

  kwargs["_js_deps"] = (
      kwargs.get("_js_deps", []) + ["//javascript/closure/testing:testcase"])

  kwargs["testonly"] = 1

  # Add our APT to java plugins.
  kwargs["plugins"] = kwargs.get("plugins", []) + ["//third_party/java/j2cl:junit_processor"]

  library_name = base_name + "_lib"

  # target name of the jar produced by the java_library rule defined in
  # j2cl_library
  out_jar = ":lib" + library_name + "_java_library.jar"

  # creates ":" + library_name
  # creates ":" + library_name + "_java_library"
  kwargs["name"] = library_name
  j2cl_library(**kwargs)

  # Extract generated tests files (.js) and the test summary file
  # (test_summary.json) from the java_library jar
  native.genrule(
      name=base_name + "_transpile_gen",
      outs=[base_name + ".js.zip"],
      cmd="\n".join([
          "set -e",
          "unzip -q $(location %s) *.js *.json -d zip_out/" % out_jar,
          "cd zip_out/",
          "zip -q -r ../$@ .",
      ]),
      testonly=1,
      tags=["manual", "no_tap"],
      tools=[out_jar],
  )
