package ${packageName};

import com.google.common.base.Preconditions;

public class Visitor_${className} {

  public static Node visit(Processor processor, ${className} node) {
    Node result = node;
    ProcessorPrivate processorImpl = (ProcessorPrivate) processor;
#if (${visitableClass.isContext()})
    Preconditions.checkState(processorImpl.getCurrent${className}() == null);
    processorImpl.setCurrent${className}(node);
#end
    if (processorImpl.shouldProcess${className}(node)) {
      node = processorImpl.preProcess${className}(node);

#foreach($field in $fields)
#if(${field.isNullable()})
      if (node.${field.Name} != null) {
#end
#if(${field.isList()})
        VisitorUtils.visitList(processorImpl, node.${field.Name});
#elseif (${field.isNullable()})
        node.${field.Name} = (${field.TypeName}) node.${field.Name}.accept(processorImpl);
#else
        node.${field.Name} = (${field.TypeName}) Preconditions.checkNotNull(
             node.${field.Name}.accept(processorImpl),
             "Field \"${field.Name}\" in class \"${className}\" cannot be null");
#end
#if(${field.isNullable()})
      }
#end
#end
      result = processorImpl.postProcess${className}(node);
    }
#if (${visitableClass.isContext()})
    Preconditions.checkState(processorImpl.getCurrent${className}() != null);
    processorImpl.setCurrent${className}(null);
#end
    return result;
  }
}