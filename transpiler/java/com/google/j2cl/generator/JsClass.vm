#set ($utilAlias = ${sourceGenerator.toSource($nativeUtilTypeDecriptor)} )
#set ($classAlias = ${sourceGenerator.toSource($javaLangClassTypeDecriptor)} )
#set ($superTypeDescriptor = $classType.SuperTypeDescriptor)
#if ($superTypeDescriptor)
#set ($superTypeName = ${sourceGenerator.toSource($superTypeDescriptor)})
#set ($superTypeMangledName = ${ManglingNameUtils.getMangledName($superTypeDescriptor)})
#set ($extendsClause = "extends " + $superTypeName)
#else
#set ($extendsClause = "")
#end
#set ($className = ${sourceGenerator.toSource($classType.Descriptor)})
#set ($jsDocName = ${sourceGenerator.getJsDocName(${classType.Descriptor}, true)})
#set ($mangledTypeName = ${ManglingNameUtils.getMangledName($classType.Descriptor)})
#set ($simpleName = $classType.Descriptor.SimpleName)
#set ($binaryName = ${GeneratorUtils.getBinaryName($classType.Descriptor)})
#set ($sourceName = ${GeneratorUtils.getSourceName($classType.Descriptor)})
#set ($isBoxedTypeAsPrimitive = ${GeneratorUtils.isBoxedTypeAsPrimitive($classType.Descriptor)})
#set ($superBoxedTypeAsPrimitive = ${GeneratorUtils.superBoxedTypeAsPrimitive($classType.Descriptor)})
#if (${GeneratorUtils.hasJsDoc($classType)})
/**
#if (${classType.isAbstract()})
 * Abstract class, do not instantiate.
#end
#if (${classType.Descriptor.isParameterizedType()})
 * @template ${sourceGenerator.getJsDocNames($classType.Descriptor.getTypeArgumentDescriptors())}
#end
#if (${classType.SuperTypeDescriptor.isParameterizedType()})
 * @extends {${sourceGenerator.getJsDocName($classType.SuperTypeDescriptor, true)}}
#end
#foreach ($superInterfaceTypeDescriptor in $classType.SuperInterfaceTypeDescriptors)
 * @implements {${sourceGenerator.getJsDocName($superInterfaceTypeDescriptor, true)}}
#end
 */
#end
class $className $extendsClause {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
#if ($superTypeDescriptor)
    super();
#end
#foreach ($field in $classType.getInstanceFields())
#set ($fieldVisibility = $field.Descriptor.Visibility)
#set ($fieldType = ${sourceGenerator.getJsDocName($field.Descriptor.TypeDescriptor)})
#set ($fieldName = ${ManglingNameUtils.getMangledName($field.Descriptor)})
#set ($initialValue = ${GeneratorUtils.getInitialValue($field)})
    /**
     * @$fieldVisibility {$fieldType}
     */
    this.$fieldName = ${sourceGenerator.toSource($initialValue)};
#end
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__$mangledTypeName() {
#foreach ($field in $classType.getInstanceFields())
#if ($field.hasInitializer())
#if (!$field.isCompileTimeConstant())
#set ($fieldInitializer = $sourceGenerator.toSource($field.Initializer))
    this.${ManglingNameUtils.getMangledName($field.Descriptor)} = $fieldInitializer;
#end
#end
#end
#foreach ($instanceInitializerBlock in $classType.InstanceInitializerBlocks)
#foreach ($statementInInitializer in $instanceInitializerBlock.Statements)
    $sourceGenerator.toSource($statementInInitializer)
#end
#end
  }

