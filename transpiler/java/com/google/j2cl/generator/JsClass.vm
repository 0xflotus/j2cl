#set ($superTypeReference = $classType.superType)
#if ($superTypeReference)
#set ($superTypeName = ${TranspilerUtils.getClassName($superTypeReference)})
#set ($superTypeMangledName = ${TranspilerUtils.getMangledName($superTypeReference)})
#set ($extendsClause = "extends " + $superTypeName)
#else
#set ($extendsClause = "")
#end
#set ($className = ${TranspilerUtils.getClassName($classType.getSelfReference())})
#set ($jsDocName = ${TranspilerUtils.getJsDocName($classType.getSelfReference())})
#set ($mangledTypeName = ${TranspilerUtils.getMangledName($classType.getSelfReference())})
#set ($simpleName = $classType.getSelfReference().getSimpleName())
#set ($binaryName = $classType.getSelfReference().getBinaryName())
#set ($sourceName = ${TranspilerUtils.getSourceName($classType.getSelfReference())})
class $className $extendsClause {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
#if ($superTypeReference)
    super();
#end
#foreach ($field in $classType.Fields)
#set ($fieldVisibility = $field.SelfReference.Visibility)
#set ($fieldType = ${TranspilerUtils.getJsDocName($field.SelfReference.Type)})
#set ($fieldName = ${field.SelfReference.FieldName})
    /**
     * @$fieldVisibility {?$fieldType}
     */
    this.f_${fieldName}__${mangledTypeName} = null;
#end
  }

  /**
   * Runs inline instance field initializers.
   * @param {$jsDocName} instance
   * @private
   */
  static $init(instance) {
#foreach ($field in $classType.Fields)
#if ($field.hasInitializer())
    instance.f_${field.SelfReference.FieldName}__${mangledTypeName} = $field.Initializer;
#end
#end
#foreach($instanceInitializer in $classType.InstanceInitializers)
    $instanceInitializer
#end
  }

#set ($noConstructors = true)
#foreach($method in $classType.Methods)
#if($method.isConstructor())
#set ($noConstructors = false)
#end
  $method

#end
#if( $noConstructors )## default constructor
  /**
   * A particular Java constructor as a factory method.
   * @return {!$jsDocName}
   * @public
   */
  static $create() {
    $className.$clinit();
    var instance = new $className;
    $className.$ctor__$mangledTypeName(instance);
    return instance;
  }

  testHelloWorld() {}

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {$jsDocName} instance
   * @protected
   */
  static $ctor__$mangledTypeName(instance) {
    $superTypeName.$ctor__$superTypeMangledName(instance);
    $className.$init(instance);
  }
#else
#end

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof $className; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @private
   */
  static $isAssignableFrom(classConstructor) {
    return Util.$canCastClass(classConstructor, $className);
  }

  /**
   * Runs inline static field initializers.
   * @protected
   */
  static $clinit() {
    $superTypeName.$clinit();
#foreach($instanceInitializer in $classType.StaticInitializers)
    $instanceInitializer
#end
  }
};


/**
 * @public {Class}
 */
$className.$class = Class.$createForClass(
    Util.$generateId('$simpleName'),
    Util.$generateId('$binaryName'),
    $superTypeName.$class,
    Util.$generateId('$sourceName'));
