#set ($superTypeDescriptor = $classType.SuperTypeDescriptor)
#if ($superTypeDescriptor)
#set ($superTypeName = ${TranspilerUtils.getClassName($superTypeDescriptor)})
#set ($superTypeMangledName = ${ManglingNameUtils.getMangledName($superTypeDescriptor)})
#set ($extendsClause = "extends " + $superTypeName)
#else
#set ($extendsClause = "")
#end
#set ($className = ${TranspilerUtils.getClassName($classType.Descriptor)})
#set ($jsDocName = ${TranspilerUtils.getJsDocName($classType.Descriptor)})
#set ($mangledTypeName = ${ManglingNameUtils.getMangledName($classType.Descriptor)})
#set ($simpleName = $classType.Descriptor.SimpleName)
#set ($binaryName = $classType.Descriptor.BinaryName)
#set ($sourceName = ${TranspilerUtils.getSourceName($classType.Descriptor)})
#if (!${classType.SuperInterfaceDescriptors.isEmpty()})
/**
#foreach ($superInterface in $classType.SuperInterfaceDescriptors)
 * @implements {${TranspilerUtils.getClassName($superInterface)}}
#end
 */
#end
class $className $extendsClause {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
#if ($superTypeDescriptor)
    super();
#end
#foreach ($field in $classType.getInstanceFields())
#set ($fieldVisibility = $field.Descriptor.Visibility)
#set ($fieldType = ${TranspilerUtils.getJsDocName($field.Descriptor.Type)})
#set ($fieldName = ${ManglingNameUtils.getMangledName($field.Descriptor)})
    /**
     * @$fieldVisibility {$fieldType}
     */
    this.$fieldName = ${TranspilerUtils.getDefaultInitialValue($field.Descriptor.Type)};
#end
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__$mangledTypeName() {
#foreach ($field in $classType.getInstanceFields())
#if ($field.hasInitializer())
#set ($fieldInitializer = $StatementSourceGenerator.toSource($field.Initializer))
    this.${ManglingNameUtils.getMangledName($field.Descriptor)} = $fieldInitializer;
#end
#end
#foreach ($instanceInitializerBlock in $classType.InstanceInitializerBlocks)
#foreach ($statementInInitializer in $instanceInitializerBlock.Statements)
    $StatementSourceGenerator.toSource($statementInInitializer)
#end
#end
  }
#foreach($method in $classType.Methods)

#if($method.isConstructor())
#parse( "com/google/j2cl/generator/JsConstructorMethods.vm" )
#else
#parse( "com/google/j2cl/generator/JsMethod.vm" )
#end
#end

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof $className; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @private
   */
  static $isAssignableFrom(classConstructor) {
    return Util.$canCastClass(classConstructor, $className);
  }

#parse( "com/google/j2cl/generator/JsClinit.vm")
};
#foreach ($staticField in $classType.getStaticFields())
#parse( "com/google/j2cl/generator/JsStaticField.vm" )
#end


#foreach ($superInterface in $classType.SuperInterfaceDescriptors)
${TranspilerUtils.getClassName($superInterface)}.$markImplementor($className);


#end
/**
 * @public {Class}
 */
$className.$class = Class.$createForClass(
    Util.$generateId('$simpleName'),
    Util.$generateId('$binaryName'),
    $superTypeName.$class,
    Util.$generateId('$sourceName'));
