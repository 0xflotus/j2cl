#if ($superBoxedTypeAsPrimitive)
  /**
   * $isInstance() function implementation is provided separately.
   */
#else
  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  #if (${classType.Descriptor.isJsFunctionImplementation()})
  static $isInstance(instance) {
    return instance != null &&
           instance.$is__$mangledTypeName;
  }
#else
  static $isInstance(instance) { return instance instanceof $className; }
#end
#end

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return ${utilAlias}.$canCastClass(classConstructor, $className);
  }
#if (${classType.Descriptor.isJsFunctionImplementation()})

  /**
   * Copies the fields from {@code from} to {@code to}.
   * @param {${className}} from
   * @param {*} to
   * @public
   */
  static $copy(from, to) {
#foreach ($field in $classType.getInstanceFields())
#set ($fieldName = ${ManglingNameUtils.getMangledName($field.Descriptor)})
    to.$fieldName = from.$fieldName;
#end
    // Marks the object is an instance of this class.
    to.$is__$mangledTypeName = true;
    // TODO: may copy Objects methods (equals, hashCode, etc. ) as well.
  }
#end

  /**
   * @return {${classAlias}}
   * @public
   */
#if (${classType.isEnum()})
  static $getClass() {
    $className.$clinit();
    if (!${className}.$class${className}_) {
      ${className}.$class${className}_ = $classAlias.$createForEnum(
          $utilAlias.$generateId('$simpleName'),
          $utilAlias.$generateId('$binaryName'),
          $utilAlias.$generateId('$sourceName'),
          // TODO(rluble): emit here the enum values
          null);
    }
    return ${className}.$class${className}_;
  }
#else
  static $getClass() {
    $className.$clinit();
    if (!${className}.$class${className}_) {
      ${className}.$class${className}_ = $classAlias.$createForClass(
          $utilAlias.$generateId('$simpleName'),
          $utilAlias.$generateId('$binaryName'),
          $utilAlias.$generateId('$sourceName'));
    }
    return ${className}.$class${className}_;
  }
#end

  /**
   * @override
   * @return {${classAlias}}
   * @public
   */
  m_getClass() { return ${className}.$getClass(); }

#foreach ($staticField in $classType.getStaticFields())
#parse( "com/google/j2cl/generator/JsStaticFieldGetterSetter.vm" )
#end
#parse( "com/google/j2cl/generator/JsClinit.vm")
};
#foreach ($staticField in $classType.getStaticFields())
#parse( "com/google/j2cl/generator/JsStaticField.vm" )
#end


/**
 * The class literal field.
 * @private {$classAlias}
 */
${className}.$class${className}_ = null;


#foreach ($superInterfaceTypeDescriptor in $classType.SuperInterfaceTypeDescriptors)
#if (!${superInterfaceTypeDescriptor.isNative()})
${sourceGenerator.toSource($superInterfaceTypeDescriptor)}.$markImplementor($className);


#end
#end
