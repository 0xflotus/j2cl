/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.accidentaloverride.AnotherAccidentalOverride.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.accidentaloverride.AnotherAccidentalOverride$impl');


let Parent = goog.require('com.google.j2cl.transpiler.readable.accidentaloverride.Parent$impl');
let SuperInterface = goog.require('com.google.j2cl.transpiler.readable.accidentaloverride.SuperInterface$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let AssertionError = goog.forwardDeclare('java.lang.AssertionError$impl');
let java_lang_Object = goog.forwardDeclare('java.lang.Object$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @extends {Parent<AssertionError>}
 * @implements {SuperInterface<AssertionError>}
 */
class AnotherAccidentalOverride extends Parent {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!AnotherAccidentalOverride}
   * @public
   */
  static $create__() {
    AnotherAccidentalOverride.$clinit();
    let $instance = new AnotherAccidentalOverride();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_accidentaloverride_AnotherAccidentalOverride__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_accidentaloverride_AnotherAccidentalOverride__() {
    this.$ctor__com_google_j2cl_transpiler_readable_accidentaloverride_Parent__();
    this.$init__com_google_j2cl_transpiler_readable_accidentaloverride_AnotherAccidentalOverride();
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object(arg0) {
    super.m_foo__java_lang_Error(
        /**@type {AssertionError} */ ($Casts.to(arg0, AssertionError)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AnotherAccidentalOverride;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AnotherAccidentalOverride);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    AnotherAccidentalOverride.$clinit = function() {};
    AssertionError = goog.module.get('java.lang.AssertionError$impl');
    java_lang_Object = goog.module.get('java.lang.Object$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    Parent.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_accidentaloverride_AnotherAccidentalOverride() {
  }
};

$Util.$setClassMetadata(
    AnotherAccidentalOverride,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.accidentaloverride.AnotherAccidentalOverride'));


SuperInterface.$markImplementor(AnotherAccidentalOverride);


/**
 * Export class.
 */
exports = AnotherAccidentalOverride;
//# sourceMappingURL=AnotherAccidentalOverride.js.map