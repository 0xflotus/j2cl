/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass$H.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass.H$impl');


let JsConstructorClass$G = goog.require('com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass.G$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');


class JsConstructorClass$H extends JsConstructorClass$G {
  /**
   * Real constructor.
   * @public
   */
  constructor() {
    super();
    this.$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass$H__();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!JsConstructorClass$H}
   * @public
   */
  static $create__() {
    JsConstructorClass$H.$clinit();
    return new JsConstructorClass$H();
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass$H__() {
    this.$init__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass$H();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof JsConstructorClass$H;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, JsConstructorClass$H);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('java.lang.Class$impl');
    JsConstructorClass$G.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass$H() {
  }
};

$Util.$setClassMetadata(
    JsConstructorClass$H,
    'com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass$H');



/**
 * Export class.
 */
exports = JsConstructorClass$H;
//# sourceMappingURL=JsConstructorClass$H.js.map