/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass$SubVarargs.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass.SubVarargs$impl');


const Varargs = goog.require('com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass.Varargs$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let java_lang_Object = goog.forwardDeclare('java.lang.Object$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class SubVarargs extends Varargs {
  /**
   * Real constructor.
   * @param {*} i
   * @param {...number} args
   * @public
   */
  constructor(i, ...args) {
    $Arrays.$stampType(args, $int, 1);
    super(...$Arrays.$checkNotNull(args));
    this.$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_SubVarargs__java_lang_Object__arrayOf_int(
        i, args);
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {*} i
   * @param {Array<number>} args
   * @return {!SubVarargs}
   * @public
   */
  static $create__java_lang_Object__arrayOf_int(i, args) {
    SubVarargs.$clinit();
    return new SubVarargs(i, ...$Arrays.$checkNotNull(args));
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {*} i
   * @param {Array<number>} args
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_SubVarargs__java_lang_Object__arrayOf_int(
      i, args) {
    this.$init__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_SubVarargs();
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {number} j
   * @return {!SubVarargs}
   * @public
   */
  static $create__int(j) {
    SubVarargs.$clinit();
    let $instance = new SubVarargs(java_lang_Object.$create__(), j);
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_SubVarargs__int(
            j);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {number} j
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_SubVarargs__int(
      j) {}

  /**
   * @return {void}
   * @public
   */
  static m_subNativeInvocation___$pp_com_google_j2cl_transpiler_readable_jsconstructor() {
    SubVarargs.$clinit();
    let unusedS1 = SubVarargs.$create__int(2);
    let unusedS2 = SubVarargs.$create__java_lang_Object__arrayOf_int(
        java_lang_Object.$create__(),
        /**@type {!Array<number>} */ ($Arrays.$init([1, 2, 3], $int)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SubVarargs;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SubVarargs);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    SubVarargs.$clinit = function() {};
    java_lang_Object = goog.module.get('java.lang.Object$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Varargs.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsconstructor_JsConstructorClass_SubVarargs() {
  }
};

$Util.$setClassMetadata(
    SubVarargs,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsconstructor.JsConstructorClass$SubVarargs'));



/**
 * Export class.
 */
exports = SubVarargs;
//# sourceMappingURL=JsConstructorClass$SubVarargs.js.map