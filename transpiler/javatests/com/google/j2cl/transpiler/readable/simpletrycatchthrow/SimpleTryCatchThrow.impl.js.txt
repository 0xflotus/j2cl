/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.simpletrycatchthrow.SimpleTryCatchThrow.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.simpletrycatchthrow.SimpleTryCatchThrow$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let ClassCastException =
    goog.forwardDeclare('gen.java.lang.ClassCastException$impl');
let NullPointerException =
    goog.forwardDeclare('gen.java.lang.NullPointerException$impl');
let Throwable = goog.forwardDeclare('gen.java.lang.Throwable$impl');
let $Exceptions = goog.forwardDeclare('vmbootstrap.Exceptions$impl');


class SimpleTryCatchThrow extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!SimpleTryCatchThrow}
   * @public
   */
  static $create() {
    SimpleTryCatchThrow.$clinit();
    let $instance = new SimpleTryCatchThrow;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simpletrycatchthrow_SimpleTryCatchThrow();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_simpletrycatchthrow_SimpleTryCatchThrow() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_simpletrycatchthrow_SimpleTryCatchThrow();
  }

  /**
   * @return {void}
   * @public
   */
  m_main() {
    try {
      throw $Exceptions.toJs(ClassCastException.$create());
    } catch (e) {
      e = $Exceptions.toJava(e);
      if (NullPointerException.$isInstance(e) ||
          ClassCastException.$isInstance(e)) {
      } else {
        throw $Exceptions.toJs(e);
      }
    } finally {
    }
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SimpleTryCatchThrow;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SimpleTryCatchThrow);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    SimpleTryCatchThrow.$clinit();
    if (!SimpleTryCatchThrow.$classSimpleTryCatchThrow_) {
      SimpleTryCatchThrow.$classSimpleTryCatchThrow_ = Class.$createForClass(
          $Util.$generateId('SimpleTryCatchThrow'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simpletrycatchthrow.SimpleTryCatchThrow'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simpletrycatchthrow.SimpleTryCatchThrow'));
    }
    return SimpleTryCatchThrow.$classSimpleTryCatchThrow_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return SimpleTryCatchThrow.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    ClassCastException =
        goog.module.get('gen.java.lang.ClassCastException$impl');
    NullPointerException =
        goog.module.get('gen.java.lang.NullPointerException$impl');
    Throwable = goog.module.get('gen.java.lang.Throwable$impl');
    $Exceptions = goog.module.get('vmbootstrap.Exceptions$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simpletrycatchthrow_SimpleTryCatchThrow() {
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
SimpleTryCatchThrow.$classSimpleTryCatchThrow_ = null;



/**
 * Export class.
 */
exports = SimpleTryCatchThrow;
//# sourceMappingURL=SimpleTryCatchThrow.js.map