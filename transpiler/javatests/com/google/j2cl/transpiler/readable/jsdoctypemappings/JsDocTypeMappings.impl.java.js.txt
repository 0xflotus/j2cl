/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsdoctypemappings.JsDocTypeMappings.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.jsdoctypemappings.JsDocTypeMappings$impl');


let java_lang_Object = goog.require('java.lang.Object$impl');
let $Long = goog.require('nativebootstrap.Long$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let ExportedType = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsdoctypemappings.JsDocTypeMappings.ExportedTypeNewName$impl');
let NativeFunction = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsdoctypemappings.JsDocTypeMappings.NativeFunction$impl');
let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Byte = goog.forwardDeclare('java.lang.Byte$impl');
let Character = goog.forwardDeclare('java.lang.Character$impl');
let Comparable = goog.forwardDeclare('java.lang.Comparable$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Float = goog.forwardDeclare('java.lang.Float$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Long = goog.forwardDeclare('java.lang.Long$impl');
let Short = goog.forwardDeclare('java.lang.Short$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let Comparator = goog.forwardDeclare('java.util.Comparator$impl');
let $long = goog.forwardDeclare('vmbootstrap.primitives.$long$impl');
let $void = goog.forwardDeclare('vmbootstrap.primitives.$void$impl');
let $Primitives = goog.forwardDeclare('vmbootstrap.primitives.Primitives$impl');


class JsDocTypeMappings extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!JsDocTypeMappings}
   * @public
   */
  static $create__() {
    JsDocTypeMappings.$clinit();
    let $instance = new JsDocTypeMappings();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsdoctypemappings_JsDocTypeMappings__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsdoctypemappings_JsDocTypeMappings__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jsdoctypemappings_JsDocTypeMappings();
  }

  /**
   * @return {Comparator<?>}
   * @public
   */
  m_returnComparatorWildcard___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {(Comparable|?boolean|?number|?string)}
   * @public
   */
  m_returnComparable___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {?string}
   * @public
   */
  m_returnJavaLangString___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {*}
   * @public
   */
  m_returnJavaLangObject___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {Byte}
   * @public
   */
  m_returnJavaLangByte___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {Short}
   * @public
   */
  m_returnJavaLangShort___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {Integer}
   * @public
   */
  m_returnJavaLangInteger___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {Long}
   * @public
   */
  m_returnJavaLangLong___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {Float}
   * @public
   */
  m_returnJavaLangFloat___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {?number}
   * @public
   */
  m_returnJavaLangDouble___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {Character}
   * @public
   */
  m_returnJavaLangCharacter___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {?boolean}
   * @public
   */
  m_returnJavaLangBoolean___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {number}
   * @public
   */
  m_returnByte___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return 0;
  }

  /**
   * @return {number}
   * @public
   */
  m_returnShort___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return 0;
  }

  /**
   * @return {number}
   * @public
   */
  m_returnInt___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return 0;
  }

  /**
   * @return {!$Long}
   * @public
   */
  m_returnLong___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return $Primitives.$widenIntToLong(0);
  }

  /**
   * @return {number}
   * @public
   */
  m_returnFloat___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return 0;
  }

  /**
   * @return {number}
   * @public
   */
  m_returnDouble___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return 0;
  }

  /**
   * @return {number}
   * @public
   */
  m_returnChar___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return 0 /* "\u0000" */;
  }

  /**
   * @return {boolean}
   * @public
   */
  m_returnBoolean___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return false;
  }

  /**
   * @return {void}
   * @public
   */
  m_returnVoid___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {}

  /**
   * @return {?function():void}
   * @public
   */
  m_returnNativeFunction___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {Array}
   * @public
   */
  m_returnNativeType___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @return {ExportedType}
   * @public
   */
  m_returnExportedType___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * @template M_MethodTypeParameter
   * @return {M_MethodTypeParameter}
   * @public
   */
  m_returnMethodTypeParameter___$pp_com_google_j2cl_transpiler_readable_jsdoctypemappings() {
    return null;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof JsDocTypeMappings;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, JsDocTypeMappings);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    ExportedType = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsdoctypemappings.JsDocTypeMappings.ExportedTypeNewName$impl');
    NativeFunction = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsdoctypemappings.JsDocTypeMappings.NativeFunction$impl');
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Byte = goog.module.get('java.lang.Byte$impl');
    Character = goog.module.get('java.lang.Character$impl');
    Comparable = goog.module.get('java.lang.Comparable$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Float = goog.module.get('java.lang.Float$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    Long = goog.module.get('java.lang.Long$impl');
    Short = goog.module.get('java.lang.Short$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    Comparator = goog.module.get('java.util.Comparator$impl');
    $long = goog.module.get('vmbootstrap.primitives.$long$impl');
    $void = goog.module.get('vmbootstrap.primitives.$void$impl');
    $Primitives = goog.module.get('vmbootstrap.primitives.Primitives$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsdoctypemappings_JsDocTypeMappings() {
  }
};

$Util.$setClassMetadata(
    JsDocTypeMappings,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsdoctypemappings.JsDocTypeMappings'));



/**
 * Export class.
 */
exports = JsDocTypeMappings;
//# sourceMappingURL=JsDocTypeMappings.js.map