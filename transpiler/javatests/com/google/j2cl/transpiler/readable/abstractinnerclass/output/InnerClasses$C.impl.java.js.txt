/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.abstractinnerclass.InnerClasses$C.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.abstractinnerclass.InnerClasses.C$impl');


const A = goog.require('com.google.j2cl.transpiler.readable.abstractinnerclass.InnerClasses.A$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let InnerClasses = goog.forwardDeclare('com.google.j2cl.transpiler.readable.abstractinnerclass.InnerClasses$impl');


/**
 * @abstract
 * @implements {A}
 */
class C extends java_lang_Object {
  /**
   * @private
   */
  constructor() {
    super();
    /** @public {InnerClasses} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_abstractinnerclass_InnerClasses_C =
        null;
  }

  /**
   * Initialization from constructor 'C(InnerClasses)'.
   * @param {InnerClasses} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_abstractinnerclass_InnerClasses_C__com_google_j2cl_transpiler_readable_abstractinnerclass_InnerClasses(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_abstractinnerclass_InnerClasses_C =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {void}
   * @public
   */
  m_bar___$pp_com_google_j2cl_transpiler_readable_abstractinnerclass() {
    this.m_foo__();
  }

  /**
   * @abstract
   * @override
   * @return {void}
   * @public
   */
  m_foo__() {}

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof C;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, C);
  }

  /**
   * @public
   */
  static $clinit() {
    C.$clinit = function() {};
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    C,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.abstractinnerclass.InnerClasses$C'));


A.$markImplementor(C);


exports = C;
//# sourceMappingURL=InnerClasses$C.js.map