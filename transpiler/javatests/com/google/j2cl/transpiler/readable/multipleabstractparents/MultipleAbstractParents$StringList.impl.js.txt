/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$StringList.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$StringList$impl');


let MultipleAbstractParents$AbstractStringList = goog.require('gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$AbstractStringList$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let MultipleAbstractParents = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let String = goog.forwardDeclare('gen.java.lang.String$impl');


class MultipleAbstractParents$StringList extends
    MultipleAbstractParents$AbstractStringList {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!MultipleAbstractParents$StringList}
   * @public
   */
  static $create() {
    MultipleAbstractParents$StringList.$clinit();
    let $instance = new MultipleAbstractParents$StringList;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents$StringList();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents$StringList() {
    this.$ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents$AbstractStringList();
    this.$init__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents$StringList();
  }

  /**
   * Synthetic method.
   * @param {?string} arg0
   * @return {?string}
   * @public
   */
  m_getFoo__java_lang_String(arg0) {
    return this.m_getFoo__java_lang_Object(arg0);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof MultipleAbstractParents$StringList;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(
        classConstructor, MultipleAbstractParents$StringList);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    MultipleAbstractParents$StringList.$clinit();
    if (!MultipleAbstractParents$StringList
             .$classMultipleAbstractParents$StringList_) {
      MultipleAbstractParents$StringList
          .$classMultipleAbstractParents$StringList_ = Class.$createForClass(
          $Util.$generateId('StringList'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$StringList'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.StringList'));
    }
    return MultipleAbstractParents$StringList
        .$classMultipleAbstractParents$StringList_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return MultipleAbstractParents$StringList.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    MultipleAbstractParents = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    String = goog.module.get('gen.java.lang.String$impl');
    MultipleAbstractParents$AbstractStringList.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents$StringList() {
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
MultipleAbstractParents$StringList.$classMultipleAbstractParents$StringList_ =
    null;



/**
 * Export class.
 */
exports = MultipleAbstractParents$StringList;
//# sourceMappingURL=MultipleAbstractParents$StringList.js.map