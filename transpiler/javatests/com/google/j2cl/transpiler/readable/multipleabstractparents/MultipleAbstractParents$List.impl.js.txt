/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$List.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$List$impl');


let $Util = goog.require('nativebootstrap.Util$impl');

let MultipleAbstractParents = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let String = goog.forwardDeclare('gen.java.lang.String$impl');


/**
 * @interface
 * @template C_List_T
 */
class MultipleAbstractParents$List {
  /**
   * @param {C_List_T} t
   * @return {?string}
   * @public
   */
  m_getFoo__java_lang_Object(t) {}

  /**
   * Marks the provided class as implementing this interface.
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents$List =
        true;
  }

  /**
   * Returns whether the provided instance is of a class that implements this
   * interface.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance != null &&
           instance
               .$implements__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents$List;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
           classConstructor.prototype
               .$implements__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents$List;
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    MultipleAbstractParents$List.$clinit();
    if (!MultipleAbstractParents$List.$classMultipleAbstractParents$List_) {
      MultipleAbstractParents$List
          .$classMultipleAbstractParents$List_ = Class.$createForInterface(
          $Util.$generateId('List'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$List'),
          null,
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.List'));
    }
    return MultipleAbstractParents$List.$classMultipleAbstractParents$List_;
  }

  /**
   * Runs inline static field initializers.
   * @public
   * @nocollapse
   */
  static $clinit() {
    MultipleAbstractParents = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    String = goog.module.get('gen.java.lang.String$impl');
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
MultipleAbstractParents$List.$classMultipleAbstractParents$List_ = null;


MultipleAbstractParents$List.$markImplementor(
    /** @type {Function} */ (MultipleAbstractParents$List));

/**
 * Export class.
 */
exports = MultipleAbstractParents$List;
