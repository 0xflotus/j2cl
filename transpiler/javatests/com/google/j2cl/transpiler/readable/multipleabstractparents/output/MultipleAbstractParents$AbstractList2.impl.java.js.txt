/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$AbstractList2.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.AbstractList2$impl');


const List = goog.require('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.List$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @abstract
 * @template C_AbstractList2_T
 * @implements {List<C_AbstractList2_T>}
 */
class AbstractList2 extends java_lang_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Initialization from constructor 'AbstractList2()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_AbstractList2__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @abstract
   * @override
   * @param {C_AbstractList2_T} arg0
   * @return {?string}
   * @public
   */
  m_getFoo__java_lang_Object(arg0) {}

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AbstractList2;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AbstractList2);
  }

  /**
   * @public
   */
  static $clinit() {
    AbstractList2.$clinit = function() {};
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    AbstractList2,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$AbstractList2'));


List.$markImplementor(AbstractList2);


exports = AbstractList2;
//# sourceMappingURL=MultipleAbstractParents$AbstractList2.js.map