[UNKNOWN] => [super();]
[UNKNOWN] => [MultipleAbstractParents.$clinit();]
[UNKNOWN] => [let $instance = new MultipleAbstractParents();]
[UNKNOWN] => [$instance.$ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents__();]
[UNKNOWN] => [return $instance;]
[UNKNOWN] => [this.$ctor__java_lang_Object__();]
[UNKNOWN] => [this.$init__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents();]
[UNKNOWN] => [MultipleAbstractParents.$clinit();]
[assert new ArrayList<String>().getFoo(null).equals("AbstractCollection");] => [$Asserts.$enabled() && $Asserts.$assert(java_lang_String.m_equals__java_lang_String__java_lang_Object(/**@type {!MultipleAbstractParents$ArrayList<?string>} */ (MultipleAbstractParents$ArrayList.$create__()).m_getFoo__java_lang_Object(null), "AbstractCollection"));]
[assert new StringList().getFoo(null).equals("AbstractCollection");] => [$Asserts.$enabled() && $Asserts.$assert(java_lang_String.m_equals__java_lang_String__java_lang_Object(MultipleAbstractParents$StringList.$create__().m_getFoo__java_lang_Object(null), "AbstractCollection"));]
[assert ((IStringList) new StringList()).getFoo(null).equals("AbstractCollection");] => [$Asserts.$enabled() && $Asserts.$assert(java_lang_String.m_equals__java_lang_String__java_lang_Object((/**@type {MultipleAbstractParents$IStringList} */ ($Casts.to(MultipleAbstractParents$StringList.$create__(), MultipleAbstractParents$IStringList))).m_getFoo__java_lang_String(null), "AbstractCollection"));]
