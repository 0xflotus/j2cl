/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let MultipleAbstractParents$AbstractCollection = goog.forwardDeclare('gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$AbstractCollection$impl');
let MultipleAbstractParents$ArrayList = goog.forwardDeclare('gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$ArrayList$impl');
let MultipleAbstractParents$IStringList = goog.forwardDeclare('gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$IStringList$impl');
let MultipleAbstractParents$StringList = goog.forwardDeclare('gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$StringList$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let String = goog.forwardDeclare('gen.java.lang.String$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


class MultipleAbstractParents extends Object {
  /**
   * Defines instance fields.
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!MultipleAbstractParents}
   * @public
   */
  static $create() {
    MultipleAbstractParents.$clinit();
    let $instance = new MultipleAbstractParents();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents();
  }

  /**
   * @param {Array<?string>} args
   * @return {void}
   * @public
   */
  static m_main__arrayOf_java_lang_String(args) {
    MultipleAbstractParents.$clinit();
    $Asserts.$enabled() &&
        $Asserts.$assert(String.m_equals__java_lang_String__java_lang_Object(
            /**@type {!MultipleAbstractParents$ArrayList<?string>} */ (
                MultipleAbstractParents$ArrayList.$create())
                .m_getFoo__java_lang_Object(null),
            'AbstractCollection'));
    $Asserts.$enabled() &&
        $Asserts.$assert(String.m_equals__java_lang_String__java_lang_Object(
            MultipleAbstractParents$StringList.$create()
                .m_getFoo__java_lang_Object(null),
            'AbstractCollection'));
    $Asserts.$enabled() &&
        $Asserts.$assert(String.m_equals__java_lang_String__java_lang_Object(
            (/**@type {MultipleAbstractParents$IStringList} */ ($Casts.to(
                 MultipleAbstractParents$StringList.$create(),
                 MultipleAbstractParents$IStringList)))
                .m_getFoo__java_lang_String(null),
            'AbstractCollection'));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof MultipleAbstractParents;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MultipleAbstractParents);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    MultipleAbstractParents$AbstractCollection = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$AbstractCollection$impl');
    MultipleAbstractParents$ArrayList = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$ArrayList$impl');
    MultipleAbstractParents$IStringList = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$IStringList$impl');
    MultipleAbstractParents$StringList = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$StringList$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    String = goog.module.get('gen.java.lang.String$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents() {
  }
};

$Util.$setClassMetadata(
    MultipleAbstractParents,
    'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents');



/**
 * Export class.
 */
exports = MultipleAbstractParents;
//# sourceMappingURL=MultipleAbstractParents.js.map