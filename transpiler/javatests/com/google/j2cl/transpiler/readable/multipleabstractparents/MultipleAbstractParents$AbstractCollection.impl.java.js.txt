/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$AbstractCollection.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.AbstractCollection$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let java_lang_String = goog.forwardDeclare('java.lang.String$impl');


/**
 * @abstract
 * @template C_AbstractCollection_T
 */
class AbstractCollection extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Initialization from constructor 'AbstractCollection()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_AbstractCollection__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_AbstractCollection();
  }

  /**
   * @param {C_AbstractCollection_T} t
   * @return {?string}
   * @public
   */
  m_getFoo__java_lang_Object(t) {
    return 'AbstractCollection';
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AbstractCollection;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AbstractCollection);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    AbstractCollection.$clinit = function() {};
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_AbstractCollection() {
  }
};

$Util.$setClassMetadata(
    AbstractCollection,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$AbstractCollection'));



/**
 * Export class.
 */
exports = AbstractCollection;
//# sourceMappingURL=MultipleAbstractParents$AbstractCollection.js.map