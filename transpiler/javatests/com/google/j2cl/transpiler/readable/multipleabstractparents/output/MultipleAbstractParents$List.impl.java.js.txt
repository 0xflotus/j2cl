/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$List.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.List$impl');


const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.List.$LambdaAdaptor$impl');


/**
 * @interface
 * @template C_List_T
 */
class List {
  /**
   * @abstract
   * @param {C_List_T} t
   * @return {?string}
   * @public
   */
  m_getFoo__java_lang_Object(t) {}

  /**
   * @template C_List_T
   * @param {?function(C_List_T):?string} fn
   * @return {List<C_List_T>}
   * @public
   */
  static $adapt(fn) {
    List.$clinit();
    return /**@type {!$LambdaAdaptor<*>} */ (new $LambdaAdaptor(fn));
  }

  /**
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_List =
        true;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_List;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_multipleabstractparents_MultipleAbstractParents_List;
  }

  /**
   * @public
   */
  static $clinit() {
    List.$clinit = function() {};
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents.List.$LambdaAdaptor$impl');
  }
};

$Util.$setClassMetadataForInterface(
    List,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.multipleabstractparents.MultipleAbstractParents$List'));


List.$markImplementor(/** @type {Function} */ (List));


exports = List;
//# sourceMappingURL=MultipleAbstractParents$List.js.map