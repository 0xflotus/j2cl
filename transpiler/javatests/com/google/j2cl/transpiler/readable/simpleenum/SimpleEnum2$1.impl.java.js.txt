/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.simpleenum.SimpleEnum2$1.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.simpleenum.SimpleEnum2.$1$impl');


const SimpleEnum2 = goog.require('com.google.j2cl.transpiler.readable.simpleenum.SimpleEnum2$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let java_lang_Object = goog.forwardDeclare('java.lang.Object$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class $1 extends SimpleEnum2 {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'new SimpleEnum2(String, int,
   * int)'.
   * @param {?string} $name
   * @param {number} $ordinal
   * @param {number} $_0
   * @return {!$1}
   * @public
   */
  static $create__java_lang_String__int__int($name, $ordinal, $_0) {
    $1.$clinit();
    let $instance = new $1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simpleenum_SimpleEnum2_1__java_lang_String__int__int(
            $name, $ordinal, $_0);
    return $instance;
  }

  /**
   * Initialization from constructor 'new SimpleEnum2(String, int, int)'.
   * @param {?string} $name
   * @param {number} $ordinal
   * @param {number} $_0
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_simpleenum_SimpleEnum2_1__java_lang_String__int__int(
      $name, $ordinal, $_0) {
    this.$ctor__com_google_j2cl_transpiler_readable_simpleenum_SimpleEnum2__java_lang_String__int__int(
        $name, $ordinal, $_0);
    this.$init__com_google_j2cl_transpiler_readable_simpleenum_SimpleEnum2_1();
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {number}
   * @public
   */
  m_compareTo__java_lang_Object(arg0) {
    return super.compareTo(
        /**@type {SimpleEnum2} */ ($Casts.to(arg0, SimpleEnum2)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $1;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $1);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $1.$clinit = function() {};
    java_lang_Object = goog.module.get('java.lang.Object$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    SimpleEnum2.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simpleenum_SimpleEnum2_1() {}
};

$Util.$setClassMetadata(
    $1,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.simpleenum.SimpleEnum2$1'));



/**
 * Export class.
 */
exports = $1;
//# sourceMappingURL=SimpleEnum2$1.js.map