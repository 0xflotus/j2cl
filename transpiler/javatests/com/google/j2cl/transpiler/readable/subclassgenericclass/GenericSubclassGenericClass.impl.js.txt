/**
 * Impl transpiled from
 * com.google.j2cl.transpiler.readable.subclassgenericclass.GenericSubclassGenericClass.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.subclassgenericclass.GenericSubclassGenericClass$impl');


let GenericClass = goog.require('gen.com.google.j2cl.transpiler.readable.subclassgenericclass.GenericClass$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');


/**
 * @template C_T
 * @extends {GenericClass<C_T>}
 */
class GenericSubclassGenericClass extends GenericClass {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_subclassgenericclass_GenericSubclassGenericClass() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @return {!GenericSubclassGenericClass<C_T>}
   * @public
   * @nocollapse
   */
  static $create() {
    GenericSubclassGenericClass.$clinit();
    let instance = new GenericSubclassGenericClass;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_subclassgenericclass_GenericSubclassGenericClass();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_subclassgenericclass_GenericSubclassGenericClass() {
    this.$ctor__com_google_j2cl_transpiler_readable_subclassgenericclass_GenericClass();
    this.$init__com_google_j2cl_transpiler_readable_subclassgenericclass_GenericSubclassGenericClass();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof GenericSubclassGenericClass;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, GenericSubclassGenericClass);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    GenericSubclassGenericClass.$clinit();
    if (!GenericSubclassGenericClass.$classGenericSubclassGenericClass) {
      GenericSubclassGenericClass
          .$classGenericSubclassGenericClass = Class.$createForClass(
          $Util.$generateId('GenericSubclassGenericClass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.subclassgenericclass.GenericSubclassGenericClass'),
          GenericClass.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.subclassgenericclass.GenericSubclassGenericClass'));
    }
    return GenericSubclassGenericClass.$classGenericSubclassGenericClass;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    GenericClass.$clinit();
  }
}
;



/**
 * Export class.
 */
exports = GenericSubclassGenericClass;
