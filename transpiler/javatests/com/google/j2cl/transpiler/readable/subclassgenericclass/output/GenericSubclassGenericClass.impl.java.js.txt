/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.subclassgenericclass.GenericSubclassGenericClass.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.subclassgenericclass.GenericSubclassGenericClass$impl');


const GenericClass = goog.require('com.google.j2cl.transpiler.readable.subclassgenericclass.GenericClass$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template C_T
 * @extends {GenericClass<C_T>}
 */
class GenericSubclassGenericClass extends GenericClass {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor
   * 'GenericSubclassGenericClass()'.
   * @template C_T
   * @return {!GenericSubclassGenericClass<C_T>}
   * @public
   */
  static $create__() {
    GenericSubclassGenericClass.$clinit();
    let $instance = new GenericSubclassGenericClass();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_subclassgenericclass_GenericSubclassGenericClass__();
    return $instance;
  }

  /**
   * Initialization from constructor 'GenericSubclassGenericClass()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_subclassgenericclass_GenericSubclassGenericClass__() {
    this.$ctor__com_google_j2cl_transpiler_readable_subclassgenericclass_GenericClass__();
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    GenericSubclassGenericClass.$clinit = (() => {});
    GenericSubclassGenericClass.$loadModules();
    GenericClass.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof GenericSubclassGenericClass;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, GenericSubclassGenericClass);
  }

  /**
   * @private
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    GenericSubclassGenericClass,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.subclassgenericclass.GenericSubclassGenericClass'));



exports = GenericSubclassGenericClass;
//# sourceMappingURL=GenericSubclassGenericClass.js.map