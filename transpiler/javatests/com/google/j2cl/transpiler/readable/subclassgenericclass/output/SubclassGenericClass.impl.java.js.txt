/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.subclassgenericclass.SubclassGenericClass.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.subclassgenericclass.SubclassGenericClass$impl');


const GenericClass = goog.require('com.google.j2cl.transpiler.readable.subclassgenericclass.GenericClass$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @extends {GenericClass<SubclassGenericClass>}
 */
class SubclassGenericClass extends GenericClass {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'SubclassGenericClass()'.
   * @return {!SubclassGenericClass}
   * @public
   */
  static $create__() {
    SubclassGenericClass.$clinit();
    let $instance = new SubclassGenericClass();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_subclassgenericclass_SubclassGenericClass__();
    return $instance;
  }

  /**
   * Initialization from constructor 'SubclassGenericClass()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_subclassgenericclass_SubclassGenericClass__() {
    this.$ctor__com_google_j2cl_transpiler_readable_subclassgenericclass_GenericClass__();
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SubclassGenericClass;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SubclassGenericClass);
  }

  /**
   * @public
   */
  static $clinit() {
    SubclassGenericClass.$clinit = function() {};
    GenericClass.$clinit();
  }
};

$Util.$setClassMetadata(
    SubclassGenericClass,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.subclassgenericclass.SubclassGenericClass'));



exports = SubclassGenericClass;
//# sourceMappingURL=SubclassGenericClass.js.map