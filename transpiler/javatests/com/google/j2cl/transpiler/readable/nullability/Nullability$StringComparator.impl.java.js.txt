/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.nullability.Nullability$StringComparator.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.nullability.Nullability.StringComparator$impl');


let Object = goog.require('java.lang.Object$impl');
let Comparator = goog.require('java.util.Comparator$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');
let String = goog.forwardDeclare('java.lang.String$impl');
let Comparator$$Overlay = goog.forwardDeclare('java.util.Comparator.$Overlay$impl');
let Function = goog.forwardDeclare('java.util.function.Function$impl');
let ToDoubleFunction = goog.forwardDeclare('java.util.function.ToDoubleFunction$impl');
let ToIntFunction = goog.forwardDeclare('java.util.function.ToIntFunction$impl');
let ToLongFunction = goog.forwardDeclare('java.util.function.ToLongFunction$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @implements {Comparator<string>}
 */
class Nullability$StringComparator extends Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Nullability$StringComparator}
   * @public
   */
  static $create() {
    Nullability$StringComparator.$clinit();
    let $instance = new Nullability$StringComparator();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_nullability_Nullability$StringComparator();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_nullability_Nullability$StringComparator() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_nullability_Nullability$StringComparator();
  }

  /**
   * @param {string} a
   * @param {string} b
   * @return {number}
   * @public
   */
  m_compare__java_lang_String__java_lang_String(a, b) { return 0; }

  /**
   * Default method forwarding stub.
   * @override
   * @return {Comparator<string>}
   * @public
   */
  m_reversed() {
    return /**@type {Comparator<string>} */ (
        Comparator$$Overlay.m_reversed__java_util_Comparator(this));
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {Comparator<?>} arg0
   * @return {Comparator<string>}
   * @public
   */
  m_thenComparing__java_util_Comparator(arg0) {
    return /**@type {Comparator<string>} */ (
        Comparator$$Overlay
            .m_thenComparing__java_util_Comparator__java_util_Comparator(
                this, arg0));
  }

  /**
   * Default method forwarding stub.
   * @override
   * @template M_U
   * @param {Function<?, ?>} arg0
   * @return {Comparator<string>}
   * @public
   */
  m_thenComparing__java_util_function_Function(arg0) {
    return /**@type {Comparator<string>} */ (
        Comparator$$Overlay
            .m_thenComparing__java_util_Comparator__java_util_function_Function(
                this, arg0));
  }

  /**
   * Default method forwarding stub.
   * @override
   * @template M_U
   * @param {Function<?, ?>} arg0
   * @param {Comparator<?>} arg1
   * @return {Comparator<string>}
   * @public
   */
  m_thenComparing__java_util_function_Function__java_util_Comparator(
      arg0, arg1) {
    return /**@type {Comparator<string>} */ (
        Comparator$$Overlay
            .m_thenComparing__java_util_Comparator__java_util_function_Function__java_util_Comparator(
                this, arg0, arg1));
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {ToDoubleFunction<?>} arg0
   * @return {Comparator<string>}
   * @public
   */
  m_thenComparingDouble__java_util_function_ToDoubleFunction(arg0) {
    return /**@type {Comparator<string>} */ (
        Comparator$$Overlay
            .m_thenComparingDouble__java_util_Comparator__java_util_function_ToDoubleFunction(
                this, arg0));
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {ToIntFunction<?>} arg0
   * @return {Comparator<string>}
   * @public
   */
  m_thenComparingInt__java_util_function_ToIntFunction(arg0) {
    return /**@type {Comparator<string>} */ (
        Comparator$$Overlay
            .m_thenComparingInt__java_util_Comparator__java_util_function_ToIntFunction(
                this, arg0));
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {ToLongFunction<?>} arg0
   * @return {Comparator<string>}
   * @public
   */
  m_thenComparingLong__java_util_function_ToLongFunction(arg0) {
    return /**@type {Comparator<string>} */ (
        Comparator$$Overlay
            .m_thenComparingLong__java_util_Comparator__java_util_function_ToLongFunction(
                this, arg0));
  }

  /**
   * Bridge method.
   * @override
   * @param {string} arg0
   * @param {string} arg1
   * @return {number}
   * @public
   */
  m_compare__java_lang_Object__java_lang_Object(arg0, arg1) {
    return this.m_compare__java_lang_String__java_lang_String(
        /**@type {string} */ ($Casts.to(arg0, String)),
        /**@type {string} */ ($Casts.to(arg1, String)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Nullability$StringComparator;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Nullability$StringComparator);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('java.lang.Class$impl');
    String = goog.module.get('java.lang.String$impl');
    Comparator$$Overlay = goog.module.get('java.util.Comparator.$Overlay$impl');
    Function = goog.module.get('java.util.function.Function$impl');
    ToDoubleFunction =
        goog.module.get('java.util.function.ToDoubleFunction$impl');
    ToIntFunction = goog.module.get('java.util.function.ToIntFunction$impl');
    ToLongFunction = goog.module.get('java.util.function.ToLongFunction$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nullability_Nullability$StringComparator() {
  }
};

$Util.$setClassMetadata(
    Nullability$StringComparator,
    'com.google.j2cl.transpiler.readable.nullability.Nullability$StringComparator');


Comparator.$markImplementor(Nullability$StringComparator);


/**
 * Export class.
 */
exports = Nullability$StringComparator;
//# sourceMappingURL=Nullability$StringComparator.js.map