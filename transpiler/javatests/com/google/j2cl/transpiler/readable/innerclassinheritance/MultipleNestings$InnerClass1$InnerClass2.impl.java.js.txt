/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1$InnerClass2.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.InnerClass1.InnerClass2$impl');


let MultipleNestings$Parent = goog.require('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.Parent$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let MultipleNestings$InnerClass1 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.InnerClass1$impl');


class MultipleNestings$InnerClass1$InnerClass2 extends MultipleNestings$Parent {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
    /** @public {MultipleNestings$InnerClass1} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2 =
        null;
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {MultipleNestings$InnerClass1} $outer_this
   * @return {!MultipleNestings$InnerClass1$InnerClass2}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1(
      $outer_this) {
    MultipleNestings$InnerClass1$InnerClass2.$clinit();
    let $instance = new MultipleNestings$InnerClass1$InnerClass2();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1(
            $outer_this);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {MultipleNestings$InnerClass1} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2 =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$Parent__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings(
        $outer_this
            .f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1);
    this.$init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2();
  }

  /**
   * @return {void}
   * @public
   */
  m_funInI2__() {}

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    this.m_fun__();
    this.m_fun__();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2
        .m_fun__();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2
        .f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1
        .m_funInM__();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2
        .f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1
        .m_funInM__();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2
        .m_funInI1__();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2
        .m_funInI1__();
    this.m_funInI2__();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof MultipleNestings$InnerClass1$InnerClass2;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(
        classConstructor, MultipleNestings$InnerClass1$InnerClass2);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    MultipleNestings$InnerClass1 = goog.module.get(
        'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.InnerClass1$impl');
    MultipleNestings$Parent.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2() {
  }
};

$Util.$setClassMetadata(
    MultipleNestings$InnerClass1$InnerClass2,
    'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1$InnerClass2');



/**
 * Export class.
 */
exports = MultipleNestings$InnerClass1$InnerClass2;
//# sourceMappingURL=MultipleNestings$InnerClass1$InnerClass2.js.map