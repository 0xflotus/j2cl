/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1$impl');


let MultipleNestings$Parent = goog.require('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$Parent$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let MultipleNestings$InnerClass1$InnerClass2 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1$InnerClass2$impl');
let MultipleNestings = goog.forwardDeclare('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$impl');
let Class = goog.forwardDeclare('java.lang.Class$impl');


class MultipleNestings$InnerClass1 extends MultipleNestings$Parent {
  /**
   * Defines instance fields.
   */
  constructor() {
    super();
    /**
     * @public {MultipleNestings}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1 =
        null;
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {MultipleNestings} $outer_this
   * @return {!MultipleNestings$InnerClass1}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings(
      $outer_this) {
    MultipleNestings$InnerClass1.$clinit();
    let $instance = new MultipleNestings$InnerClass1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings(
            $outer_this);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {MultipleNestings} $outer_this
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1 =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$Parent__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings(
        $outer_this);
    this.$init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1();
  }

  /**
   * @return {void}
   * @public
   */
  m_funInI1() {}

  /**
   * @return {MultipleNestings$InnerClass1$InnerClass2}
   * @public
   */
  $create_MultipleNestings$InnerClass1$InnerClass2() {
    return MultipleNestings$InnerClass1$InnerClass2
        .$create__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1(
            this);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof MultipleNestings$InnerClass1;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MultipleNestings$InnerClass1);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    MultipleNestings$InnerClass1$InnerClass2 = goog.module.get(
        'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1$InnerClass2$impl');
    MultipleNestings = goog.module.get(
        'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$impl');
    Class = goog.module.get('java.lang.Class$impl');
    MultipleNestings$Parent.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1() {
  }
};

$Util.$setClassMetadata(
    MultipleNestings$InnerClass1,
    'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1');



/**
 * Export class.
 */
exports = MultipleNestings$InnerClass1;
//# sourceMappingURL=MultipleNestings$InnerClass1.js.map