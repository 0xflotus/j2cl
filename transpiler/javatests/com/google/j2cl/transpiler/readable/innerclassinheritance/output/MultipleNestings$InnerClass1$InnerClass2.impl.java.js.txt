/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1$InnerClass2.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.InnerClass1.InnerClass2$impl');


const Parent = goog.require('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.Parent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let InnerClass1 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.InnerClass1$impl');


class InnerClass2 extends Parent {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
    /** @public {InnerClass1} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1_InnerClass2 =
        null;
  }

  /**
   * Factory method corresponding to constructor 'InnerClass2(InnerClass1)'.
   * @param {InnerClass1} $outer_this
   * @return {!InnerClass2}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1(
      $outer_this) {
    InnerClass2.$clinit();
    let $instance = new InnerClass2();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1_InnerClass2__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1(
            $outer_this);
    return $instance;
  }

  /**
   * Initialization from constructor 'InnerClass2(InnerClass1)'.
   * @param {InnerClass1} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1_InnerClass2__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1_InnerClass2 =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_Parent__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings(
        $outer_this
            .f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1);
  }

  /**
   * @return {void}
   * @public
   */
  m_funInI2__() {}

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    this.m_fun__();
    this.m_fun__();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1_InnerClass2
        .m_fun__();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1_InnerClass2
        .f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1
        .m_funInM__();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1_InnerClass2
        .f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1
        .m_funInM__();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1_InnerClass2
        .m_funInI1__();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings_InnerClass1_InnerClass2
        .m_funInI1__();
    this.m_funInI2__();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof InnerClass2;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, InnerClass2);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    InnerClass2.$clinit = function() {};
    Parent.$clinit();
  }
};

$Util.$setClassMetadata(
    InnerClass2,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1$InnerClass2'));



/**
 * Export class.
 */
exports = InnerClass2;
//# sourceMappingURL=MultipleNestings$InnerClass1$InnerClass2.js.map