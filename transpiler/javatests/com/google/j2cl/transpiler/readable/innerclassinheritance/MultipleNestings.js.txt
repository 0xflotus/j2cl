/**
 * Transpiled from
 * third_party/java_src/j2cl/transpiler/javatests/com/google/j2cl/transpiler/readable/innerclassinheritance/MultipleNestings.java.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestingsModule');


let Class = goog.require('gen.java.lang.CoreModule').Class;
let Object = goog.require('gen.java.lang.CoreModule').Object;
let $Util = goog.require('nativebootstrap.UtilModule').Util;


class MultipleNestings extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings() {
  }

  /**
   * @return {MultipleNestings$Parent}
   * @public
   */
  m_$create_MultipleNestings$Parent() {
    return MultipleNestings$Parent.$create(this);
  }

  /**
   * @return {void}
   * @public
   */
  m_funInM() {}

  /**
   * @return {MultipleNestings$InnerClass1}
   * @public
   */
  m_$create_MultipleNestings$InnerClass1() {
    return MultipleNestings$InnerClass1.$create(this);
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!MultipleNestings}
   * @public
   * @nocollapse
   */
  static $create() {
    MultipleNestings.$clinit();
    let instance = new MultipleNestings;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof MultipleNestings; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MultipleNestings);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!MultipleNestings.$classMultipleNestings) {
      MultipleNestings.$classMultipleNestings = Class.$createForClass(
          $Util.$generateId('MultipleNestings'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings'));
    }
    return MultipleNestings.$classMultipleNestings;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.MultipleNestings = MultipleNestings;



class MultipleNestings$Parent extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {MultipleNestings}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$Parent =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$Parent() {
  }

  /**
   * @return {void}
   * @public
   */
  m_fun() {}

  /**
   * A particular Java constructor as a factory method.
   * @param {MultipleNestings} $outer_this
   * @return {!MultipleNestings$Parent}
   * @public
   * @nocollapse
   */
  static $create($outer_this) {
    MultipleNestings$Parent.$clinit();
    let instance = new MultipleNestings$Parent;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$Parent(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {MultipleNestings} $outer_this
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$Parent(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$Parent =
        $outer_this;
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$Parent();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof MultipleNestings$Parent;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MultipleNestings$Parent);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!MultipleNestings$Parent.$classMultipleNestings$Parent) {
      MultipleNestings$Parent
          .$classMultipleNestings$Parent = Class.$createForClass(
          $Util.$generateId('Parent'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$Parent'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.Parent'));
    }
    return MultipleNestings$Parent.$classMultipleNestings$Parent;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.MultipleNestings$Parent = MultipleNestings$Parent;



class MultipleNestings$InnerClass1 extends MultipleNestings$Parent {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {MultipleNestings}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1 =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1() {
  }

  /**
   * @return {void}
   * @public
   */
  m_funInI1() {}

  /**
   * @return {MultipleNestings$InnerClass1$InnerClass2}
   * @public
   */
  m_$create_MultipleNestings$InnerClass1$InnerClass2() {
    return MultipleNestings$InnerClass1$InnerClass2.$create(this);
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {MultipleNestings} $outer_this
   * @return {!MultipleNestings$InnerClass1}
   * @public
   * @nocollapse
   */
  static $create($outer_this) {
    MultipleNestings$InnerClass1.$clinit();
    let instance = new MultipleNestings$InnerClass1;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {MultipleNestings} $outer_this
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1 =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$Parent(
        $outer_this);
    this.$init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof MultipleNestings$InnerClass1;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MultipleNestings$InnerClass1);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!MultipleNestings$InnerClass1.$classMultipleNestings$InnerClass1) {
      MultipleNestings$InnerClass1
          .$classMultipleNestings$InnerClass1 = Class.$createForClass(
          $Util.$generateId('InnerClass1'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1'),
          MultipleNestings$Parent.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.InnerClass1'));
    }
    return MultipleNestings$InnerClass1.$classMultipleNestings$InnerClass1;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { MultipleNestings$Parent.$clinit(); }
}
;



/**
 * Export class.
 */
exports.MultipleNestings$InnerClass1 = MultipleNestings$InnerClass1;



class MultipleNestings$InnerClass1$InnerClass2 extends MultipleNestings$Parent {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {MultipleNestings$InnerClass1}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2 =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2() {
  }

  /**
   * @return {void}
   * @public
   */
  m_funInI2() {}

  /**
   * @return {void}
   * @public
   */
  m_test() {
    this.m_fun();
    this.m_fun();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2
        .m_fun();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2
        .f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1
        .m_funInM();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2
        .f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1
        .m_funInM();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2
        .m_funInI1();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2
        .m_funInI1();
    this.m_funInI2();
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {MultipleNestings$InnerClass1} $outer_this
   * @return {!MultipleNestings$InnerClass1$InnerClass2}
   * @public
   * @nocollapse
   */
  static $create($outer_this) {
    MultipleNestings$InnerClass1$InnerClass2.$clinit();
    let instance = new MultipleNestings$InnerClass1$InnerClass2;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {MultipleNestings$InnerClass1} $outer_this
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2 =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$Parent(
        $outer_this
            .f_$outer_this__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1);
    this.$init__com_google_j2cl_transpiler_readable_innerclassinheritance_MultipleNestings$InnerClass1$InnerClass2();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof MultipleNestings$InnerClass1$InnerClass2;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor,
                               MultipleNestings$InnerClass1$InnerClass2);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!MultipleNestings$InnerClass1$InnerClass2
             .$classMultipleNestings$InnerClass1$InnerClass2) {
      MultipleNestings$InnerClass1$InnerClass2
          .$classMultipleNestings$InnerClass1$InnerClass2 = Class.$createForClass(
          $Util.$generateId('InnerClass2'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings$InnerClass1$InnerClass2'),
          MultipleNestings$Parent.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.innerclassinheritance.MultipleNestings.InnerClass1.InnerClass2'));
    }
    return MultipleNestings$InnerClass1$InnerClass2
        .$classMultipleNestings$InnerClass1$InnerClass2;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { MultipleNestings$Parent.$clinit(); }
}
;



/**
 * Export class.
 */
exports.MultipleNestings$InnerClass1$InnerClass2 =
    MultipleNestings$InnerClass1$InnerClass2;
