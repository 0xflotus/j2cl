/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsmethodoverride.Child.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jsmethodoverride.Child$impl');


const Parent = goog.require('com.google.j2cl.transpiler.readable.jsmethodoverride.Parent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class Child extends Parent {
  /**
   * Real constructor.
   * @public
   */
  constructor() {
    Child.$clinit();
    super();
    this.$ctor__com_google_j2cl_transpiler_readable_jsmethodoverride_Child__();
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsmethodoverride_Child__() {
    this.$ctor__com_google_j2cl_transpiler_readable_jsmethodoverride_Parent__();
    this.$init__com_google_j2cl_transpiler_readable_jsmethodoverride_Child();
  }

  /**
   * @override
   * @return {void}
   * @public
   */
  bar() {}

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Child;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Child);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Child.$clinit = function() {};
    Parent.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsmethodoverride_Child() {}
};

$Util.$setClassMetadata(
    Child,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsmethodoverride.Child'));



/**
 * Export class.
 */
exports = Child;
//# sourceMappingURL=Child.js.map