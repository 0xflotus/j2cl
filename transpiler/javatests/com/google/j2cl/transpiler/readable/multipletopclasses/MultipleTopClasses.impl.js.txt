/**
 * Impl transpiled from
 * com.google.j2cl.transpiler.readable.multipletopclasses.MultipleTopClasses.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.multipletopclasses.MultipleTopClasses$impl');


let AnotherClass = goog.require('gen.com.google.j2cl.transpiler.readable.multipletopclasses.AnotherClass$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');


class MultipleTopClasses extends AnotherClass {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_multipletopclasses_MultipleTopClasses() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!MultipleTopClasses}
   * @public
   * @nocollapse
   */
  static $create() {
    MultipleTopClasses.$clinit();
    let instance = new MultipleTopClasses;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_multipletopclasses_MultipleTopClasses();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_multipletopclasses_MultipleTopClasses() {
    this.$ctor__com_google_j2cl_transpiler_readable_multipletopclasses_AnotherClass();
    this.$init__com_google_j2cl_transpiler_readable_multipletopclasses_MultipleTopClasses();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof MultipleTopClasses;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MultipleTopClasses);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    MultipleTopClasses.$clinit();
    if (!MultipleTopClasses.$classMultipleTopClasses) {
      MultipleTopClasses.$classMultipleTopClasses = Class.$createForClass(
          $Util.$generateId('MultipleTopClasses'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.multipletopclasses.MultipleTopClasses'),
          AnotherClass.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.multipletopclasses.MultipleTopClasses'));
    }
    return MultipleTopClasses.$classMultipleTopClasses;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    AnotherClass.$clinit();
  }
}
;



/**
 * Export class.
 */
exports = MultipleTopClasses;
