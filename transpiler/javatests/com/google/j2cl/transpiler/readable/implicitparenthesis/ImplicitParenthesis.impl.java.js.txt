/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.implicitparenthesis.ImplicitParenthesis.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.implicitparenthesis.ImplicitParenthesis$impl');


let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');
let $Numbers = goog.forwardDeclare('vmbootstrap.Numbers$impl');


class ImplicitParenthesis extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!ImplicitParenthesis}
   * @public
   */
  static $create__() {
    ImplicitParenthesis.$clinit();
    let $instance = new ImplicitParenthesis();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    ImplicitParenthesis
        .m_examples___$p_com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis();
    ImplicitParenthesis
        .m_nonExamples___$p_com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis();
  }

  /**
   * @return {void}
   * @public
   */
  static m_examples___$p_com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis() {
    ImplicitParenthesis.$clinit();
    let primitiveInt;
    let boxedInt;
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt = (primitiveInt == 5 ? Integer.$create__int(15) :
                                          Integer.$create__int(30))
                         .m_intValue__();
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 15);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt = (boxedInt = Integer.m_valueOf__int(
                          boxedInt.m_intValue__() + primitiveInt))
                         .m_intValue__();
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 15);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt =
          (boxedInt = Integer.m_valueOf__int(primitiveInt)).m_intValue__();
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 5);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt =
          ($Numbers.$v = boxedInt,
           boxedInt = Integer.m_valueOf__int(boxedInt.m_intValue__() + 1),
           $Numbers.$v)
              .m_intValue__();
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 10);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt =
          (boxedInt = Integer.m_valueOf__int(boxedInt.m_intValue__() + 1))
              .m_intValue__();
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 11);
    }
  }

  /**
   * @return {void}
   * @public
   */
  static m_nonExamples___$p_com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis() {
    ImplicitParenthesis.$clinit();
    let primitiveInt;
    let boxedInt;
    let boxedBoolean;
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt = boxedInt.m_intValue__() - primitiveInt;
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 5);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      boxedBoolean = true;
      boxedBoolean = boxedInt.m_intValue__() == primitiveInt;
      $Asserts.$enabled() &&
          $Asserts.$assert(
              Boolean.m_booleanValue__java_lang_Boolean(boxedBoolean) == false);
    }
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof ImplicitParenthesis;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, ImplicitParenthesis);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
    $Numbers = goog.module.get('vmbootstrap.Numbers$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis() {
  }
};

$Util.$setClassMetadata(
    ImplicitParenthesis,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.implicitparenthesis.ImplicitParenthesis'));



/**
 * Export class.
 */
exports = ImplicitParenthesis;
//# sourceMappingURL=ImplicitParenthesis.js.map