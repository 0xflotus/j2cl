/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.implicitparenthesis.ImplicitParenthesis.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.implicitparenthesis.ImplicitParenthesis$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Boolean = goog.forwardDeclare('gen.java.lang.Boolean$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Integer = goog.forwardDeclare('gen.java.lang.Integer$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');
let $Numbers = goog.forwardDeclare('vmbootstrap.Numbers$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class ImplicitParenthesis extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!ImplicitParenthesis}
   * @public
   */
  static $create() {
    ImplicitParenthesis.$clinit();
    let $instance = new ImplicitParenthesis;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis();
  }

  /**
   * @return {void}
   * @public
   */
  m_test() {
    ImplicitParenthesis
        .m_examples_$p_com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis();
    ImplicitParenthesis
        .m_nonExamples_$p_com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis();
  }

  /**
   * @return {void}
   * @public
   */
  static m_examples_$p_com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis() {
    ImplicitParenthesis.$clinit();
    $Numbers.$clinit();
    let primitiveInt;
    let boxedInt;
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt = (primitiveInt == 5 ? Integer.$create__int(15) :
                                          Integer.$create__int(30))
                         .m_intValue();
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 15);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt = (boxedInt = Integer.m_valueOf__int(
                          boxedInt.m_intValue() + primitiveInt))
                         .m_intValue();
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 15);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt =
          (boxedInt = Integer.m_valueOf__int(primitiveInt)).m_intValue();
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 5);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt =
          ($Numbers.$v = boxedInt,
           boxedInt = Integer.m_valueOf__int(boxedInt.m_intValue() + 1),
           $Numbers.$v)
              .m_intValue();
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 10);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt =
          (boxedInt = Integer.m_valueOf__int(boxedInt.m_intValue() + 1))
              .m_intValue();
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 11);
    }
  }

  /**
   * @return {void}
   * @public
   */
  static m_nonExamples_$p_com_google_j2cl_transpiler_readable_implicitparenthesis_ImplicitParenthesis() {
    ImplicitParenthesis.$clinit();
    let primitiveInt;
    let boxedInt;
    let boxedBoolean;
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      primitiveInt = boxedInt.m_intValue() - primitiveInt;
      $Asserts.$enabled() && $Asserts.$assert(primitiveInt == 5);
    }
    {
      primitiveInt = 5;
      boxedInt = Integer.$create__int(10);
      boxedBoolean = true;
      boxedBoolean = boxedInt.m_intValue() == primitiveInt;
      $Asserts.$enabled() &&
          $Asserts.$assert(
              Boolean.m_booleanValue__java_lang_Boolean(boxedBoolean) == false);
    }
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof ImplicitParenthesis;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, ImplicitParenthesis);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    ImplicitParenthesis.$clinit();
    if (!ImplicitParenthesis.$classImplicitParenthesis_) {
      ImplicitParenthesis.$classImplicitParenthesis_ = Class.$createForClass(
          $Util.$generateId('ImplicitParenthesis'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.implicitparenthesis.ImplicitParenthesis'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.implicitparenthesis.ImplicitParenthesis'));
    }
    return ImplicitParenthesis.$classImplicitParenthesis_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return ImplicitParenthesis.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Boolean = goog.module.get('gen.java.lang.Boolean$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    Integer = goog.module.get('gen.java.lang.Integer$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
    $Numbers = goog.module.get('vmbootstrap.Numbers$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
ImplicitParenthesis.$classImplicitParenthesis_ = null;



/**
 * Export class.
 */
exports = ImplicitParenthesis;
