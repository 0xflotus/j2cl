/**
 * Impl transpiled from
 * com.google.j2cl.transpiler.readable.ifstatement.IfStatement.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.ifstatement.IfStatement$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class IfStatement extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_ifstatement_IfStatement() {}

  /**
   * A particular Java constructor as a factory method.
   * @return {!IfStatement}
   * @public
   * @nocollapse
   */
  static $create() {
    IfStatement.$clinit();
    let instance = new IfStatement;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_ifstatement_IfStatement();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_ifstatement_IfStatement() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_ifstatement_IfStatement();
  }

  /**
   * @return {void}
   * @public
   */
  m_test() {
    let a = true;
    let b = true;
    let number = 1;
    if (a) {
      number = 2;
    } else if (b) {
      number = 3;
    } else {
      number = 4;
    }
    if (a) {
      number = 5;
    } else {
      number = 6;
    }
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof IfStatement; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, IfStatement);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    IfStatement.$clinit();
    if (!IfStatement.$classIfStatement_) {
      IfStatement.$classIfStatement_ = Class.$createForClass(
          $Util.$generateId('IfStatement'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.ifstatement.IfStatement'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.ifstatement.IfStatement'));
    }
    return IfStatement.$classIfStatement_;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
IfStatement.$classIfStatement_ = null;



/**
 * Export class.
 */
exports = IfStatement;
