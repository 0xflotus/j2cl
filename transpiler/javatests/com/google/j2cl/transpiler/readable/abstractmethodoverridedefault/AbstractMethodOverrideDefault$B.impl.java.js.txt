/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault$B.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.B$impl');


let AbstractMethodOverrideDefault$A = goog.require('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.A$impl');
let AbstractMethodOverrideDefault$J = goog.require('com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault.J$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');


/**
 * Abstract class, do not instantiate.
 * @implements {AbstractMethodOverrideDefault$J}
 */
class AbstractMethodOverrideDefault$B extends AbstractMethodOverrideDefault$A {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!AbstractMethodOverrideDefault$B}
   * @public
   */
  static $create__() {
    AbstractMethodOverrideDefault$B.$clinit();
    let $instance = new AbstractMethodOverrideDefault$B();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault$B__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault$B__() {
    this.$ctor__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault$A__();
    this.$init__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault$B();
  }

  /**
   * @override
   * @return {void}
   * @public
   */
  m_bar__() { this.m_bar__(); }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AbstractMethodOverrideDefault$B;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(
        classConstructor, AbstractMethodOverrideDefault$B);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('java.lang.Class$impl');
    AbstractMethodOverrideDefault$A.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_abstractmethodoverridedefault_AbstractMethodOverrideDefault$B() {
  }
};

$Util.$setClassMetadata(
    AbstractMethodOverrideDefault$B,
    'com.google.j2cl.transpiler.readable.abstractmethodoverridedefault.AbstractMethodOverrideDefault$B');


AbstractMethodOverrideDefault$J.$markImplementor(
    AbstractMethodOverrideDefault$B);


/**
 * Export class.
 */
exports = AbstractMethodOverrideDefault$B;
//# sourceMappingURL=AbstractMethodOverrideDefault$B.js.map