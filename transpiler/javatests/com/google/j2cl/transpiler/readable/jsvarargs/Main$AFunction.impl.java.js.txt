/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsvarargs.Main$AFunction.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jsvarargs.Main.AFunction$impl');


const com_google_j2cl_transpiler_readable_jsvarargs_Main_Function = goog.require('com.google.j2cl.transpiler.readable.jsvarargs.Main.Function$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @implements {com_google_j2cl_transpiler_readable_jsvarargs_Main_Function}
 */
class AFunction extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'AFunction()'.
   * @return {function(number, ...*):*}
   * @public
   */
  static $create__() {
    AFunction.$clinit();
    let $instance = new AFunction();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main_AFunction__();
    return $Util.$makeLambdaFunction(
        $Util.$getPrototype(AFunction).m_f1__int__arrayOf_java_lang_Object,
        $instance, AFunction.$copy);
  }

  /**
   * Initialization from constructor 'AFunction()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main_AFunction__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jsvarargs_Main_AFunction();
  }

  /**
   * @override
   * @this {?function(number, ...*):*}
   * @param {number} i
   * @param {...*} args
   * @return {*}
   * @public
   */
  m_f1__int__arrayOf_java_lang_Object(i, ...args) {
    return args[i];
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        instance
            .$is__com_google_j2cl_transpiler_readable_jsvarargs_Main_AFunction;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AFunction);
  }

  /**
   * Copies the fields from {@code from} to {@code to}.
   * @param {AFunction} from
   * @param {*} to
   * @public
   */
  static $copy(from, to) {
    // Marks the object is an instance of this class.
    to.$is__com_google_j2cl_transpiler_readable_jsvarargs_Main_AFunction = true;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    AFunction.$clinit = function() {};
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsvarargs_Main_AFunction() {}
};

$Util.$setClassMetadata(
    AFunction,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsvarargs.Main$AFunction'));


com_google_j2cl_transpiler_readable_jsvarargs_Main_Function.$markImplementor(
    AFunction);


/**
 * Export class.
 */
exports = AFunction;
//# sourceMappingURL=Main$AFunction.js.map