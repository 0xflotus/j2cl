/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsvarargs.Main$SubMain.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.jsvarargs.Main.SubMain$impl');


let Main = goog.require('com.google.j2cl.transpiler.readable.jsvarargs.Main$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Main$SubMain extends Main {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Main$SubMain}
   * @public
   */
  static $create__() {
    Main$SubMain.$clinit();
    let $instance = new Main$SubMain();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main$SubMain__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main$SubMain__() {
    this.$ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main__int(10);
    this.$init__com_google_j2cl_transpiler_readable_jsvarargs_Main$SubMain();
  }

  /**
   * @override
   * @param {number} m
   * @param {...number} numbers
   * @return {number}
   * @public
   */
  f3(m, numbers) {
    let $var_args_copy = /**@type {!Array<number>} */ (
        $Arrays.$create([arguments.length - 1], $int));
    for (let $i = 0; $i < arguments.length - 1; $i++) {
      $Arrays.$set($var_args_copy, $i, arguments[$i + 1]);
    }
    let a = super.f3(1, 1, 2);
    a += super.f3(1);
    a += super.f3(1, 1, 2);
    a += super.f3(1);
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    a += super.f3(1, ...$Arrays.$checkNotNull(ints));
    return a;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof Main$SubMain; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main$SubMain);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Main.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsvarargs_Main$SubMain() {}
};

$Util.$setClassMetadata(
    Main$SubMain, 'com.google.j2cl.transpiler.readable.jsvarargs.Main$SubMain');



/**
 * Export class.
 */
exports = Main$SubMain;
//# sourceMappingURL=Main$SubMain.js.map