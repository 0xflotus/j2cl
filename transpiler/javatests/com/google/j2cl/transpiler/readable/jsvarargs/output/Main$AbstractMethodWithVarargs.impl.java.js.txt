/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsvarargs.Main$AbstractMethodWithVarargs.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.jsvarargs.Main.AbstractMethodWithVarargs$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @abstract
 */
class AbstractMethodWithVarargs extends java_lang_Object {
  /**
   * JsConstructor 'AbstractMethodWithVarargs()'.
   * @public
   */
  constructor() {
    AbstractMethodWithVarargs.$clinit();
    super();
    this.$ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main_AbstractMethodWithVarargs__();
  }

  /**
   * Initialization from constructor 'AbstractMethodWithVarargs()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main_AbstractMethodWithVarargs__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @abstract
   * @param {...number} args
   * @return {void}
   * @public
   */
  abstractMethod(...args) {
    $Arrays.$stampType(args, $int, 1);
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AbstractMethodWithVarargs;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AbstractMethodWithVarargs);
  }

  /**
   * @public
   */
  static $clinit() {
    AbstractMethodWithVarargs.$clinit = function() {};
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    AbstractMethodWithVarargs,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsvarargs.Main$AbstractMethodWithVarargs'));



exports = AbstractMethodWithVarargs;
//# sourceMappingURL=Main$AbstractMethodWithVarargs.js.map