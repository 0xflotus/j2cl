/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsvarargs.Main.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.jsvarargs.Main$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Main$AFunction = goog.forwardDeclare('gen.com.google.j2cl.transpiler.readable.jsvarargs.Main$AFunction$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Integer = goog.forwardDeclare('gen.java.lang.Integer$impl');
let List = goog.forwardDeclare('gen.java.util.List$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');
let $void = goog.forwardDeclare('vmbootstrap.primitives.$void$impl');


class Main extends Object {
  /**
   * Defines instance fields.
   */
  constructor() {
    super();
    /**
     * @public {number}
     */
    this.f_field__com_google_j2cl_transpiler_readable_jsvarargs_Main = 0;
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {number} f
   * @return {!Main}
   * @public
   */
  static $create__int(f) {
    Main.$clinit();
    let $instance = new Main;
    $instance.$ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main__int(f);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {number} f
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_jsvarargs_Main__int(f) {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_jsvarargs_Main();
    this.f_field__com_google_j2cl_transpiler_readable_jsvarargs_Main = f;
  }

  /**
   * @param {number} multiplier
   * @param {...number} numbers
   * @return {number}
   * @public
   */
  static f1(multiplier, numbers) {
    Main.$clinit();
    let $var_args_copy = /**@type {!Array<number>} */ (
        $Arrays.$create([arguments.length - 1], $int));
    for (let $i = 0; $i < arguments.length - 1; $i++)
      $Arrays.$set($var_args_copy, $i, arguments[$i + 1]);
    return $var_args_copy.length + $var_args_copy[0] + multiplier;
  }

  /**
   * @param {...number} numbers
   * @return {number}
   * @public
   */
  static f2(numbers) {
    Main.$clinit();
    let $var_args_copy = /**@type {!Array<number>} */ (
        $Arrays.$create([arguments.length], $int));
    for (let $i = 0; $i < arguments.length; $i++)
      $Arrays.$set($var_args_copy, $i, arguments[$i]);
    return $var_args_copy.length + $var_args_copy[0];
  }

  /**
   * @param {number} m
   * @param {...number} numbers
   * @return {number}
   * @public
   */
  f3(m, numbers) {
    let $var_args_copy = /**@type {!Array<number>} */ (
        $Arrays.$create([arguments.length - 1], $int));
    for (let $i = 0; $i < arguments.length - 1; $i++)
      $Arrays.$set($var_args_copy, $i, arguments[$i + 1]);
    return this.f_field__com_google_j2cl_transpiler_readable_jsvarargs_Main +
        m + $var_args_copy[1];
  }

  /**
   * @param {...number} numbers
   * @return {number}
   * @public
   */
  f4(numbers) {
    let $var_args_copy = /**@type {!Array<number>} */ (
        $Arrays.$create([arguments.length], $int));
    for (let $i = 0; $i < arguments.length; $i++)
      $Arrays.$set($var_args_copy, $i, arguments[$i]);
    return this.f_field__com_google_j2cl_transpiler_readable_jsvarargs_Main +
        $var_args_copy[1];
  }

  /**
   * @template M_T
   * @param {...M_T} elements
   * @return {M_T}
   * @public
   */
  static generics(elements) {
    Main.$clinit();
    let $var_args_copy =
        /**@type {!Array<*>} */ ($Arrays.$create([arguments.length], Object));
    for (let $i = 0; $i < arguments.length; $i++)
      $Arrays.$set($var_args_copy, $i, arguments[$i]);
    return $var_args_copy[0];
  }

  /**
   * @param {...List<Main>} elements
   * @return {Main}
   * @public
   */
  static parameterizedType(elements) {
    Main.$clinit();
    let $var_args_copy = /**@type {!Array<List<Main>>} */ (
        $Arrays.$create([arguments.length], List));
    for (let $i = 0; $i < arguments.length; $i++)
      $Arrays.$set($var_args_copy, $i, arguments[$i]);
    return $var_args_copy[0].m_get__int(0);
  }

  /**
   * @return {void}
   * @public
   */
  m_testStaticMethodNotFirst() {
    Main.f1(1, 1, 2);
    Main.f1(1, 1, 2);
    Main.f1(1);
    Main.f1(1);
    Main.f1(1, 1, 2);
    Main.f1(1, 1, 2);
    Main.f1(1);
    Main.f1(1);
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    Main.f1(1, ...ints);
    Main.f1(1, ...ints);
  }

  /**
   * @return {void}
   * @public
   */
  m_testStaticMethodFirst() {
    Main.f2(1, 2);
    Main.generics(Integer.m_valueOf__int(1), Integer.m_valueOf__int(2));
    Main.f2(1, 2);
    Main.generics(Integer.m_valueOf__int(1), Integer.m_valueOf__int(2));
    Main.f2();
    Main.generics();
    Main.f2();
    Main.generics();
    Main.generics();
    Main.f2(1, 2);
    Main.f2(1, 2);
    Main.generics(/**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int)));
    Main.generics(Integer.m_valueOf__int(1), Integer.m_valueOf__int(2));
    Main.f2();
    Main.f2();
    Main.generics(/**@type {!Array<number>} */ ($Arrays.$init([], $int)));
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    let integers = /**@type {!Array<Integer>} */ ($Arrays.$init(
        [Integer.m_valueOf__int(1), Integer.m_valueOf__int(2)], Integer));
    Main.f2(...ints);
    Main.f2(...ints);
    Main.generics(...integers);
  }

  /**
   * @return {void}
   * @public
   */
  m_testInstanceMethodNotFirst() {
    let m = Main.$create__int(1);
    m.f3(1, 1, 2);
    m.f3(1);
    m.f3(1, 1, 2);
    m.f3(1);
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    m.f3(1, ...ints);
  }

  /**
   * @return {void}
   * @public
   */
  m_testInstanceMethodFirst() {
    let m = Main.$create__int(1);
    m.f4(1, 2);
    m.f4();
    m.f4(1, 2);
    m.f4();
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    m.f4(...ints);
  }

  /**
   * @return {void}
   * @public
   */
  m_testJsFunction() {
    let a = /**@type {function(number, ...*):*} */ ($Util.$makeLambdaFunction(
        Main$AFunction.prototype.m_f1__int__arrayOf_java_lang_Object,
        Main$AFunction.$create(), Main$AFunction.$copy));
    let o1 = Object.$create();
    let o2 = Object.$create();
    a(0, o1, o2);
    a(0);
    a(0, o1, o2);
    a(0);
    let os = [o1, o2];
    a(0, ...os);
  }

  /**
   * @return {void}
   * @public
   */
  m_testSideEffect() {
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([1, 2], $int));
    Main.$create__int(1).f3(1, ...ints);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof Main; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    Main.$clinit();
    if (!Main.$classMain_) {
      Main.$classMain_ = Class.$createForClass(
          $Util.$generateId('Main'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsvarargs.Main'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsvarargs.Main'));
    }
    return Main.$classMain_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return Main.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Main$AFunction = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jsvarargs.Main$AFunction$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    Integer = goog.module.get('gen.java.lang.Integer$impl');
    List = goog.module.get('gen.java.util.List$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    $void = goog.module.get('vmbootstrap.primitives.$void$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsvarargs_Main() {}
};


/**
 * The class literal field.
 * @private {Class}
 */
Main.$classMain_ = null;



/**
 * Export class.
 */
exports = Main;
//# sourceMappingURL=Main.js.map