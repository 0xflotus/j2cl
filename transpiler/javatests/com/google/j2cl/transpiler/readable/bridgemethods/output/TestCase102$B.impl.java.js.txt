/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethods.TestCase102$B.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgemethods.TestCase102.B$impl');


const BI1 = goog.require('com.google.j2cl.transpiler.readable.bridgemethods.TestCase102.BI1$impl');
const BI2 = goog.require('com.google.j2cl.transpiler.readable.bridgemethods.TestCase102.BI2$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @abstract
 * @template C_B_B1
 * @implements {BI1}
 * @implements {BI2}
 */
class B extends j_l_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Initialization from constructor 'B()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethods_TestCase102_B__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @abstract
   * @param {C_B_B1} value
   * @return {?string}
   * @public
   */
  m_get__java_lang_Object(value) {}

  /**
   * @abstract
   * @override
   * @param {?string} arg0
   * @return {?string}
   * @public
   */
  m_get__java_lang_String(arg0) {}

  /**
   * @abstract
   * @override
   * @param {?string} arg0
   * @return {?string}
   * @public
   */
  get(arg0) {}

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof B;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, B);
  }

  /**
   * @public
   */
  static $clinit() {
    B.$clinit = function() {};
    j_l_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    B,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgemethods.TestCase102$B'));


BI1.$markImplementor(B);
BI2.$markImplementor(B);


exports = B;
//# sourceMappingURL=TestCase102$B.js.map