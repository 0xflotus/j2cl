/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let EqualFunction = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunction$impl');
let Foo = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions.Foo$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');


class EqualFunctions extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!EqualFunctions}
   * @public
   */
  static $create__() {
    EqualFunctions.$clinit();
    let $instance = new EqualFunctions();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions();
  }

  /**
   * @template M_T
   * @return {?function(M_T, M_T):boolean}
   * @public
   */
  static m_objectEqualFunction__() {
    EqualFunctions.$clinit();
    return /**@type {Function} */ ($Casts.to(
        EqualFunctions
            .$f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions,
        EqualFunction));
  }

  /**
   * @template M_T
   * @return {?function(M_T, M_T):boolean}
   * @public
   */
  static m_collectionEqualFunction__() {
    EqualFunctions.$clinit();
    return /**@type {Function} */ ($Casts.to(
        EqualFunctions
            .$f_forCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions,
        EqualFunction));
  }

  /**
   * @template M_T
   * @param {?function(M_T, M_T):boolean} customFunction
   * @return {?function(M_T, M_T):boolean}
   * @public
   */
  static m_withCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunction(
      customFunction) {
    EqualFunctions.$clinit();
    return ((/** * */ objA, /** * */ objB) => {
      return true;
    });
  }

  /**
   * @template M_T
   * @param {?function(M_T, M_T):boolean} equalFn
   * @return {?function(Foo<M_T>, Foo<M_T>):boolean}
   * @public
   */
  static m_createEqualFn__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunction(
      equalFn) {
    EqualFunctions.$clinit();
    return ((/** Foo */ first, /** Foo */ second) => {
      return $Equality.$same(first, second);
    });
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof EqualFunctions;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, EqualFunctions);
  }

  /**
   * A static field getter.
   * @return {?function(*, *):boolean}
   * @public
   */
  static get
  f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions() {
    return (
        EqualFunctions.$clinit(),
        EqualFunctions
            .$f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions);
  }

  /**
   * A static field setter.
   * @param {?function(*, *):boolean} value
   * @return {void}
   * @public
   */
  static set
  f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions(
      value) {
    (EqualFunctions.$clinit(),
     EqualFunctions
         .$f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions =
         value);
  }

  /**
   * A static field getter.
   * @return {?function(Integer, Integer):boolean}
   * @public
   */
  static get
  f_forInteger__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions() {
    return (
        EqualFunctions.$clinit(),
        EqualFunctions
            .$f_forInteger__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions);
  }

  /**
   * A static field setter.
   * @param {?function(Integer, Integer):boolean} value
   * @return {void}
   * @public
   */
  static set
  f_forInteger__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions(
      value) {
    (EqualFunctions.$clinit(),
     EqualFunctions
         .$f_forInteger__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions =
         value);
  }

  /**
   * A static field getter.
   * @return {?function(*, *):boolean}
   * @public
   */
  static get
  f_forCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions() {
    return (
        EqualFunctions.$clinit(),
        EqualFunctions
            .$f_forCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions);
  }

  /**
   * A static field setter.
   * @param {?function(*, *):boolean} value
   * @return {void}
   * @public
   */
  static set
  f_forCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions(
      value) {
    (EqualFunctions.$clinit(),
     EqualFunctions
         .$f_forCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions =
         value);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    EqualFunctions.$clinit = function() {};
    EqualFunction = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunction$impl');
    Foo = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions.Foo$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    java_lang_Object.$clinit();
    EqualFunctions
        .$f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions =
        ((/** * */ first, /** * */ second) => {
          return $Equality.$same(first, second);
        });
    EqualFunctions
        .$f_forInteger__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions =
        EqualFunctions.m_objectEqualFunction__();
    EqualFunctions
        .$f_forCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions =
        EqualFunctions
            .m_withCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunction(
                EqualFunctions
                    .$f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions);
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions() {}
};

$Util.$setClassMetadata(
    EqualFunctions,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions'));


/**
 * @private {?function(*, *):boolean}
 */
EqualFunctions
    .$f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions =
    null;


/**
 * @private {?function(Integer, Integer):boolean}
 */
EqualFunctions
    .$f_forInteger__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions =
    null;


/**
 * @private {?function(*, *):boolean}
 */
EqualFunctions
    .$f_forCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions =
    null;



/**
 * Export class.
 */
exports = EqualFunctions;
//# sourceMappingURL=EqualFunctions.js.map