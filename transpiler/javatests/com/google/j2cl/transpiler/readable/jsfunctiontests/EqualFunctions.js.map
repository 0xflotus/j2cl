[UNKNOWN] => [super();]
[UNKNOWN] => [EqualFunctions.$clinit();]
[UNKNOWN] => [let $instance = new EqualFunctions();]
[UNKNOWN] => [$instance.$ctor__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions__();]
[UNKNOWN] => [return $instance;]
[UNKNOWN] => [this.$ctor__java_lang_Object__();]
[UNKNOWN] => [this.$init__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions();]
[UNKNOWN] => [EqualFunctions.$clinit();]
[return (EqualFunction<T>) forObject;] => [return /**@type {Function} */ ($Casts.to(EqualFunctions.$f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions, EqualFunction));]
[UNKNOWN] => [EqualFunctions.$clinit();]
[return (EqualFunction<T>) forCollection;] => [return /**@type {Function} */ ($Casts.to(EqualFunctions.$f_forCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions, EqualFunction));]
[customFunction] => [customFunction] "customFunction"
[UNKNOWN] => [EqualFunctions.$clinit();]
[return new EqualFunction<T>() {
      @Override
      public boolean equal(T objA, T objB) {
        return true;
      }
    };] => [return ((objA, objB) =>{
      return true;
    });]
[objA] => [objA] "objA"
[objB] => [objB] "objB"
[return true;] => [return true;]
[equalFn] => [equalFn] "equalFn"
[UNKNOWN] => [EqualFunctions.$clinit();]
[return new EqualFunction<Foo<T>>() {
      @Override
      public boolean equal(Foo<T> first, Foo<T> second) {
        return first == second;
      }
    };] => [return ((first, second) =>{
      return $Equality.$same(first, second);
    });]
[first] => [first] "first"
[second] => [second] "second"
[return first == second;] => [return $Equality.$same(first, second);]
[UNKNOWN] => [java_lang_Object.$clinit();]
[public static EqualFunction<Object> forObject =
      new EqualFunction<Object>() {
        @Override
        public boolean equal(Object first, Object second) {
          return first == second;
        }
      };] => [EqualFunctions.$f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions = ((first, second) =>{
      return $Equality.$same(first, second);
    });]
[first] => [first] "first"
[second] => [second] "second"
[return first == second;] => [return $Equality.$same(first, second);]
[public static final EqualFunction<Integer> forInteger = objectEqualFunction();] => [EqualFunctions.$f_forInteger__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions = EqualFunctions.m_objectEqualFunction__();]
[/**
   * Equal function handling array equal logic in addition to object equal.
   */
  public static EqualFunction<Object> forCollection = withCollection(forObject);] => [EqualFunctions.$f_forCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions = EqualFunctions.m_withCollection__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunction(EqualFunctions.$f_forObject__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions);]
