/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions$2.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions$2$impl');


let EqualFunction = goog.require('gen.com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunction$impl');
let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let EqualFunctions = goog.forwardDeclare('gen.com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');


/**
 * @template M_T
 * @implements {EqualFunction<M_T>}
 */
class EqualFunctions$2 extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @template M_T
   * @return {!EqualFunctions$2<M_T>}
   * @public
   */
  static $create() {
    EqualFunctions$2.$clinit();
    let $instance = new EqualFunctions$2;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$2();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$2() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$2();
  }

  /**
   * @override
   * @this {?function(M_T, M_T):boolean}
   * @param {M_T} objA
   * @param {M_T} objB
   * @return {boolean}
   * @public
   */
  m_equal__java_lang_Object__java_lang_Object(objA, objB) { return true; }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        instance
            .$is__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$2;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, EqualFunctions$2);
  }

  /**
   * Copies the fields from {@code from} to {@code to}.
   * @param {EqualFunctions$2} from
   * @param {*} to
   * @public
   */
  static $copy(from, to) {
    // Marks the object is an instance of this class.
    to.$is__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$2 =
        true;
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    EqualFunctions$2.$clinit();
    if (!EqualFunctions$2.$classEqualFunctions$2_) {
      EqualFunctions$2.$classEqualFunctions$2_ = Class.$createForClass(
          $Util.$generateId('2'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions$2'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions.2'));
    }
    return EqualFunctions$2.$classEqualFunctions$2_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return EqualFunctions$2.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    EqualFunctions = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$2() {
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
EqualFunctions$2.$classEqualFunctions$2_ = null;


EqualFunction.$markImplementor(EqualFunctions$2);


/**
 * Export class.
 */
exports = EqualFunctions$2;
//# sourceMappingURL=EqualFunctions$2.js.map