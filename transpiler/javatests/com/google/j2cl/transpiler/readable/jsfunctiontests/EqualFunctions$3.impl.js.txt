/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions$3.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions.$Anonymous3$impl');


let EqualFunction = goog.require('com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunction$impl');
let Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let EqualFunctions$Foo = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions.Foo$impl');
let Class = goog.forwardDeclare('java.lang.Class$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');

/** @constructor */ let $NativeFunction = window.Function;


/**
 * @template M_T
 * @implements {EqualFunction<EqualFunctions$Foo<M_T>>}
 */
class EqualFunctions$3 extends Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @template M_T
   * @return {function(EqualFunctions$Foo<M_T>, EqualFunctions$Foo<M_T>):boolean}
   * @public
   */
  static $create() {
    EqualFunctions$3.$clinit();
    let $instance = new EqualFunctions$3();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$3();
    return $Util.$makeLambdaFunction(
        $Util.$getPrototype(EqualFunctions$3)
            .m_equal__java_lang_Object__java_lang_Object,
        $instance, EqualFunctions$3.$copy);
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$3() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$3();
  }

  /**
   * @param {EqualFunctions$Foo<M_T>} first
   * @param {EqualFunctions$Foo<M_T>} second
   * @return {boolean}
   * @public
   */
  m_equal__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$Foo__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$Foo(
      first, second) {}

  /**
   * Bridge method.
   * @override
   * @this {?function(EqualFunctions$Foo<M_T>, EqualFunctions$Foo<M_T>):boolean}
   * @param {EqualFunctions$Foo<M_T>} arg0
   * @param {EqualFunctions$Foo<M_T>} arg1
   * @return {boolean}
   * @public
   */
  m_equal__java_lang_Object__java_lang_Object(arg0, arg1) {
    return EqualFunctions$3
        .m_equal__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$3__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$Foo__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$Foo(
            this, /**@type {EqualFunctions$Foo<*>} */ (
                $Casts.to(arg0, EqualFunctions$Foo)),
            /**@type {EqualFunctions$Foo<*>} */ (
                $Casts.to(arg1, EqualFunctions$Foo)));
  }

  /**
   * @template M_T
   * @param {?function(EqualFunctions$Foo<M_T>, EqualFunctions$Foo<M_T>):boolean} $thisArg
   * @param {EqualFunctions$Foo<M_T>} first
   * @param {EqualFunctions$Foo<M_T>} second
   * @return {boolean}
   * @public
   */
  static m_equal__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$3__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$Foo__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$Foo(
      $thisArg, first, second) {
    EqualFunctions$3.$clinit();
    return $Equality.$same(first, second);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        instance
            .$is__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$3;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, EqualFunctions$3);
  }

  /**
   * Copies the fields from {@code from} to {@code to}.
   * @param {EqualFunctions$3} from
   * @param {*} to
   * @public
   */
  static $copy(from, to) {
    // Marks the object is an instance of this class.
    to.$is__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$3 =
        true;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    EqualFunctions$Foo = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions.Foo$impl');
    Class = goog.module.get('java.lang.Class$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunctiontests_EqualFunctions$3() {
  }
};

$Util.$setClassMetadata(
    EqualFunctions$3,
    'com.google.j2cl.transpiler.readable.jsfunctiontests.EqualFunctions$3');


EqualFunction.$markImplementor(EqualFunctions$3);


/**
 * Export class.
 */
exports = EqualFunctions$3;
//# sourceMappingURL=EqualFunctions$3.js.map