/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.localclasswithoutergenerics.LocalClassWithOuterGenerics$1Baz.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.localclasswithoutergenerics.LocalClassWithOuterGenerics.$1Baz$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template C_1Baz_S, M_T
 */
class $1Baz extends j_l_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'Baz()'.
   * @template C_1Baz_S, M_T
   * @return {!$1Baz<C_1Baz_S, M_T>}
   * @public
   */
  static $create__() {
    $1Baz.$clinit();
    let $instance = new $1Baz();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_localclasswithoutergenerics_LocalClassWithOuterGenerics_1Baz__();
    return $instance;
  }

  /**
   * Initialization from constructor 'Baz()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_localclasswithoutergenerics_LocalClassWithOuterGenerics_1Baz__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {$1Baz<C_1Baz_S, M_T>} foo
   * @param {$1Baz<M_T, M_T>} bar
   * @param {$1Baz<?string, M_T>} baz
   * @return {void}
   * @public
   */
  m_qux__com_google_j2cl_transpiler_readable_localclasswithoutergenerics_LocalClassWithOuterGenerics_1Baz__com_google_j2cl_transpiler_readable_localclasswithoutergenerics_LocalClassWithOuterGenerics_1Baz__com_google_j2cl_transpiler_readable_localclasswithoutergenerics_LocalClassWithOuterGenerics_1Baz_$pp_com_google_j2cl_transpiler_readable_localclasswithoutergenerics(
      foo, bar, baz) {}

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $1Baz;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $1Baz);
  }

  /**
   * @public
   */
  static $clinit() {
    $1Baz.$clinit = function() {};
    j_l_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    $1Baz,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.localclasswithoutergenerics.LocalClassWithOuterGenerics$1Baz'));



exports = $1Baz;
//# sourceMappingURL=LocalClassWithOuterGenerics$1Baz.js.map