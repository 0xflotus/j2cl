/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType_NativeJsType_$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType.NativeJsType.$Overlay$impl');
let com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType_NativeObject_$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType.NativeObject.$Overlay$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let NativeJsType = goog.forwardDeclare('test.foo.NativeJsType');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


class CastToNativeType extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'CastToNativeType()'.
   * @return {!CastToNativeType}
   * @public
   */
  static $create__() {
    CastToNativeType.$clinit();
    let $instance = new CastToNativeType();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType__();
    return $instance;
  }

  /**
   * Initialization from constructor 'CastToNativeType()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let a = new NativeJsType();
    let b = /**@type {NativeJsType} */ ($Casts.$to(
        a,
        com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType_NativeJsType_$Overlay));
    let c =
        com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType_NativeJsType_$Overlay
            .$isInstance(a);
    let d = /**@type {Array<NativeJsType>} */ ($Arrays.$castToNative(a));
    c = $Arrays.$instanceIsOfNative(a);
    let e = /**@type {Object} */ ($Casts.$to(
        a,
        com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType_NativeObject_$Overlay));
    let f = /**@type {Object<?string, *>} */ ($Casts.$to(
        a,
        com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType_NativeObject_$Overlay));
    c = com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType_NativeObject_$Overlay
            .$isInstance(a);
    let g = /**@type {Array<Object>} */ ($Arrays.$castToNative(a));
    let h = /**@type {Array<Object<?string, *>>} */ ($Arrays.$castToNative(a));
    c = $Arrays.$instanceIsOfNative(a);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof CastToNativeType;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, CastToNativeType);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    CastToNativeType.$clinit = function() {};
    com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType_NativeJsType_$Overlay =
        goog.module.get(
            'com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType.NativeJsType.$Overlay$impl');
    com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType_NativeObject_$Overlay =
        goog.module.get(
            'com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType.NativeObject.$Overlay$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    NativeJsType = goog.module.get('test.foo.NativeJsType');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType() {
  }
};

$Util.$setClassMetadata(
    CastToNativeType,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType'));



/**
 * Export class.
 */
exports = CastToNativeType;
//# sourceMappingURL=CastToNativeType.js.map