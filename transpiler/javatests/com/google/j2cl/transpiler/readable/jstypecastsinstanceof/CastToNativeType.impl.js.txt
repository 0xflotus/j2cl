/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let CastToNativeType$NativeJsType$Overlay = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType$NativeJsType$Overlay$impl');
let CastToNativeType$NativeObject$Overlay = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType$NativeObject$Overlay$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let String = goog.forwardDeclare('gen.java.lang.String$impl');
let CastToNativeType$NativeJsType =
    goog.forwardDeclare('test.foo.NativeJsType');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');

let $CastToNativeType$NativeObject = window.Object;


class CastToNativeType extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!CastToNativeType}
   * @public
   */
  static $create() {
    CastToNativeType.$clinit();
    let $instance = new CastToNativeType;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType();
  }

  /**
   * @return {void}
   * @public
   */
  m_test() {
    let a = new CastToNativeType$NativeJsType();
    let b = /**@type {CastToNativeType$NativeJsType} */ (
        $Casts.to(a, CastToNativeType$NativeJsType$Overlay));
    let c = CastToNativeType$NativeJsType$Overlay.$isInstance(a);
    let d = /**@type {Array<CastToNativeType$NativeJsType>} */ (
        $Arrays.$castToNative(a));
    c = $Arrays.$instanceIsOfNative(a);
    let e = /**@type {$CastToNativeType$NativeObject} */ (
        $Casts.to(a, CastToNativeType$NativeObject$Overlay));
    let f = /**@type {$CastToNativeType$NativeObject<?string, *>} */ (
        $Casts.to(a, CastToNativeType$NativeObject$Overlay));
    c = CastToNativeType$NativeObject$Overlay.$isInstance(a);
    let g = /**@type {Array<$CastToNativeType$NativeObject>} */ (
        $Arrays.$castToNative(a));
    let h = /**@type {Array<$CastToNativeType$NativeObject<?string, *>>} */ (
        $Arrays.$castToNative(a));
    c = $Arrays.$instanceIsOfNative(a);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof CastToNativeType; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, CastToNativeType);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    CastToNativeType.$clinit();
    if (!CastToNativeType.$classCastToNativeType_) {
      CastToNativeType.$classCastToNativeType_ = Class.$createForClass(
          $Util.$generateId('CastToNativeType'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType'));
    }
    return CastToNativeType.$classCastToNativeType_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return CastToNativeType.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    CastToNativeType$NativeJsType$Overlay = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType$NativeJsType$Overlay$impl');
    CastToNativeType$NativeObject$Overlay = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jstypecastsinstanceof.CastToNativeType$NativeObject$Overlay$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    String = goog.module.get('gen.java.lang.String$impl');
    CastToNativeType$NativeJsType = goog.module.get('test.foo.NativeJsType');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jstypecastsinstanceof_CastToNativeType() {
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
CastToNativeType.$classCastToNativeType_ = null;



/**
 * Export class.
 */
exports = CastToNativeType;
//# sourceMappingURL=CastToNativeType.js.map