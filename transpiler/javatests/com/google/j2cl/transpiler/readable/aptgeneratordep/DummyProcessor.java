package com.google.j2cl.transpiler.readable.aptgeneratordep;

import java.io.IOException;
import java.io.Writer;
import java.util.HashSet;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedSourceVersion;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.TypeElement;
import javax.tools.JavaFileObject;

/**
 * A trivially small annotation processor existing only to verify that annotation processors can and
 * will be correctly run and translated to JS inside of j2cl_library() rules.
 */
@SupportedSourceVersion(SourceVersion.RELEASE_8)
public class DummyProcessor extends AbstractProcessor {

  private boolean createdDummy;

  @Override
  public Set<String> getSupportedAnnotationTypes() {
    HashSet<String> supportedAnnotationNames = new HashSet<String>();
    supportedAnnotationNames.add(Override.class.getName());
    return supportedAnnotationNames;
  }

  @Override
  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
    if (createdDummy) {
      return false;
    }

    createdDummy = true;
    try {
      JavaFileObject dummySourceFile =
          processingEnv
              .getFiler()
              .createSourceFile("com.google.j2cl.transpiler.readable.aptgeneratordep.Dummy");
      Writer writer = dummySourceFile.openWriter();
      writer.write(
          "package com.google.j2cl.transpiler.readable.aptgeneratordep;\n"
              + "// Generated by DummyProcessor.java\n"
              + "public class Dummy {}\n");
      writer.close();
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
    return false;
  }
}
