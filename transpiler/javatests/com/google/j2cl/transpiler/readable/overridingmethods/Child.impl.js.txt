/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.overridingmethods.Child.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.overridingmethods.Child$impl');


let Parent = goog.require('gen.com.google.j2cl.transpiler.readable.overridingmethods.Parent$impl');
let SomeInterface = goog.require('gen.com.google.j2cl.transpiler.readable.overridingmethods.SomeInterface$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');


/**
 * @implements {SomeInterface}
 */
class Child extends Parent {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_overridingmethods_Child() {}

  /**
   * A particular Java constructor as a factory method.
   * @return {!Child}
   * @public
   */
  static $create() {
    Child.$clinit();
    let $instance = new Child;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_overridingmethods_Child();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_overridingmethods_Child() {
    this.$ctor__com_google_j2cl_transpiler_readable_overridingmethods_Parent();
    this.$init__com_google_j2cl_transpiler_readable_overridingmethods_Child();
  }

  /**
   * @override
   * @return {void}
   * @public
   */
  m_fun() {}

  /**
   * @override
   * @return {void}
   * @public
   */
  m_bar() {}

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof Child; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Child);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    Child.$clinit();
    if (!Child.$classChild_) {
      Child.$classChild_ = Class.$createForClass(
          $Util.$generateId('Child'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.overridingmethods.Child'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.overridingmethods.Child'));
    }
    return Child.$classChild_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return Child.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    Parent.$clinit();
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
Child.$classChild_ = null;


SomeInterface.$markImplementor(Child);



/**
 * Export class.
 */
exports = Child;
//# sourceMappingURL=Child.js.map