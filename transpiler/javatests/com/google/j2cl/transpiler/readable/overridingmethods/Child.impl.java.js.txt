/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.overridingmethods.Child.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.overridingmethods.Child$impl');


let Parent = goog.require('com.google.j2cl.transpiler.readable.overridingmethods.Parent$impl');
let SomeInterface = goog.require('com.google.j2cl.transpiler.readable.overridingmethods.SomeInterface$impl');
let $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @implements {SomeInterface}
 */
class Child extends Parent {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Child}
   * @public
   */
  static $create__() {
    Child.$clinit();
    let $instance = new Child();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_overridingmethods_Child__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_overridingmethods_Child__() {
    this.$ctor__com_google_j2cl_transpiler_readable_overridingmethods_Parent__();
    this.$init__com_google_j2cl_transpiler_readable_overridingmethods_Child();
  }

  /**
   * @override
   * @return {void}
   * @public
   */
  m_fun__() {}

  /**
   * @override
   * @return {void}
   * @public
   */
  m_bar__() {}

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Child;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Child);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Parent.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_overridingmethods_Child() {}
};

$Util.$setClassMetadata(
    Child, $Util.$makeClassName(
               'com.google.j2cl.transpiler.readable.overridingmethods.Child'));


SomeInterface.$markImplementor(Child);


/**
 * Export class.
 */
exports = Child;
//# sourceMappingURL=Child.js.map