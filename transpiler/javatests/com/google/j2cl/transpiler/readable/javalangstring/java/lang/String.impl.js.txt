/**
 * @fileoverview Impl transpiled from java.lang.String.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode}
 */
goog.module('gen.java.lang.String$impl');


let Serializable = goog.require('gen.java.io.Serializable$impl');
let CharSequence = goog.require('gen.java.lang.CharSequence$impl');
let Comparable = goog.require('gen.java.lang.Comparable$impl');
let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Objects = goog.forwardDeclare('vmbootstrap.Objects$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @implements {Serializable}
 * @implements {Comparable<?string>}
 * @implements {CharSequence}
 */
class String extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__java_lang_String() {}

  /**
   * Constructor function implementation is provided separately.
   */

  /**
   * @override
   * @param {*} o
   * @return {boolean}
   * @public
   */
  m_equals__java_lang_Object(o) {}

  /**
   * @override
   * @return {number}
   * @public
   */
  m_hashCode() {}

  /**
   * @override
   * @return {?string}
   * @public
   */
  m_toString() {}

  /**
   * @override
   * @return {number}
   * @public
   */
  m_length() {}

  /**
   * @override
   * @param {number} index
   * @return {number}
   * @public
   */
  m_charAt__int(index) {}

  /**
   * @override
   * @param {number} start
   * @param {number} end
   * @return {(CharSequence|?string)}
   * @public
   */
  m_subSequence__int__int(start, end) {}

  /**
   * @param {?string} s
   * @return {number}
   * @public
   */
  m_compareTo__java_lang_String(s) {}

  /**
   * @param {*} o
   * @return {?string}
   * @public
   * @nocollapse
   */
  static m_valueOf__java_lang_Object(o) {
    String.$clinit();
    return o == null ? "null" : $Objects.m_toString__java_lang_Object(o);
  }

  /**
   * @param {number} start
   * @param {number} endIndex
   * @return {?string}
   * @public
   */
  m_substring__int__int(start, endIndex) {}

  /**
   * @param {number} start
   * @return {?string}
   * @public
   */
  m_substring__int(start) {}

  /**
   * @return {?string}
   * @public
   */
  m_trim() {}

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   * @nocollapse
   */
  // native static
  // m_nativeIsInstance__java_lang_Object_$p_java_lang_String(instance)

  /**
   * @param {?string} obj
   * @return {number}
   * @public
   * @nocollapse
   */
  // native static m_$hashCode__java_lang_String_$p_java_lang_String(obj)

  /**
   * @param {?string} obj
   * @return {number}
   * @public
   * @nocollapse
   */
  // native static m_$length__java_lang_String_$p_java_lang_String(obj)

  /**
   * @param {?string} obj
   * @param {number} index
   * @return {number}
   * @public
   * @nocollapse
   */
  // native static m_$charAt__java_lang_String__int_$p_java_lang_String(obj,
  // index)

  /**
   * @param {?string} obj
   * @param {number} start
   * @param {number} end
   * @return {?string}
   * @public
   * @nocollapse
   */
  // native static
  // m_$subSequence__java_lang_String__int__int_$p_java_lang_String(obj, start,
  // end)

  /**
   * @param {?string} obj
   * @param {number} start
   * @param {number} endIndex
   * @return {?string}
   * @public
   * @nocollapse
   */
  // native static
  // m_$substring__java_lang_String__int__int_$p_java_lang_String(obj, start,
  // endIndex)

  /**
   * @param {?string} obj
   * @param {number} start
   * @return {?string}
   * @public
   * @nocollapse
   */
  // native static m_$substring__java_lang_String__int_$p_java_lang_String(obj,
  // start)

  /**
   * @param {?string} obj
   * @return {?string}
   * @public
   * @nocollapse
   */
  // native static m_$trim__java_lang_String_$p_java_lang_String(obj)

  /**
   * @param {?string} one
   * @param {?string} other
   * @return {number}
   * @public
   * @nocollapse
   */
  // native static
  // m_$compareTo__java_lang_String__java_lang_String_$p_java_lang_String(one,
  // other)

  /**
   * Synthetic method.
   * @param {?string} arg0
   * @return {number}
   * @public
   */
  m_compareTo__java_lang_Object(arg0) {}

  /**
   * @param {?string} $thisArg
   * @param {*} o
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static m_equals__java_lang_String__java_lang_Object($thisArg, o) {
    String.$clinit();
    return $Equality.$same($thisArg, o);
  }

  /**
   * @param {?string} $thisArg
   * @return {number}
   * @public
   * @nocollapse
   */
  static m_hashCode__java_lang_String($thisArg) {
    String.$clinit();
    return String.m_$hashCode__java_lang_String_$p_java_lang_String($thisArg);
  }

  /**
   * @param {?string} $thisArg
   * @return {?string}
   * @public
   * @nocollapse
   */
  static m_toString__java_lang_String($thisArg) {
    String.$clinit();
    return $thisArg;
  }

  /**
   * @param {?string} $thisArg
   * @return {number}
   * @public
   * @nocollapse
   */
  static m_length__java_lang_String($thisArg) {
    String.$clinit();
    return String.m_$length__java_lang_String_$p_java_lang_String($thisArg);
  }

  /**
   * @param {?string} $thisArg
   * @param {number} index
   * @return {number}
   * @public
   * @nocollapse
   */
  static m_charAt__java_lang_String__int($thisArg, index) {
    String.$clinit();
    return String.m_$charAt__java_lang_String__int_$p_java_lang_String(
        $thisArg, index);
  }

  /**
   * @param {?string} $thisArg
   * @param {number} start
   * @param {number} end
   * @return {(CharSequence|?string)}
   * @public
   * @nocollapse
   */
  static m_subSequence__java_lang_String__int__int($thisArg, start, end) {
    String.$clinit();
    return String
        .m_$subSequence__java_lang_String__int__int_$p_java_lang_String(
            $thisArg, start, end);
  }

  /**
   * @param {?string} $thisArg
   * @param {?string} s
   * @return {number}
   * @public
   * @nocollapse
   */
  static m_compareTo__java_lang_String__java_lang_String($thisArg, s) {
    String.$clinit();
    return String
        .m_$compareTo__java_lang_String__java_lang_String_$p_java_lang_String(
            $thisArg, s);
  }

  /**
   * @param {?string} $thisArg
   * @param {number} start
   * @param {number} endIndex
   * @return {?string}
   * @public
   * @nocollapse
   */
  static m_substring__java_lang_String__int__int($thisArg, start, endIndex) {
    String.$clinit();
    return String.m_$substring__java_lang_String__int__int_$p_java_lang_String(
        $thisArg, start, endIndex);
  }

  /**
   * @param {?string} $thisArg
   * @param {number} start
   * @return {?string}
   * @public
   * @nocollapse
   */
  static m_substring__java_lang_String__int($thisArg, start) {
    String.$clinit();
    return String.m_$substring__java_lang_String__int_$p_java_lang_String(
        $thisArg, start);
  }

  /**
   * @param {?string} $thisArg
   * @return {?string}
   * @public
   * @nocollapse
   */
  static m_trim__java_lang_String($thisArg) {
    String.$clinit();
    return String.m_$trim__java_lang_String_$p_java_lang_String($thisArg);
  }

  /**
   * @param {?string} $thisArg
   * @param {?string} arg0
   * @return {number}
   * @public
   * @nocollapse
   */
  static m_compareTo__java_lang_String__java_lang_Object($thisArg, arg0) {
    String.$clinit();
    return String.m_compareTo__java_lang_String__java_lang_String(
        $thisArg, /**@type {?string} */ ($Casts.to(arg0, String)));
  }

  /**
   * $isInstance() function implementation is provided separately.
   */

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, String);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    String.$clinit();
    if (!String.$classString_) {
      String.$classString_ = Class.$createForClass(
          $Util.$generateId('String'), $Util.$generateId('java.lang.String'),
          Object.$getClass(), $Util.$generateId('java.lang.String'));
    }
    return String.$classString_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return String.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $Objects = goog.module.get('vmbootstrap.Objects$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
String.$classString_ = null;


Serializable.$markImplementor(String);


Comparable.$markImplementor(String);


CharSequence.$markImplementor(String);



/**
 * Export class.
 */
exports = String;
