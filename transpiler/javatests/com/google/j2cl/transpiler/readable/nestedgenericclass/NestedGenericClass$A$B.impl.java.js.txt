/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$A$B.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.A.B$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let A = goog.forwardDeclare('com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.A$impl');


/**
 * @template C_A_B_T, C_A_T, C_T
 */
class B extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
    /** @public {A<C_A_T, C_T>} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass_A_B;
  }

  /**
   * Factory method corresponding to constructor 'B(A)'.
   * @template C_A_B_T, C_A_T, C_T
   * @param {A<C_A_T, C_T>} $outer_this
   * @return {!B<C_A_B_T, C_A_T, C_T>}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass_A(
      $outer_this) {
    B.$clinit();
    let $instance = new B();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass_A_B__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass_A(
            $outer_this);
    return $instance;
  }

  /**
   * Initialization from constructor 'B(A)'.
   * @param {A<C_A_T, C_T>} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass_A_B__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass_A(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass_A_B =
        $outer_this;
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass_A_B();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof B;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, B);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    B.$clinit = function() {};
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass_A_B() {
  }
};

$Util.$setClassMetadata(
    B,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$A$B'));



/**
 * Export class.
 */
exports = B;
//# sourceMappingURL=NestedGenericClass$A$B.js.map