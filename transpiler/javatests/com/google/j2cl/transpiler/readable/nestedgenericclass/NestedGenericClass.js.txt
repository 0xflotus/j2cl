/**
 * Transpiled from
 * third_party/java_src/j2cl/transpiler/javatests/com/google/j2cl/transpiler/readable/nestedgenericclass/NestedGenericClass.java.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClassModule');


let Class = goog.require('gen.java.lang.CoreModule').Class;
let Object = goog.require('gen.java.lang.CoreModule').Object;
let Error = goog.require('gen.java.lang.ErrorModule').Error;
let Exception = goog.require('gen.java.lang.ExceptionModule').Exception;
let Number = goog.require('gen.java.lang.NumberModule').Number;
let $Util = goog.require('nativebootstrap.UtilModule').Util;


/**
 * @template C_T
 */
class NestedGenericClass extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass() {
  }

  /**
   * @template C_A_T
   * @return {NestedGenericClass$A<C_A_T, C_T>}
   * @public
   */
  m_$create_NestedGenericClass$A() {
    return NestedGenericClass$A.$create(this);
  }

  /**
   * @return {NestedGenericClass$C<C_T>}
   * @public
   */
  m_$create_NestedGenericClass$C() {
    return NestedGenericClass$C.$create(this);
  }

  /**
   * @template M_S
   * @param {M_S} t
   * @return {void}
   * @public
   */
  m_fun__java_lang_Object(t) {
    /**@type {NestedGenericClass$1E<(Number|?number)>} */ (
        NestedGenericClass$1E.$create(this));
    /**@type {NestedGenericClass$1F<C_T>} */ (
        NestedGenericClass$1F.$create(this));
  }

  /**
   * @template M_T
   * @return {void}
   * @public
   */
  m_bar() {
    /**@type {NestedGenericClass$1G<Error>} */ (
        NestedGenericClass$1G.$create(this))
        .m_bar();
  }

  /**
   * @return {void}
   * @public
   */
  m_test() {
    let n = /**@type {NestedGenericClass<(Number|?number)>} */ (
        NestedGenericClass.$create());
    let a = /**@type {NestedGenericClass$A<Error>} */ (
        n.m_$create_NestedGenericClass$A());
    let b = /**@type {NestedGenericClass$A$B<Exception>} */ (
        a.m_$create_NestedGenericClass$A$B());
    /**@type {NestedGenericClass$C<(Number|?number)>} */ (
        n.m_$create_NestedGenericClass$C());
    /**@type {NestedGenericClass$C$D<(Number|?number)>} */ (
        /**@type {NestedGenericClass$C<(Number|?number)>} */ (
            n.m_$create_NestedGenericClass$C())
            .m_$create_NestedGenericClass$C$D());
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @return {!NestedGenericClass<C_T>}
   * @public
   * @nocollapse
   */
  static $create() {
    NestedGenericClass.$clinit();
    let instance = new NestedGenericClass;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof NestedGenericClass;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedGenericClass);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!NestedGenericClass.$classNestedGenericClass) {
      NestedGenericClass.$classNestedGenericClass = Class.$createForClass(
          $Util.$generateId('NestedGenericClass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass'));
    }
    return NestedGenericClass.$classNestedGenericClass;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.NestedGenericClass = NestedGenericClass;



/**
 * @template C_A_T, C_T
 */
class NestedGenericClass$A extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {NestedGenericClass<C_T>}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A() {
  }

  /**
   * @template C_A_B_T
   * @return {NestedGenericClass$A$B<C_A_B_T, C_A_T, C_T>}
   * @public
   */
  m_$create_NestedGenericClass$A$B() {
    return NestedGenericClass$A$B.$create(this);
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_A_T, C_T
   * @param {NestedGenericClass<C_T>} $outer_this
   * @return {!NestedGenericClass$A<C_A_T, C_T>}
   * @public
   * @nocollapse
   */
  static $create($outer_this) {
    NestedGenericClass$A.$clinit();
    let instance = new NestedGenericClass$A;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {NestedGenericClass<C_T>} $outer_this
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A(
      $outer_this) {
    this.$ctor__java_lang_Object();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A =
        $outer_this;
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof NestedGenericClass$A;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedGenericClass$A);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!NestedGenericClass$A.$classNestedGenericClass$A) {
      NestedGenericClass$A.$classNestedGenericClass$A = Class.$createForClass(
          $Util.$generateId('A'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$A'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.A'));
    }
    return NestedGenericClass$A.$classNestedGenericClass$A;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.NestedGenericClass$A = NestedGenericClass$A;



/**
 * @template C_A_B_T, C_A_T, C_T
 */
class NestedGenericClass$A$B extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {NestedGenericClass$A<C_A_T, C_T>}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A$B =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A$B() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_A_B_T, C_A_T, C_T
   * @param {NestedGenericClass$A<C_A_T, C_T>} $outer_this
   * @return {!NestedGenericClass$A$B<C_A_B_T, C_A_T, C_T>}
   * @public
   * @nocollapse
   */
  static $create($outer_this) {
    NestedGenericClass$A$B.$clinit();
    let instance = new NestedGenericClass$A$B;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A$B(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {NestedGenericClass$A<C_A_T, C_T>} $outer_this
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A$B(
      $outer_this) {
    this.$ctor__java_lang_Object();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A$B =
        $outer_this;
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$A$B();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof NestedGenericClass$A$B;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedGenericClass$A$B);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!NestedGenericClass$A$B.$classNestedGenericClass$A$B) {
      NestedGenericClass$A$B
          .$classNestedGenericClass$A$B = Class.$createForClass(
          $Util.$generateId('B'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$A$B'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.A.B'));
    }
    return NestedGenericClass$A$B.$classNestedGenericClass$A$B;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.NestedGenericClass$A$B = NestedGenericClass$A$B;



/**
 * @template C_T
 */
class NestedGenericClass$C extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {C_T}
     */
    this.f_c__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C =
        null;
    /**
     * @public {NestedGenericClass<C_T>}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C() {
  }

  /**
   * @return {NestedGenericClass$C$D<C_T>}
   * @public
   */
  m_$create_NestedGenericClass$C$D() {
    return NestedGenericClass$C$D.$create(this);
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @param {NestedGenericClass<C_T>} $outer_this
   * @return {!NestedGenericClass$C<C_T>}
   * @public
   * @nocollapse
   */
  static $create($outer_this) {
    NestedGenericClass$C.$clinit();
    let instance = new NestedGenericClass$C;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {NestedGenericClass<C_T>} $outer_this
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C(
      $outer_this) {
    this.$ctor__java_lang_Object();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C =
        $outer_this;
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof NestedGenericClass$C;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedGenericClass$C);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!NestedGenericClass$C.$classNestedGenericClass$C) {
      NestedGenericClass$C.$classNestedGenericClass$C = Class.$createForClass(
          $Util.$generateId('C'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$C'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.C'));
    }
    return NestedGenericClass$C.$classNestedGenericClass$C;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.NestedGenericClass$C = NestedGenericClass$C;



/**
 * @template C_T
 */
class NestedGenericClass$C$D extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {C_T}
     */
    this.f_d__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C$D =
        null;
    /**
     * @public {NestedGenericClass$C<C_T>}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C$D =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C$D() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @param {NestedGenericClass$C<C_T>} $outer_this
   * @return {!NestedGenericClass$C$D<C_T>}
   * @public
   * @nocollapse
   */
  static $create($outer_this) {
    NestedGenericClass$C$D.$clinit();
    let instance = new NestedGenericClass$C$D;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C$D(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {NestedGenericClass$C<C_T>} $outer_this
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C$D(
      $outer_this) {
    this.$ctor__java_lang_Object();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C$D =
        $outer_this;
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$C$D();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof NestedGenericClass$C$D;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedGenericClass$C$D);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!NestedGenericClass$C$D.$classNestedGenericClass$C$D) {
      NestedGenericClass$C$D
          .$classNestedGenericClass$C$D = Class.$createForClass(
          $Util.$generateId('D'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$C$D'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.C.D'));
    }
    return NestedGenericClass$C$D.$classNestedGenericClass$C$D;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.NestedGenericClass$C$D = NestedGenericClass$C$D;



/**
 * @template C_1E_S, M_S, C_T
 */
class NestedGenericClass$1E extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {NestedGenericClass<C_T>}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1E =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1E() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_1E_S, M_S, C_T
   * @param {NestedGenericClass<C_T>} $outer_this
   * @return {!NestedGenericClass$1E<C_1E_S, M_S, C_T>}
   * @package
   * @nocollapse
   */
  static $create($outer_this) {
    NestedGenericClass$1E.$clinit();
    let instance = new NestedGenericClass$1E;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1E(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {NestedGenericClass<C_T>} $outer_this
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1E(
      $outer_this) {
    this.$ctor__java_lang_Object();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1E =
        $outer_this;
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1E();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof NestedGenericClass$1E;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedGenericClass$1E);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!NestedGenericClass$1E.$classNestedGenericClass$1E) {
      NestedGenericClass$1E.$classNestedGenericClass$1E = Class.$createForClass(
          $Util.$generateId('1E'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$1E'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.1E'));
    }
    return NestedGenericClass$1E.$classNestedGenericClass$1E;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * @template M_S, C_T
 */
class NestedGenericClass$1F extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {M_S}
     */
    this.f_f__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1F =
        null;
    /**
     * @public {NestedGenericClass<C_T>}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1F =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1F() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @template M_S, C_T
   * @param {NestedGenericClass<C_T>} $outer_this
   * @return {!NestedGenericClass$1F<M_S, C_T>}
   * @package
   * @nocollapse
   */
  static $create($outer_this) {
    NestedGenericClass$1F.$clinit();
    let instance = new NestedGenericClass$1F;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1F(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {NestedGenericClass<C_T>} $outer_this
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1F(
      $outer_this) {
    this.$ctor__java_lang_Object();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1F =
        $outer_this;
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1F();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof NestedGenericClass$1F;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedGenericClass$1F);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!NestedGenericClass$1F.$classNestedGenericClass$1F) {
      NestedGenericClass$1F.$classNestedGenericClass$1F = Class.$createForClass(
          $Util.$generateId('1F'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$1F'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.1F'));
    }
    return NestedGenericClass$1F.$classNestedGenericClass$1F;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * @template C_1G_T, M_T, C_T
 */
class NestedGenericClass$1G extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {NestedGenericClass<C_T>}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G() {
  }

  /**
   * @template M_G_bar_T
   * @return {void}
   * @public
   */
  m_bar() {
    /**@type {NestedGenericClass$1G$1H<(Number|?number)>} */ (
        NestedGenericClass$1G$1H.$create(this));
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_1G_T, M_T, C_T
   * @param {NestedGenericClass<C_T>} $outer_this
   * @return {!NestedGenericClass$1G<C_1G_T, M_T, C_T>}
   * @package
   * @nocollapse
   */
  static $create($outer_this) {
    NestedGenericClass$1G.$clinit();
    let instance = new NestedGenericClass$1G;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {NestedGenericClass<C_T>} $outer_this
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G(
      $outer_this) {
    this.$ctor__java_lang_Object();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G =
        $outer_this;
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof NestedGenericClass$1G;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedGenericClass$1G);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!NestedGenericClass$1G.$classNestedGenericClass$1G) {
      NestedGenericClass$1G.$classNestedGenericClass$1G = Class.$createForClass(
          $Util.$generateId('1G'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$1G'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.1G'));
    }
    return NestedGenericClass$1G.$classNestedGenericClass$1G;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * @template C_1G_1H_T, M_G_bar_T, C_1G_T, M_T, C_T
 */
class NestedGenericClass$1G$1H extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {NestedGenericClass$1G<C_1G_T, M_T, C_T>}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G$1H =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G$1H() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_1G_1H_T, M_G_bar_T, C_1G_T, M_T, C_T
   * @param {NestedGenericClass$1G<C_1G_T, M_T, C_T>} $outer_this
   * @return {!NestedGenericClass$1G$1H<C_1G_1H_T, M_G_bar_T, C_1G_T, M_T, C_T>}
   * @package
   * @nocollapse
   */
  static $create($outer_this) {
    NestedGenericClass$1G$1H.$clinit();
    let instance = new NestedGenericClass$1G$1H;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G$1H(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {NestedGenericClass$1G<C_1G_T, M_T, C_T>} $outer_this
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G$1H(
      $outer_this) {
    this.$ctor__java_lang_Object();
    this.f_$outer_this__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G$1H =
        $outer_this;
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass$1G$1H();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof NestedGenericClass$1G$1H;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedGenericClass$1G$1H);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!NestedGenericClass$1G$1H.$classNestedGenericClass$1G$1H) {
      NestedGenericClass$1G$1H
          .$classNestedGenericClass$1G$1H = Class.$createForClass(
          $Util.$generateId('1H'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$1G$1H'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.1G.1H'));
    }
    return NestedGenericClass$1G$1H.$classNestedGenericClass$1G$1H;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;
