/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let NestedGenericClass$1E = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$1E$impl');
let NestedGenericClass$1F = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$1F$impl');
let NestedGenericClass$1G = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$1G$impl');
let NestedGenericClass$A$B = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$A$B$impl');
let NestedGenericClass$A = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$A$impl');
let NestedGenericClass$C$D = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$C$D$impl');
let NestedGenericClass$C = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$C$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Error = goog.forwardDeclare('gen.java.lang.Error$impl');
let Exception = goog.forwardDeclare('gen.java.lang.Exception$impl');
let Number = goog.forwardDeclare('gen.java.lang.Number$impl');


/**
 * @template C_T
 */
class NestedGenericClass extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @return {!NestedGenericClass<C_T>}
   * @public
   */
  static $create() {
    NestedGenericClass.$clinit();
    let $instance = new NestedGenericClass;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass();
  }

  /**
   * @template M_S
   * @param {M_S} t
   * @return {void}
   * @public
   */
  m_fun__java_lang_Object(t) {
    /**@type {NestedGenericClass$1E<(Number|?number)>} */ (
        NestedGenericClass$1E
            .$create__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass(
                this));
    /**@type {NestedGenericClass$1F<C_T>} */ (
        NestedGenericClass$1F
            .$create__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass(
                this));
  }

  /**
   * @template M_T
   * @return {void}
   * @public
   */
  m_bar() {
    /**@type {NestedGenericClass$1G<Error>} */ (
        NestedGenericClass$1G
            .$create__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass(
                this))
        .m_bar();
  }

  /**
   * @return {void}
   * @public
   */
  m_test() {
    let n = /**@type {NestedGenericClass<(Number|?number)>} */ (
        NestedGenericClass.$create());
    let a = /**@type {NestedGenericClass$A<Error>} */ (
        n.m_$create_NestedGenericClass$A());
    let b = /**@type {NestedGenericClass$A$B<Exception>} */ (
        a.m_$create_NestedGenericClass$A$B());
    /**@type {NestedGenericClass$C<(Number|?number)>} */ (
        n.m_$create_NestedGenericClass$C());
    /**@type {NestedGenericClass$C$D<(Number|?number)>} */ (
        /**@type {NestedGenericClass$C<(Number|?number)>} */ (
            n.m_$create_NestedGenericClass$C())
            .m_$create_NestedGenericClass$C$D());
  }

  /**
   * @template C_A_T
   * @return {NestedGenericClass$A<C_A_T, C_T>}
   * @public
   */
  m_$create_NestedGenericClass$A() {
    return NestedGenericClass$A
        .$create__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass(
            this);
  }

  /**
   * @return {NestedGenericClass$C<C_T>}
   * @public
   */
  m_$create_NestedGenericClass$C() {
    return NestedGenericClass$C
        .$create__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass(
            this);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof NestedGenericClass;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedGenericClass);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    NestedGenericClass.$clinit();
    if (!NestedGenericClass.$classNestedGenericClass_) {
      NestedGenericClass.$classNestedGenericClass_ = Class.$createForClass(
          $Util.$generateId('NestedGenericClass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass'));
    }
    return NestedGenericClass.$classNestedGenericClass_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return NestedGenericClass.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    NestedGenericClass$1E = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$1E$impl');
    NestedGenericClass$1F = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$1F$impl');
    NestedGenericClass$1G = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$1G$impl');
    NestedGenericClass$A$B = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$A$B$impl');
    NestedGenericClass$A = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$A$impl');
    NestedGenericClass$C$D = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$C$D$impl');
    NestedGenericClass$C = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.nestedgenericclass.NestedGenericClass$C$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    Error = goog.module.get('gen.java.lang.Error$impl');
    Exception = goog.module.get('gen.java.lang.Exception$impl');
    Number = goog.module.get('gen.java.lang.Number$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedgenericclass_NestedGenericClass() {
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
NestedGenericClass.$classNestedGenericClass_ = null;



/**
 * Export class.
 */
exports = NestedGenericClass;
//# sourceMappingURL=NestedGenericClass.js.map