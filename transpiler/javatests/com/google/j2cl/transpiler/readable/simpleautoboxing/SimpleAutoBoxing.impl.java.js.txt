/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.simpleautoboxing.SimpleAutoBoxing.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.simpleautoboxing.SimpleAutoBoxing$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Long = goog.require('nativebootstrap.Long$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Byte = goog.forwardDeclare('java.lang.Byte$impl');
let Character = goog.forwardDeclare('java.lang.Character$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Float = goog.forwardDeclare('java.lang.Float$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Long = goog.forwardDeclare('java.lang.Long$impl');
let Short = goog.forwardDeclare('java.lang.Short$impl');
let Void = goog.forwardDeclare('java.lang.Void$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $LongUtils = goog.forwardDeclare('vmbootstrap.LongUtils$impl');
let $Primitives = goog.forwardDeclare('vmbootstrap.Primitives$impl');
let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');
let $byte = goog.forwardDeclare('vmbootstrap.primitives.$byte$impl');
let $char = goog.forwardDeclare('vmbootstrap.primitives.$char$impl');
let $double = goog.forwardDeclare('vmbootstrap.primitives.$double$impl');
let $float = goog.forwardDeclare('vmbootstrap.primitives.$float$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');
let $long = goog.forwardDeclare('vmbootstrap.primitives.$long$impl');
let $short = goog.forwardDeclare('vmbootstrap.primitives.$short$impl');


class SimpleAutoBoxing extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'SimpleAutoBoxing()'.
   * @return {!SimpleAutoBoxing}
   * @public
   */
  static $create__() {
    SimpleAutoBoxing.$clinit();
    let $instance = new SimpleAutoBoxing();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simpleautoboxing_SimpleAutoBoxing__();
    return $instance;
  }

  /**
   * Initialization from constructor 'SimpleAutoBoxing()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_simpleautoboxing_SimpleAutoBoxing__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_simpleautoboxing_SimpleAutoBoxing();
  }

  /**
   * @param {boolean} b
   * @return {?boolean}
   * @public
   */
  m_box__boolean(b) {
    return b;
  }

  /**
   * @param {number} d
   * @return {?number}
   * @public
   */
  m_box__double(d) {
    return d;
  }

  /**
   * @param {number} b
   * @return {Byte}
   * @public
   */
  m_box__byte(b) {
    return Byte.m_valueOf__byte(b);
  }

  /**
   * @param {number} f
   * @return {Float}
   * @public
   */
  m_box__float(f) {
    return Float.m_valueOf__float(f);
  }

  /**
   * @param {number} i
   * @return {Integer}
   * @public
   */
  m_box__int(i) {
    return Integer.m_valueOf__int(i);
  }

  /**
   * @param {!$Long} l
   * @return {Long}
   * @public
   */
  m_box__long(l) {
    return Long.m_valueOf__long(l);
  }

  /**
   * @param {number} s
   * @return {Short}
   * @public
   */
  m_box__short(s) {
    return Short.m_valueOf__short(s);
  }

  /**
   * @param {number} c
   * @return {Character}
   * @public
   */
  m_box__char(c) {
    return Character.m_valueOf__char(c);
  }

  /**
   * @param {?boolean} b
   * @return {boolean}
   * @public
   */
  m_unbox__java_lang_Boolean(b) {
    return Boolean.m_booleanValue__java_lang_Boolean(b);
  }

  /**
   * @param {?number} d
   * @return {number}
   * @public
   */
  m_unbox__java_lang_Double(d) {
    return Double.m_doubleValue__java_lang_Double(d);
  }

  /**
   * @param {Byte} b
   * @return {number}
   * @public
   */
  m_unbox__java_lang_Byte(b) {
    return b.m_byteValue__();
  }

  /**
   * @param {Float} f
   * @return {number}
   * @public
   */
  m_unbox__java_lang_Float(f) {
    return f.m_floatValue__();
  }

  /**
   * @param {Integer} i
   * @return {number}
   * @public
   */
  m_unbox__java_lang_Integer(i) {
    return i.m_intValue__();
  }

  /**
   * @param {Long} l
   * @return {!$Long}
   * @public
   */
  m_unbox__java_lang_Long(l) {
    return l.m_longValue__();
  }

  /**
   * @param {Short} s
   * @return {number}
   * @public
   */
  m_unbox__java_lang_Short(s) {
    return s.m_shortValue__();
  }

  /**
   * @param {Character} c
   * @return {number}
   * @public
   */
  m_unbox__java_lang_Character(c) {
    return c.m_charValue__();
  }

  /**
   * @param {number} d
   * @return {number}
   * @public
   */
  m_takesAndReturnsPrimitiveDouble__double(d) {
    return d;
  }

  /**
   * @param {?void} v
   * @return {?void}
   * @public
   */
  m_takesAndReturnsVoid__java_lang_Void(v) {
    return null;
  }

  /**
   * @param {*} o
   * @return {number}
   * @public
   */
  m_takesObjectAndReturnsPrimitiveDouble__java_lang_Object(o) {
    return Double.m_doubleValue__java_lang_Double(
        /**@type {?number} */ ($Casts.$to(o, Double)));
  }

  /**
   * @param {Array<*>} numbers
   * @return {number}
   * @public
   */
  m_sumWithoutBoxing__arrayOf_java_lang_Object(numbers) {
    let sum = 0;
    for (let $array = numbers, $index = 0; $index < $array.length; $index++) {
      let number$1$ = $array[$index];
      sum += Double.m_doubleValue__java_lang_Double(
          /**@type {?number} */ ($Casts.$to(number$1$, Double)));
    }
    return sum;
  }

  /**
   * @param {...*} numbers
   * @return {number}
   * @public
   */
  sumWithoutBoxingJsVarargs(...numbers) {
    let sum = 0;
    for (let $array = numbers, $index = 0; $index < $array.length; $index++) {
      let number$1$ = $array[$index];
      sum += Double.m_doubleValue__java_lang_Double(
          /**@type {?number} */ ($Casts.$to(number$1$, Double)));
    }
    return sum;
  }

  /**
   * @return {void}
   * @public
   */
  m_testNull__() {
    let b = null;
    let d = null;
    let i = null;
    let l = null;
  }

  /**
   * @return {void}
   * @public
   */
  m_testBoxing__() {
    let bool = true;
    let d = 1111.0;
    let b = 100;
    let f = 1111.0;
    let i = 1111;
    let l = $Long.fromBits(1111, 0) /* 1111 */;
    let s = 100;
    let c = 97 /* 'a' */;
    let boxBool = bool;
    let boxD = d;
    let boxB = Byte.m_valueOf__byte(b);
    let boxF = Float.m_valueOf__float(f);
    let boxI = Integer.m_valueOf__int(i);
    let boxL = Long.m_valueOf__long(l);
    let boxS = Short.m_valueOf__short(s);
    let boxC = Character.m_valueOf__char(c);
    let o = Integer.m_valueOf__int(0);
    boxBool = true;
    boxD = 100.0;
    boxB = Byte.m_valueOf__byte(0);
    boxF = Float.m_valueOf__float(100.0);
    boxI = Integer.m_valueOf__int(1000);
    boxL = Long.m_valueOf__long($Long.fromBits(1000, 0) /* 1000 */);
    boxS = Short.m_valueOf__short(0);
    boxC = Character.m_valueOf__char(0 /* "\u0000" */);
    boxC = Character.m_valueOf__char(97 /* "a" */);
    bool = this.m_unbox__java_lang_Boolean(bool);
    d = this.m_unbox__java_lang_Double(d);
    b = this.m_unbox__java_lang_Byte(Byte.m_valueOf__byte(b));
    f = this.m_unbox__java_lang_Float(Float.m_valueOf__float(f));
    i = this.m_unbox__java_lang_Integer(Integer.m_valueOf__int(i));
    l = this.m_unbox__java_lang_Long(Long.m_valueOf__long(l));
    s = this.m_unbox__java_lang_Short(Short.m_valueOf__short(s));
    c = this.m_unbox__java_lang_Character(Character.m_valueOf__char(c));
    boxBool = Boolean.m_booleanValue__java_lang_Boolean(boxBool) &&
        Boolean.m_booleanValue__java_lang_Boolean(boxBool);
    boxD = Double.m_doubleValue__java_lang_Double(boxD) +
        Double.m_doubleValue__java_lang_Double(boxD);
    boxF =
        Float.m_valueOf__float(boxF.m_floatValue__() - boxF.m_floatValue__());
    boxI = Integer.m_valueOf__int(boxI.m_intValue__() * boxI.m_intValue__());
    boxL = Long.m_valueOf__long(
        $LongUtils.$divide(boxL.m_longValue__(), boxL.m_longValue__()));
    boxBool = !Boolean.m_booleanValue__java_lang_Boolean(boxBool);
    boxI = Integer.m_valueOf__int(boxI.m_intValue__());
    boxI = Integer.m_valueOf__int(-boxI.m_intValue__());
    boxI = Integer.m_valueOf__int(~boxI.m_intValue__());
    let unusedDouble =
        this.m_takesObjectAndReturnsPrimitiveDouble__java_lang_Object(4);
    unusedDouble =
        this.m_sumWithoutBoxing__arrayOf_java_lang_Object([1, 1.5, 1, 1, 1]);
    unusedDouble = this.sumWithoutBoxingJsVarargs(1, 1.5, 1, 1, 1);
  }

  /**
   * @return {void}
   * @public
   */
  m_testUnboxing__() {
    let boxBool = Boolean.$create__boolean(true);
    let boxD = Double.$create__double(1111.0);
    let boxB = Byte.$create__byte(100);
    let boxF = Float.$create__float(1111.0);
    let boxI = Integer.$create__int(1111);
    let boxL = Long.$create__long($Long.fromBits(1111, 0) /* 1111 */);
    let boxS = Short.$create__short(100);
    let boxC = Character.$create__char(97 /* 'a' */);
    let bool = Boolean.m_booleanValue__java_lang_Boolean(boxBool);
    let d = Double.m_doubleValue__java_lang_Double(boxD);
    let b = boxB.m_byteValue__();
    let f = boxF.m_floatValue__();
    let i = boxI.m_intValue__();
    let l = boxL.m_longValue__();
    let s = boxS.m_shortValue__();
    let c = boxC.m_charValue__();
    boxBool =
        this.m_box__boolean(Boolean.m_booleanValue__java_lang_Boolean(boxBool));
    boxD = this.m_box__double(Double.m_doubleValue__java_lang_Double(boxD));
    boxB = this.m_box__byte(boxB.m_byteValue__());
    boxF = this.m_box__float(boxF.m_floatValue__());
    boxI = this.m_box__int(boxI.m_intValue__());
    boxL = this.m_box__long(boxL.m_longValue__());
    boxS = this.m_box__short(boxS.m_shortValue__());
    boxC = this.m_box__char(boxC.m_charValue__());
    d = boxB.m_byteValue__();
    d = boxF.m_floatValue__();
    d = boxI.m_intValue__();
    d = $Primitives.$widenLongToDouble(boxL.m_longValue__());
    d = boxS.m_shortValue__();
    d = boxC.m_charValue__();
    this.m_takesAndReturnsPrimitiveDouble__double(boxB.m_byteValue__());
    this.m_takesAndReturnsPrimitiveDouble__double(boxF.m_floatValue__());
    this.m_takesAndReturnsPrimitiveDouble__double(boxI.m_intValue__());
    this.m_takesAndReturnsPrimitiveDouble__double(
        $Primitives.$widenLongToDouble(boxL.m_longValue__()));
    this.m_takesAndReturnsPrimitiveDouble__double(boxS.m_shortValue__());
    this.m_takesAndReturnsPrimitiveDouble__double(boxC.m_charValue__());
    let v = this.m_takesAndReturnsVoid__java_lang_Void(
        this.m_takesAndReturnsVoid__java_lang_Void(null));
    bool = Boolean.m_booleanValue__java_lang_Boolean(boxBool) &&
        Boolean.m_booleanValue__java_lang_Boolean(boxBool);
    d = Double.m_doubleValue__java_lang_Double(boxD) +
        Double.m_doubleValue__java_lang_Double(boxD);
    f = boxF.m_floatValue__() - boxF.m_floatValue__();
    i = boxI.m_intValue__() * boxI.m_intValue__();
    l = $LongUtils.$divide(boxL.m_longValue__(), boxL.m_longValue__());
    bool = !Boolean.m_booleanValue__java_lang_Boolean(boxBool);
    i = boxI.m_intValue__();
    i = -boxI.m_intValue__();
    i = ~boxI.m_intValue__();
    boxD = -Double.m_doubleValue__java_lang_Double(boxD);
    boxI = Integer.m_valueOf__int(-boxI.m_intValue__());
    switch (boxI.m_intValue__()) { default: }
    i += (boxI = Integer.m_valueOf__int(
              boxI.m_intValue__() + (i += boxI.m_intValue__())))
             .m_intValue__();
  }

  /**
   * @return {void}
   * @public
   */
  m_testUnboxingBoolean__() {
    let boxB1 = Boolean.$create__boolean(true);
    let boxB2 = Boolean.$create__boolean(false);
    let /** boolean */ br;
    let /** boolean */ boxr;
    boxr = $Equality.$same(boxB1, boxB2);
    br = $Equality.$same(boxB1, boxB2);
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    boxr = !$Equality.$same(boxB1, boxB2);
    br = !$Equality.$same(boxB1, boxB2);
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    boxr =
        !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) ^
           Boolean.m_booleanValue__java_lang_Boolean(boxB2));
    br =
        !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) ^
           Boolean.m_booleanValue__java_lang_Boolean(boxB2));
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    boxr =
        !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) &
           Boolean.m_booleanValue__java_lang_Boolean(boxB2));
    br =
        !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) &
           Boolean.m_booleanValue__java_lang_Boolean(boxB2));
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    boxr =
        !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) |
           Boolean.m_booleanValue__java_lang_Boolean(boxB2));
    br =
        !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) |
           Boolean.m_booleanValue__java_lang_Boolean(boxB2));
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    boxr = Boolean.m_booleanValue__java_lang_Boolean(boxB1) &&
        Boolean.m_booleanValue__java_lang_Boolean(boxB2);
    br = Boolean.m_booleanValue__java_lang_Boolean(boxB1) &&
        Boolean.m_booleanValue__java_lang_Boolean(boxB2);
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    boxr = Boolean.m_booleanValue__java_lang_Boolean(boxB1) ||
        Boolean.m_booleanValue__java_lang_Boolean(boxB2);
    br = Boolean.m_booleanValue__java_lang_Boolean(boxB1) ||
        Boolean.m_booleanValue__java_lang_Boolean(boxB2);
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    boxr = Boolean.m_booleanValue__java_lang_Boolean((boxB1 = boxB2));
    br = Boolean.m_booleanValue__java_lang_Boolean((boxB1 = boxB2));
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    boxr = Boolean.m_booleanValue__java_lang_Boolean(
        (boxB1 =
             !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) &
                Boolean.m_booleanValue__java_lang_Boolean((boxB2)))));
    br = Boolean.m_booleanValue__java_lang_Boolean(
        (boxB1 =
             !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) &
                Boolean.m_booleanValue__java_lang_Boolean((boxB2)))));
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    boxr = Boolean.m_booleanValue__java_lang_Boolean(
        (boxB1 =
             !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) |
                Boolean.m_booleanValue__java_lang_Boolean((boxB2)))));
    br = Boolean.m_booleanValue__java_lang_Boolean(
        (boxB1 =
             !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) |
                Boolean.m_booleanValue__java_lang_Boolean((boxB2)))));
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    boxr = Boolean.m_booleanValue__java_lang_Boolean(
        (boxB1 =
             !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) ^
                Boolean.m_booleanValue__java_lang_Boolean((boxB2)))));
    br = Boolean.m_booleanValue__java_lang_Boolean(
        (boxB1 =
             !!(Boolean.m_booleanValue__java_lang_Boolean(boxB1) ^
                Boolean.m_booleanValue__java_lang_Boolean((boxB2)))));
    $Asserts.$assert(boxr);
    $Asserts.$assert(br);
    let boxB = null;
    boxB = !Boolean.m_booleanValue__java_lang_Boolean(boxB);
    boxB = Boolean.m_booleanValue__java_lang_Boolean(boxB) &&
        Boolean.m_booleanValue__java_lang_Boolean(boxB);
    boxB = Boolean.m_booleanValue__java_lang_Boolean(boxB) ? boxB : boxB;
    if (Boolean.m_booleanValue__java_lang_Boolean(boxB)) {
    }
    let b = false;
    b =
        !!(b |
           Boolean.m_booleanValue__java_lang_Boolean((
               boxB = !!(
                   Boolean.m_booleanValue__java_lang_Boolean(boxB) |
                   (b = !!(
                        b |
                        Boolean.m_booleanValue__java_lang_Boolean((boxB))))))));
  }

  /**
   * @return {void}
   * @public
   */
  m_testUnboxingEquality__() {
    let boxB = Boolean.$create__boolean(true);
    let b = false;
    $Asserts.$assert($Equality.$same(boxB, boxB));
    $Asserts.$assert(Boolean.m_booleanValue__java_lang_Boolean(boxB) == b);
    $Asserts.$assert(b != b);
    $Asserts.$assert(b != Boolean.m_booleanValue__java_lang_Boolean(boxB));
    let boxI = Integer.$create__int(100);
    let i = 101;
    $Asserts.$assert($Equality.$same(boxI, boxI));
    $Asserts.$assert(boxI.m_intValue__() == i);
    $Asserts.$assert(i != i);
    $Asserts.$assert(i != boxI.m_intValue__());
  }

  /**
   * @return {void}
   * @public
   */
  m_testAssertStatement__() {
    let boxB = Boolean.$create__boolean(true);
    let b = true;
    $Asserts.$assert(Boolean.m_booleanValue__java_lang_Boolean(boxB));
    $Asserts.$assert(b);
  }

  /**
   * @return {void}
   * @public
   */
  m_testUnderflowOverflow__() {
    let /** Byte */ $value, /** Byte */ $value$1$;
    let boxedByte = Byte.m_valueOf__byte(Byte.f_MIN_VALUE__java_lang_Byte);
    $Asserts.$assert(
        ($value = boxedByte,
         boxedByte = Byte.m_valueOf__byte(
             $Primitives.$narrowIntToByte(boxedByte.m_byteValue__() - (1))),
         $value)
            .m_byteValue__() == Byte.f_MIN_VALUE__java_lang_Byte);
    $Asserts.$assert(
        boxedByte.m_byteValue__() == Byte.f_MAX_VALUE__java_lang_Byte);
    boxedByte = Byte.m_valueOf__byte(Byte.f_MIN_VALUE__java_lang_Byte);
    $Asserts.$assert(
        (boxedByte = Byte.m_valueOf__byte(
             $Primitives.$narrowIntToByte(boxedByte.m_byteValue__() - (1))))
            .m_byteValue__() == Byte.f_MAX_VALUE__java_lang_Byte);
    boxedByte = Byte.m_valueOf__byte(Byte.f_MAX_VALUE__java_lang_Byte);
    $Asserts.$assert(
        ($value$1$ = boxedByte,
         boxedByte = Byte.m_valueOf__byte(
             $Primitives.$narrowIntToByte(boxedByte.m_byteValue__() + (1))),
         $value$1$)
            .m_byteValue__() == Byte.f_MAX_VALUE__java_lang_Byte);
    $Asserts.$assert(
        boxedByte.m_byteValue__() == Byte.f_MIN_VALUE__java_lang_Byte);
    boxedByte = Byte.m_valueOf__byte(Byte.f_MAX_VALUE__java_lang_Byte);
    $Asserts.$assert(
        (boxedByte = Byte.m_valueOf__byte(
             $Primitives.$narrowIntToByte(boxedByte.m_byteValue__() + (1))))
            .m_byteValue__() == Byte.f_MIN_VALUE__java_lang_Byte);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SimpleAutoBoxing;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SimpleAutoBoxing);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    SimpleAutoBoxing.$clinit = function() {};
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Byte = goog.module.get('java.lang.Byte$impl');
    Character = goog.module.get('java.lang.Character$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Float = goog.module.get('java.lang.Float$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    Long = goog.module.get('java.lang.Long$impl');
    Short = goog.module.get('java.lang.Short$impl');
    Void = goog.module.get('java.lang.Void$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $LongUtils = goog.module.get('vmbootstrap.LongUtils$impl');
    $Primitives = goog.module.get('vmbootstrap.Primitives$impl');
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    $byte = goog.module.get('vmbootstrap.primitives.$byte$impl');
    $char = goog.module.get('vmbootstrap.primitives.$char$impl');
    $double = goog.module.get('vmbootstrap.primitives.$double$impl');
    $float = goog.module.get('vmbootstrap.primitives.$float$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    $long = goog.module.get('vmbootstrap.primitives.$long$impl');
    $short = goog.module.get('vmbootstrap.primitives.$short$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simpleautoboxing_SimpleAutoBoxing() {
  }
};

$Util.$setClassMetadata(
    SimpleAutoBoxing,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.simpleautoboxing.SimpleAutoBoxing'));



/**
 * Export class.
 */
exports = SimpleAutoBoxing;
//# sourceMappingURL=SimpleAutoBoxing.js.map