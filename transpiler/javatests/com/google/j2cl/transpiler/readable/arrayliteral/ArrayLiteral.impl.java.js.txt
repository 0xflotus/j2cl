/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.arrayliteral.ArrayLiteral.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.arrayliteral.ArrayLiteral$impl');


let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class ArrayLiteral extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!ArrayLiteral}
   * @public
   */
  static $create__() {
    ArrayLiteral.$clinit();
    let $instance = new ArrayLiteral();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_arrayliteral_ArrayLiteral__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_arrayliteral_ArrayLiteral__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_arrayliteral_ArrayLiteral();
  }

  /**
   * @return {void}
   * @public
   */
  m_main__() {
    let object = java_lang_Object.$create__();
    let ints = /**@type {!Array<number>} */ ($Arrays.$init([0, 1, 2], $int));
    let objects2d = /**@type {!Array<Array<*>>} */ ($Arrays.$init(
        [[object, object], [object, object]], java_lang_Object, 2));
    let partial =
        /**@type {!Array<Array<number>>} */ ($Arrays.$init([], $int, 2));
    let unbalanced = /**@type {!Array<Array<*>>} */ (
        $Arrays.$init([[object, object], null], java_lang_Object, 2));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof ArrayLiteral;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, ArrayLiteral);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_arrayliteral_ArrayLiteral() {}
};

$Util.$setClassMetadata(
    ArrayLiteral,
    'com.google.j2cl.transpiler.readable.arrayliteral.ArrayLiteral');



/**
 * Export class.
 */
exports = ArrayLiteral;
//# sourceMappingURL=ArrayLiteral.js.map