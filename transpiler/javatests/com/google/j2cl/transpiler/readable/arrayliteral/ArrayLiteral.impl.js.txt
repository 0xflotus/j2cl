/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.arrayliteral.ArrayLiteral.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.arrayliteral.ArrayLiteral$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class ArrayLiteral extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_arrayliteral_ArrayLiteral() {}

  /**
   * A particular Java constructor as a factory method.
   * @return {!ArrayLiteral}
   * @public
   * @nocollapse
   */
  static $create() {
    ArrayLiteral.$clinit();
    let instance = new ArrayLiteral;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_arrayliteral_ArrayLiteral();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_arrayliteral_ArrayLiteral() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_arrayliteral_ArrayLiteral();
  }

  /**
   * @return {void}
   * @public
   */
  m_main() {
    let object = Object.$create();
    let ints = /**@type {Array<number>} */ ($Arrays.$init([0, 1, 2], $int));
    let objects2d = /**@type {Array<Array<*>>} */ (
        $Arrays.$init([[object, object], [object, object]], Object, 2));
    let partial =
        /**@type {Array<Array<number>>} */ ($Arrays.$init([], $int, 2));
    let unbalanced = /**@type {Array<Array<*>>} */ (
        $Arrays.$init([[object, object], null], Object, 2));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof ArrayLiteral; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, ArrayLiteral);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    ArrayLiteral.$clinit();
    if (!ArrayLiteral.$classArrayLiteral_) {
      ArrayLiteral.$classArrayLiteral_ = Class.$createForClass(
          $Util.$generateId('ArrayLiteral'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.arrayliteral.ArrayLiteral'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.arrayliteral.ArrayLiteral'));
    }
    return ArrayLiteral.$classArrayLiteral_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return ArrayLiteral.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
ArrayLiteral.$classArrayLiteral_ = null;



/**
 * Export class.
 */
exports = ArrayLiteral;
