/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.foreachstatement.ForEachStatement.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.foreachstatement.ForEachStatement$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Iterable = goog.forwardDeclare('gen.java.lang.Iterable$impl');
let Throwable = goog.forwardDeclare('gen.java.lang.Throwable$impl');
let Iterator = goog.forwardDeclare('gen.java.util.Iterator$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');
let $void = goog.forwardDeclare('vmbootstrap.primitives.$void$impl');


class ForEachStatement extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_foreachstatement_ForEachStatement() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!ForEachStatement}
   * @public
   * @nocollapse
   */
  static $create() {
    ForEachStatement.$clinit();
    let instance = new ForEachStatement;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_foreachstatement_ForEachStatement();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_foreachstatement_ForEachStatement() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_foreachstatement_ForEachStatement();
  }

  /**
   * @param {Iterable<Throwable>} iterable
   * @return {void}
   * @public
   */
  m_test__java_lang_Iterable(iterable) {
    for (let $iterator = iterable.m_iterator(); $iterator.m_hasNext();) {
      let t = $iterator.m_next();
      t.m_toString();
    }
    for (let $array = /**@type {Array<Throwable>} */ (
                 $Arrays.$create([10], Throwable)),
             $index = 0;
         $index < $array.length; $index++) {
      let t = $array[$index];
      t.m_toString();
    }
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof ForEachStatement; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, ForEachStatement);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    ForEachStatement.$clinit();
    if (!ForEachStatement.$classForEachStatement_) {
      ForEachStatement.$classForEachStatement_ = Class.$createForClass(
          $Util.$generateId('ForEachStatement'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.foreachstatement.ForEachStatement'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.foreachstatement.ForEachStatement'));
    }
    return ForEachStatement.$classForEachStatement_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return ForEachStatement.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    Iterable = goog.module.get('gen.java.lang.Iterable$impl');
    Throwable = goog.module.get('gen.java.lang.Throwable$impl');
    Iterator = goog.module.get('gen.java.util.Iterator$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    $void = goog.module.get('vmbootstrap.primitives.$void$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
ForEachStatement.$classForEachStatement_ = null;



/**
 * Export class.
 */
exports = ForEachStatement;
