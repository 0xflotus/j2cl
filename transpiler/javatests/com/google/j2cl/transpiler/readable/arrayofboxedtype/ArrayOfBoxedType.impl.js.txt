/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.arrayofboxedtype.ArrayOfBoxedType.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.arrayofboxedtype.ArrayOfBoxedType$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Boolean = goog.forwardDeclare('gen.java.lang.Boolean$impl');
let Byte = goog.forwardDeclare('gen.java.lang.Byte$impl');
let Character = goog.forwardDeclare('gen.java.lang.Character$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Double = goog.forwardDeclare('gen.java.lang.Double$impl');
let Float = goog.forwardDeclare('gen.java.lang.Float$impl');
let Integer = goog.forwardDeclare('gen.java.lang.Integer$impl');
let Long = goog.forwardDeclare('gen.java.lang.Long$impl');
let Number = goog.forwardDeclare('gen.java.lang.Number$impl');
let Short = goog.forwardDeclare('gen.java.lang.Short$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');


class ArrayOfBoxedType extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_arrayofboxedtype_ArrayOfBoxedType() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!ArrayOfBoxedType}
   * @public
   * @nocollapse
   */
  static $create() {
    ArrayOfBoxedType.$clinit();
    let instance = new ArrayOfBoxedType;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_arrayofboxedtype_ArrayOfBoxedType();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_arrayofboxedtype_ArrayOfBoxedType() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_arrayofboxedtype_ArrayOfBoxedType();
  }

  /**
   * @return {void}
   * @public
   */
  m_test() {
    let numberArray =
        /**@type {Array<(Number|?number)>} */ ($Arrays.$create([2], Number));
    let byteArray = /**@type {Array<Byte>} */ ($Arrays.$create([2], Byte));
    let doublerArray =
        /**@type {Array<?number>} */ ($Arrays.$create([2], Double));
    let floatArray = /**@type {Array<Float>} */ ($Arrays.$create([2], Float));
    let integerArray =
        /**@type {Array<Integer>} */ ($Arrays.$create([2], Integer));
    let longArray = /**@type {Array<Long>} */ ($Arrays.$create([2], Long));
    let shortArray = /**@type {Array<Short>} */ ($Arrays.$create([2], Short));
    let characterArray =
        /**@type {Array<Character>} */ ($Arrays.$create([2], Character));
    let booleanArray =
        /**@type {Array<?boolean>} */ ($Arrays.$create([2], Boolean));
    let nArray = /**@type {Array<(Number|?number)>} */ (
        $Arrays.$castTo(byteArray, Number, 1));
    let bArray =
        /**@type {Array<Byte>} */ ($Arrays.$castTo(byteArray, Byte, 1));
    let dArray =
        /**@type {Array<?number>} */ ($Arrays.$castTo(byteArray, Double, 1));
    let fArray =
        /**@type {Array<Float>} */ ($Arrays.$castTo(byteArray, Float, 1));
    let iArray =
        /**@type {Array<Integer>} */ ($Arrays.$castTo(byteArray, Integer, 1));
    let lArray =
        /**@type {Array<Long>} */ ($Arrays.$castTo(byteArray, Long, 1));
    let sArray =
        /**@type {Array<Short>} */ ($Arrays.$castTo(byteArray, Short, 1));
    let cArray = /**@type {Array<Character>} */ (
        $Arrays.$castTo(byteArray, Character, 1));
    let boolArray =
        /**@type {Array<?boolean>} */ ($Arrays.$castTo(byteArray, Boolean, 1));
    $Arrays.$set(numberArray, 1, Integer.$create__int(1));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof ArrayOfBoxedType; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, ArrayOfBoxedType);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    ArrayOfBoxedType.$clinit();
    if (!ArrayOfBoxedType.$classArrayOfBoxedType_) {
      ArrayOfBoxedType.$classArrayOfBoxedType_ = Class.$createForClass(
          $Util.$generateId('ArrayOfBoxedType'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.arrayofboxedtype.ArrayOfBoxedType'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.arrayofboxedtype.ArrayOfBoxedType'));
    }
    return ArrayOfBoxedType.$classArrayOfBoxedType_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return ArrayOfBoxedType.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   * @nocollapse
   */
  static $clinit() {
    Boolean = goog.module.get('gen.java.lang.Boolean$impl');
    Byte = goog.module.get('gen.java.lang.Byte$impl');
    Character = goog.module.get('gen.java.lang.Character$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    Double = goog.module.get('gen.java.lang.Double$impl');
    Float = goog.module.get('gen.java.lang.Float$impl');
    Integer = goog.module.get('gen.java.lang.Integer$impl');
    Long = goog.module.get('gen.java.lang.Long$impl');
    Number = goog.module.get('gen.java.lang.Number$impl');
    Short = goog.module.get('gen.java.lang.Short$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
ArrayOfBoxedType.$classArrayOfBoxedType_ = null;



/**
 * Export class.
 */
exports = ArrayOfBoxedType;
