/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.lambdanestedscope.LambdaNestedScope$$Lambda$Runner$0.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.lambdanestedscope.LambdaNestedScope.$Lambda$Runner$0$impl');


const Runner = goog.require('com.google.j2cl.transpiler.readable.lambdanestedscope.LambdaNestedScope.Runner$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let LambdaNestedScope = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdanestedscope.LambdaNestedScope$impl');
let $1 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdanestedscope.LambdaNestedScope.$1$impl');


/**
 * @implements {Runner}
 */
class $Lambda$Runner$0 extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
    /** @public {LambdaNestedScope} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope_$Lambda$Runner$0 =
        null;
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {LambdaNestedScope} $outer_this
   * @return {!$Lambda$Runner$0}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope(
      $outer_this) {
    $Lambda$Runner$0.$clinit();
    let $instance = new $Lambda$Runner$0();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope_$Lambda$Runner$0__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope(
            $outer_this);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {LambdaNestedScope} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope_$Lambda$Runner$0__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope_$Lambda$Runner$0 =
        $outer_this;
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope_$Lambda$Runner$0();
  }

  /**
   * Lambda implementation method.
   * @override
   * @return {*}
   * @public
   */
  m_run__() {
    return $1.$create__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope(
        this.f_$outer_this__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope_$Lambda$Runner$0);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $Lambda$Runner$0;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $Lambda$Runner$0);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Lambda$Runner$0.$clinit = function() {};
    LambdaNestedScope = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdanestedscope.LambdaNestedScope$impl');
    $1 = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdanestedscope.LambdaNestedScope.$1$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_lambdanestedscope_LambdaNestedScope_$Lambda$Runner$0() {
  }
};

$Util.$setClassMetadata(
    $Lambda$Runner$0,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.lambdanestedscope.LambdaNestedScope$$Lambda$Runner$0'));


Runner.$markImplementor($Lambda$Runner$0);


/**
 * Export class.
 */
exports = $Lambda$Runner$0;
//# sourceMappingURL=LambdaNestedScope$$Lambda$Runner$0.js.map