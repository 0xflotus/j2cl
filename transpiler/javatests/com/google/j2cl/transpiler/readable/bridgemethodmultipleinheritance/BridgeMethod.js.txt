/**
 * Transpiled from
 * third_party/java_src/j2cl/transpiler/javatests/com/google/j2cl/transpiler/readable/bridgemethodmultipleinheritance/BridgeMethod.java.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.BridgeMethodModule');


let AssertionError = goog.require('gen.java.lang.AssertionErrorModule').AssertionError;
let Class = goog.require('gen.java.lang.CoreModule').Class;
let Object = goog.require('gen.java.lang.CoreModule').Object;
let Error = goog.require('gen.java.lang.ErrorModule').Error;
let Number = goog.require('gen.java.lang.NumberModule').Number;
let $Util = goog.require('nativebootstrap.UtilModule').Util;
let $Casts = goog.require('vmbootstrap.CastsModule').Casts;


/**
 * @interface
 * @template C_T, C_S
 */
class SomeInterface {
  /**
   * @param {C_T} t
   * @param {C_S} s
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Object(t, s) {}

  /**
   * @param {C_T} t
   * @param {(Number|?number)} n
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Number(t, n) {}

  /**
   * Marks the provided class as implementing this interface.
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_SomeInterface =
        true;
  }

  /**
   * Returns whether the provided instance is of a class that implements this
   * interface.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance != null &&
           instance
               .$implements__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_SomeInterface;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
           classConstructor.prototype
               .$implements__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_SomeInterface;
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!SomeInterface.$classSomeInterface) {
      SomeInterface.$classSomeInterface = Class.$createForInterface(
          $Util.$generateId('SomeInterface'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.SomeInterface'),
          null,
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.SomeInterface'));
    }
    return SomeInterface.$classSomeInterface;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() {}
}
;


SomeInterface.$markImplementor(/** @type {Function} */ (SomeInterface));

/**
 * Export class.
 */
exports.SomeInterface = SomeInterface;



/**
 * @template C_T, C_S
 */
class SuperParent extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_SuperParent() {
  }

  /**
   * @param {C_T} t
   * @param {C_S} s
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Object(t, s) {}

  /**
   * A particular Java constructor as a factory method.
   * @template C_T, C_S
   * @return {!SuperParent<C_T, C_S>}
   * @package
   * @nocollapse
   */
  static $create() {
    SuperParent.$clinit();
    let instance = new SuperParent;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_SuperParent();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_SuperParent() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_SuperParent();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof SuperParent; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SuperParent);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!SuperParent.$classSuperParent) {
      SuperParent.$classSuperParent = Class.$createForClass(
          $Util.$generateId('SuperParent'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.SuperParent'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.SuperParent'));
    }
    return SuperParent.$classSuperParent;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.SuperParent = SuperParent;



/**
 * @template C_T
 * @extends {SuperParent<C_T, (Number|?number)>}
 */
class Parent extends SuperParent {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_Parent() {
  }

  /**
   * @param {C_T} t
   * @param {(Number|?number)} s
   * @return {void}
   * @public
   */
  m_foo__java_lang_Error__java_lang_Number(t, s) {}

  /**
   * @template M_T
   * @param {M_T} t
   * @return {void}
   * @public
   */
  m_bar__java_lang_Number(t) {}

  /**
   * @template M_T
   * @param {M_T} t
   * @return {void}
   * @public
   */
  m_fun__java_lang_Object(t) {}

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @return {!Parent<C_T>}
   * @package
   * @nocollapse
   */
  static $create() {
    Parent.$clinit();
    let instance = new Parent;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_Parent();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_Parent() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_SuperParent();
    this.$init__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_Parent();
  }

  /**
   * Synthetic method.
   * @param {C_T} arg0
   * @param {(Number|?number)} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Object(arg0, arg1) {
    this.m_foo__java_lang_Error__java_lang_Number(
        /**@type {Error} */ ($Casts.to(arg0, Error.$isInstance(arg0))),
        /**@type {(Number|?number)} */ (
            $Casts.to(arg1, Number.$isInstance(arg1))));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof Parent; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Parent);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!Parent.$classParent) {
      Parent.$classParent = Class.$createForClass(
          $Util.$generateId('Parent'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.Parent'),
          SuperParent.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.Parent'));
    }
    return Parent.$classParent;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { SuperParent.$clinit(); }
}
;



/**
 * Export class.
 */
exports.Parent = Parent;



/**
 * @extends {Parent<AssertionError>}
 * @implements {SomeInterface<AssertionError, (Number|?number)>}
 */
class BridgeMethod extends Parent {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_BridgeMethod() {
  }

  /**
   * @param {AssertionError} a
   * @param {(Number|?number)} n
   * @return {void}
   * @public
   */
  m_foo__java_lang_AssertionError__java_lang_Number(a, n) {}

  /**
   * @override
   * @param {(Number|?number)} t
   * @return {void}
   * @public
   */
  m_bar__java_lang_Number(t) {}

  /**
   * @param {(Number|?number)} t
   * @return {void}
   * @public
   */
  m_fun__java_lang_Number(t) {}

  /**
   * A particular Java constructor as a factory method.
   * @return {!BridgeMethod}
   * @public
   * @nocollapse
   */
  static $create() {
    BridgeMethod.$clinit();
    let instance = new BridgeMethod;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_BridgeMethod();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_BridgeMethod() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_Parent();
    this.$init__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_BridgeMethod();
  }

  /**
   * Synthetic method.
   * @param {AssertionError} arg0
   * @param {(Number|?number)} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Error__java_lang_Number(arg0, arg1) {
    this.m_foo__java_lang_AssertionError__java_lang_Number(
        /**@type {AssertionError} */ (
            $Casts.to(arg0, AssertionError.$isInstance(arg0))),
        arg1);
  }

  /**
   * Synthetic method.
   * @param {AssertionError} arg0
   * @param {(Number|?number)} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Object(arg0, arg1) {
    this.m_foo__java_lang_AssertionError__java_lang_Number(
        /**@type {AssertionError} */ (
            $Casts.to(arg0, AssertionError.$isInstance(arg0))),
        /**@type {(Number|?number)} */ (
            $Casts.to(arg1, Number.$isInstance(arg1))));
  }

  /**
   * Synthetic method.
   * @param {AssertionError} arg0
   * @param {(Number|?number)} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Number(arg0, arg1) {
    this.m_foo__java_lang_AssertionError__java_lang_Number(
        /**@type {AssertionError} */ (
            $Casts.to(arg0, AssertionError.$isInstance(arg0))),
        arg1);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof BridgeMethod; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, BridgeMethod);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!BridgeMethod.$classBridgeMethod) {
      BridgeMethod.$classBridgeMethod = Class.$createForClass(
          $Util.$generateId('BridgeMethod'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.BridgeMethod'),
          Parent.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.BridgeMethod'));
    }
    return BridgeMethod.$classBridgeMethod;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Parent.$clinit(); }
}
;


SomeInterface.$markImplementor(BridgeMethod);



/**
 * Export class.
 */
exports.BridgeMethod = BridgeMethod;
