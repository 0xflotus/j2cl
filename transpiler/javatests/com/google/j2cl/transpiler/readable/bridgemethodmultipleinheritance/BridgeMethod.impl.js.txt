/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.BridgeMethod.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.BridgeMethod$impl');


let Parent = goog.require('gen.com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.Parent$impl');
let SomeInterface = goog.require('gen.com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.SomeInterface$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let AssertionError = goog.forwardDeclare('gen.java.lang.AssertionError$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Number = goog.forwardDeclare('gen.java.lang.Number$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @extends {Parent<AssertionError>}
 * @implements {SomeInterface<AssertionError, (Number|?number)>}
 */
class BridgeMethod extends Parent {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!BridgeMethod}
   * @public
   */
  static $create() {
    BridgeMethod.$clinit();
    let $instance = new BridgeMethod;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_BridgeMethod();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_BridgeMethod() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_Parent();
    this.$init__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_BridgeMethod();
  }

  /**
   * @param {AssertionError} a
   * @param {(Number|?number)} n
   * @return {void}
   * @public
   */
  m_foo__java_lang_AssertionError__java_lang_Number(a, n) {}

  /**
   * @override
   * @param {(Number|?number)} t
   * @return {void}
   * @public
   */
  m_bar__java_lang_Number(t) {}

  /**
   * @param {(Number|?number)} t
   * @return {void}
   * @public
   */
  m_fun__java_lang_Number(t) {}

  /**
   * Bridge method.
   * @param {AssertionError} arg0
   * @param {(Number|?number)} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Error__java_lang_Number(arg0, arg1) {
    this.m_foo__java_lang_AssertionError__java_lang_Number(
        /**@type {AssertionError} */ ($Casts.to(arg0, AssertionError)), arg1);
  }

  /**
   * Bridge method.
   * @param {AssertionError} arg0
   * @param {(Number|?number)} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Object(arg0, arg1) {
    this.m_foo__java_lang_AssertionError__java_lang_Number(
        /**@type {AssertionError} */ ($Casts.to(arg0, AssertionError)),
        /**@type {(Number|?number)} */ ($Casts.to(arg1, Number)));
  }

  /**
   * Bridge method.
   * @param {AssertionError} arg0
   * @param {(Number|?number)} arg1
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Number(arg0, arg1) {
    this.m_foo__java_lang_AssertionError__java_lang_Number(
        /**@type {AssertionError} */ ($Casts.to(arg0, AssertionError)), arg1);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof BridgeMethod; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, BridgeMethod);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    BridgeMethod.$clinit();
    if (!BridgeMethod.$classBridgeMethod_) {
      BridgeMethod.$classBridgeMethod_ = Class.$createForClass(
          $Util.$generateId('BridgeMethod'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.BridgeMethod'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.BridgeMethod'));
    }
    return BridgeMethod.$classBridgeMethod_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return BridgeMethod.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    AssertionError = goog.module.get('gen.java.lang.AssertionError$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    Number = goog.module.get('gen.java.lang.Number$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    Parent.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_BridgeMethod() {
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
BridgeMethod.$classBridgeMethod_ = null;


SomeInterface.$markImplementor(BridgeMethod);


/**
 * Export class.
 */
exports = BridgeMethod;
//# sourceMappingURL=BridgeMethod.js.map