/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.SuperParent.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.SuperParent$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template C_T, C_S
 */
class SuperParent extends java_lang_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'SuperParent()'.
   * @template C_T, C_S
   * @return {!SuperParent<C_T, C_S>}
   * @public
   */
  static $create__() {
    SuperParent.$clinit();
    let $instance = new SuperParent();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_SuperParent__();
    return $instance;
  }

  /**
   * Initialization from constructor 'SuperParent()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethodmultipleinheritance_SuperParent__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {C_T} t
   * @param {C_S} s
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Object(t, s) {}

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SuperParent;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SuperParent);
  }

  /**
   * @public
   */
  static $clinit() {
    SuperParent.$clinit = function() {};
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    SuperParent,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgemethodmultipleinheritance.SuperParent'));



exports = SuperParent;
//# sourceMappingURL=SuperParent.js.map