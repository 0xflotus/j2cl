/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.supermethodcall.Parent.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.supermethodcall.Parent$impl');


const GrandParent = goog.require('com.google.j2cl.transpiler.readable.supermethodcall.GrandParent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class Parent extends GrandParent {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'Parent()'.
   * @return {!Parent}
   * @public
   */
  static $create__() {
    Parent.$clinit();
    let $instance = new Parent();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_supermethodcall_Parent__();
    return $instance;
  }

  /**
   * Initialization from constructor 'Parent()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_supermethodcall_Parent__() {
    this.$ctor__com_google_j2cl_transpiler_readable_supermethodcall_GrandParent__();
  }

  /**
   * @return {void}
   * @public
   */
  m_parentSimplest__() {}

  /**
   * @param {number} foo
   * @return {void}
   * @public
   */
  m_parentWithParams__int(foo) {}

  /**
   * @return {*}
   * @public
   */
  m_parentWithChangingReturn__() {
    return null;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Parent;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Parent);
  }

  /**
   * @public
   */
  static $clinit() {
    Parent.$clinit = function() {};
    GrandParent.$clinit();
  }
};

$Util.$setClassMetadata(
    Parent,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.supermethodcall.Parent'));



exports = Parent;
//# sourceMappingURL=Parent.js.map