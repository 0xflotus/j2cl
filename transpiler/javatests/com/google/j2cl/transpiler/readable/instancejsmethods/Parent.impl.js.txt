/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.instancejsmethods.Parent.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.instancejsmethods.Parent$impl');


let SuperParent = goog.require('gen.com.google.j2cl.transpiler.readable.instancejsmethods.SuperParent$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Parent extends SuperParent {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_instancejsmethods_Parent() {}

  /**
   * A particular Java constructor as a factory method.
   * @return {!Parent}
   * @public
   * @nocollapse
   */
  static $create() {
    Parent.$clinit();
    let instance = new Parent;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_instancejsmethods_Parent();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_instancejsmethods_Parent() {
    this.$ctor__com_google_j2cl_transpiler_readable_instancejsmethods_SuperParent();
    this.$init__com_google_j2cl_transpiler_readable_instancejsmethods_Parent();
  }

  /**
   * @param {number} a
   * @param {number} b
   * @return {number}
   * @public
   */
  sum(a, b) { return a + b; }

  /**
   * @param {number} a
   * @param {number} b
   * @return {number}
   * @public
   */
  bar(a, b) { return a * b; }

  /**
   * @param {number} a
   * @return {number}
   * @public
   */
  myFoo(a) { return a; }

  /**
   * Synthetic method.
   * @override
   * @param {number} arg0
   * @param {number} arg1
   * @return {number}
   * @public
   */
  m_bar__int__int(arg0, arg1) { return this.bar(arg0, arg1); }

  /**
   * Synthetic method.
   * @override
   * @param {number} arg0
   * @param {number} arg1
   * @return {number}
   * @public
   */
  m_fun__int__int(arg0, arg1) { return this.sum(arg0, arg1); }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof Parent; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Parent);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    Parent.$clinit();
    if (!Parent.$classParent_) {
      Parent.$classParent_ = Class.$createForClass(
          $Util.$generateId('Parent'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.instancejsmethods.Parent'),
          SuperParent.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.instancejsmethods.Parent'));
    }
    return Parent.$classParent_;
  }

  /**
   * Runs inline static field initializers.
   * @public
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    SuperParent.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
Parent.$classParent_ = null;



/**
 * Export class.
 */
exports = Parent;
