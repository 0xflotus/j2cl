/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.instancejsmethods.Parent.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.instancejsmethods.Parent$impl');


const SuperParent = goog.require('com.google.j2cl.transpiler.readable.instancejsmethods.SuperParent$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Parent extends SuperParent {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'Parent()'.
   * @return {!Parent}
   * @public
   */
  static $create__() {
    Parent.$clinit();
    let $instance = new Parent();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_instancejsmethods_Parent__();
    return $instance;
  }

  /**
   * Initialization from constructor 'Parent()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_instancejsmethods_Parent__() {
    this.$ctor__com_google_j2cl_transpiler_readable_instancejsmethods_SuperParent__();
    this.$init__com_google_j2cl_transpiler_readable_instancejsmethods_Parent();
  }

  /**
   * @param {number} a
   * @param {number} b
   * @return {number}
   * @public
   */
  sum(a, b) {
    return a + b;
  }

  /**
   * @param {number} a
   * @param {number} b
   * @return {number}
   * @public
   */
  bar(a, b) {
    return a * b;
  }

  /**
   * @param {number} a
   * @return {number}
   * @public
   */
  myFoo(a) {
    return a;
  }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @param {number} arg0
   * @param {number} arg1
   * @return {number}
   * @public
   */
  m_bar__int__int(arg0, arg1) {
    return this.bar(arg0, arg1);
  }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @param {number} arg0
   * @param {number} arg1
   * @return {number}
   * @public
   */
  m_fun__int__int(arg0, arg1) {
    return this.sum(arg0, arg1);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Parent;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Parent);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Parent.$clinit = function() {};
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    SuperParent.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_instancejsmethods_Parent() {}
};

$Util.$setClassMetadata(
    Parent,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.instancejsmethods.Parent'));



/**
 * Export class.
 */
exports = Parent;
//# sourceMappingURL=Parent.js.map