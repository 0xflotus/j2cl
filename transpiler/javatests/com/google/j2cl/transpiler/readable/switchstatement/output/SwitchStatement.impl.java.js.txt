/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.switchstatement.SwitchStatement.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.switchstatement.SwitchStatement$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Numbers = goog.forwardDeclare('com.google.j2cl.transpiler.readable.switchstatement.Numbers$impl');
let $InternalPreconditions = goog.forwardDeclare('javaemul.internal.InternalPreconditions$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');


class SwitchStatement extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'SwitchStatement()'.
   * @return {!SwitchStatement}
   * @public
   */
  static $create__() {
    SwitchStatement.$clinit();
    let $instance = new SwitchStatement();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_switchstatement_SwitchStatement__();
    return $instance;
  }

  /**
   * Initialization from constructor 'SwitchStatement()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_switchstatement_SwitchStatement__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_switchstatement_SwitchStatement();
  }

  /**
   * @return {void}
   * @public
   */
  m_main__() {
    switch ($InternalPreconditions.m_checkNotNull__java_lang_Object('one')) {
      case 'one':
      case 'two':
        break;
      default:
        return;
    }
    switch (49 /* '1' */) {
      case 49 /* '1' */:
      case 50 /* '2' */:
        break;
      default:
        return;
    }
    switch (1) {
      case 1:
      case 2:
        break;
      default:
        return;
    }
    switch (
        Numbers
            .f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers
            .ordinal()) {
      case Numbers
          .$ordinal$f_ONE__com_google_j2cl_transpiler_readable_switchstatement_Numbers:
      case Numbers
          .$ordinal$f_TWO__com_google_j2cl_transpiler_readable_switchstatement_Numbers:
        break;
      default:
        return;
    }
  }

  /**
   * @return {void}
   * @public
   */
  static m_testSwitchVariableDeclarations___$p_com_google_j2cl_transpiler_readable_switchstatement_SwitchStatement() {
    let /** number */ unassigned, /** number */ unassigned2, /** number */ i,
        /** number */ j, /** number */ b, /** number */ i$1$;
    SwitchStatement.$clinit();
    switch (3) {
      case 1:
        null;
        i = 0;
        (j = 2, b = j + 1);
        break;
      case 3:
        i = 3;
        $Asserts.$assert(i == 3);
        return;
    }
    switch (5) {
      case 5:
        i$1$ = 1;
        break;
    }
    $Asserts.$assert(false);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SwitchStatement;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SwitchStatement);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    SwitchStatement.$clinit = function() {};
    Numbers = goog.module.get(
        'com.google.j2cl.transpiler.readable.switchstatement.Numbers$impl');
    $InternalPreconditions =
        goog.module.get('javaemul.internal.InternalPreconditions$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_switchstatement_SwitchStatement() {
  }
};

$Util.$setClassMetadata(
    SwitchStatement,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.switchstatement.SwitchStatement'));



/**
 * Export class.
 */
exports = SwitchStatement;
//# sourceMappingURL=SwitchStatement.js.map