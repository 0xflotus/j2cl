/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics$$Lambda$Function$4.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics.$Lambda$Function$4$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const java_util_function_Function = goog.require('java.util.function.Function$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let LambdaWithGenerics = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics$impl');
let $Overlay = goog.forwardDeclare('java.util.function.Function.$Overlay$impl');


/**
 * @implements {java_util_function_Function<*, *>}
 */
class $Lambda$Function$4 extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'new Function()'.
   * @return {!$Lambda$Function$4}
   * @public
   */
  static $create__() {
    $Lambda$Function$4.$clinit();
    let $instance = new $Lambda$Function$4();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics_$Lambda$Function$4__();
    return $instance;
  }

  /**
   * Initialization from constructor 'new Function()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics_$Lambda$Function$4__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics_$Lambda$Function$4();
  }

  /**
   * Lambda implementation method.
   * @override
   * @param {*} l
   * @return {*}
   * @public
   */
  m_apply__java_lang_Object(l) {
    return LambdaWithGenerics.m_m__();
  }

  /**
   * Default method forwarding stub.
   * @override
   * @template M_V
   * @param {java_util_function_Function<?, ?>} arg0
   * @return {java_util_function_Function<*, M_V>}
   * @public
   */
  m_andThen__java_util_function_Function(arg0) {
    return /**@type {java_util_function_Function<*, *>} */ (
        $Overlay
            .m_andThen__java_util_function_Function__java_util_function_Function(
                this, arg0));
  }

  /**
   * Default method forwarding stub.
   * @override
   * @template M_V
   * @param {java_util_function_Function<?, ?>} arg0
   * @return {java_util_function_Function<M_V, *>}
   * @public
   */
  m_compose__java_util_function_Function(arg0) {
    return /**@type {java_util_function_Function<*, *>} */ (
        $Overlay
            .m_compose__java_util_function_Function__java_util_function_Function(
                this, arg0));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $Lambda$Function$4;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $Lambda$Function$4);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Lambda$Function$4.$clinit = function() {};
    LambdaWithGenerics = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics$impl');
    $Overlay = goog.module.get('java.util.function.Function.$Overlay$impl');
    java_lang_Object.$clinit();
    java_util_function_Function.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics_$Lambda$Function$4() {
  }
};

$Util.$setClassMetadata(
    $Lambda$Function$4,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics$$Lambda$Function$4'));


java_util_function_Function.$markImplementor($Lambda$Function$4);


/**
 * Export class.
 */
exports = $Lambda$Function$4;
//# sourceMappingURL=LambdaWithGenerics$$Lambda$Function$4.js.map