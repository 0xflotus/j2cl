/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics$0foo.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics$0foo$impl');


let MyInterface = goog.require('gen.com.google.j2cl.transpiler.readable.lambdawithgenerics.MyInterface$impl');
let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let LambdaWithGenerics = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Error = goog.forwardDeclare('gen.java.lang.Error$impl');


/**
 * @implements {MyInterface<Error>}
 */
class LambdaWithGenerics$0foo extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {LambdaWithGenerics}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics$0foo =
        null;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics$0foo() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {LambdaWithGenerics} $outer_this
   * @return {!LambdaWithGenerics$0foo}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics(
      $outer_this) {
    LambdaWithGenerics$0foo.$clinit();
    let instance = new LambdaWithGenerics$0foo;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics$0foo__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics(
            $outer_this);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {LambdaWithGenerics} $outer_this
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics$0foo__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics$0foo =
        $outer_this;
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_lambdawithgenerics_LambdaWithGenerics$0foo();
  }

  /**
   * @param {Error} i
   * @return {Error}
   * @public
   */
  lambda0foo(i) { return i; }

  /**
   * @override
   * @param {Error} arg0
   * @return {Error}
   * @public
   */
  m_foo__java_lang_Object(arg0) { return this.lambda0foo(arg0); }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof LambdaWithGenerics$0foo;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, LambdaWithGenerics$0foo);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    LambdaWithGenerics$0foo.$clinit();
    if (!LambdaWithGenerics$0foo.$classLambdaWithGenerics$0foo_) {
      LambdaWithGenerics$0foo
          .$classLambdaWithGenerics$0foo_ = Class.$createForClass(
          $Util.$generateId('0foo'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics$0foo'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics.0foo'));
    }
    return LambdaWithGenerics$0foo.$classLambdaWithGenerics$0foo_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return LambdaWithGenerics$0foo.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    LambdaWithGenerics = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.lambdawithgenerics.LambdaWithGenerics$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    Error = goog.module.get('gen.java.lang.Error$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
LambdaWithGenerics$0foo.$classLambdaWithGenerics$0foo_ = null;


MyInterface.$markImplementor(LambdaWithGenerics$0foo);



/**
 * Export class.
 */
exports = LambdaWithGenerics$0foo;
