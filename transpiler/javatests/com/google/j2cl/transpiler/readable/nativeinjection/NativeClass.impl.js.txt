/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.nativeinjection.NativeClass.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.nativeinjection.NativeClass$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let String = goog.forwardDeclare('gen.java.lang.String$impl');


class NativeClass extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nativeinjection_NativeClass() {}

  /**
   * A particular Java constructor as a factory method.
   * @return {!NativeClass}
   * @public
   * @nocollapse
   */
  static $create() {
    NativeClass.$clinit();
    let instance = new NativeClass;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_nativeinjection_NativeClass();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_nativeinjection_NativeClass() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_nativeinjection_NativeClass();
  }

  /**
   * @return {?string}
   * @public
   */
  // native m_nativeInstanceMethod()

  /**
   * @return {?string}
   * @public
   * @nocollapse
   */
  // native static m_nativeStaticMethod()

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof NativeClass; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NativeClass);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    NativeClass.$clinit();
    if (!NativeClass.$classNativeClass_) {
      NativeClass.$classNativeClass_ = Class.$createForClass(
          $Util.$generateId('NativeClass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nativeinjection.NativeClass'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.nativeinjection.NativeClass'));
    }
    return NativeClass.$classNativeClass_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return NativeClass.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    String = goog.module.get('gen.java.lang.String$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
NativeClass.$classNativeClass_ = null;



/**
 * Native Method Injection
 */
/**
 * Replaces the native instance method 'nativeInstanceMethod' in NativeClass.
 * @return {string}
 * @public
 */
NativeClass.prototype.m_nativeInstanceMethod = function() {
  return 'nativeInstanceMethod';
};

/**
 * Replaces the native static method 'nativeStaticMethod' in NativeClass.
 * @return {string}
 * @public
 */
NativeClass.m_nativeStaticMethod = function() {
  return 'nativeStaticMethod';
};


/**
 * Export class.
 */
exports = NativeClass;
