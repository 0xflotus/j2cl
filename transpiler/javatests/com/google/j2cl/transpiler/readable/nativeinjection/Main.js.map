[/**
 * A class in the same package that refers to NonMainRootType.
...  }
}] => [class Main extends java_lang_Object {
  /**
...exports = Main;
] "com.google.j2cl.transpiler.readable.nativeinjection.Main"
[/**
 * A class in the same package that refers to NonMainRootType.
...  }
}] => [/**
   * Private implementation constructor.
...    super();
  }] "com.google.j2cl.transpiler.readable.nativeinjection.Main"
[UNKNOWN] => [super();]
[/**
 * A class in the same package that refers to NonMainRootType.
...  }
}] => [/**
   * Factory method corresponding to constructor 'Main()'.
...    return $instance;
  }] "com.google.j2cl.transpiler.readable.nativeinjection.Main.<ctor>"
[UNKNOWN] => [Main.$clinit();]
[UNKNOWN] => [let $instance = new Main();]
[UNKNOWN] => [$instance.$ctor__com_google_j2cl_transpiler_readable_nativeinjection_Main__();]
[UNKNOWN] => [return $instance;]
[/**
 * A class in the same package that refers to NonMainRootType.
...  }
}] => [/**
   * Initialization from constructor 'Main()'.
...    this.$init__com_google_j2cl_transpiler_readable_nativeinjection_Main();
  }] "com.google.j2cl.transpiler.readable.nativeinjection.Main.<ctor>"
[UNKNOWN] => [this.$ctor__java_lang_Object__();]
[UNKNOWN] => [this.$init__com_google_j2cl_transpiler_readable_nativeinjection_Main();]
[public static void main(String... args) {
    assert NativeClass.nativeStaticMethod().equals("nativeSaticMethod");
...    assert instance.nativeInstanceMethod().equals("nativeInstanceMethod");
  }] => [/**
   * @param {Array<?string>} args
...    $Asserts.$enabled() && $Asserts.$assert(java_lang_String.m_equals__java_lang_String__java_lang_Object(instance.m_nativeInstanceMethod__(), "nativeInstanceMethod"));
  }] "com.google.j2cl.transpiler.readable.nativeinjection.Main.main"
[args] => [args] "args"
[UNKNOWN] => [Main.$clinit();]
[assert NativeClass.nativeStaticMethod().equals("nativeSaticMethod");] => [$Asserts.$enabled() && $Asserts.$assert($Objects.m_equals__java_lang_Object__java_lang_Object(NativeClass.m_nativeStaticMethod__(), "nativeSaticMethod"));]
[NativeClass instance = new NativeClass();] => [let instance = NativeClass.$create__();]
[instance] => [instance] "instance"
[assert instance.nativeInstanceMethod().equals("nativeInstanceMethod");] => [$Asserts.$enabled() && $Asserts.$assert(java_lang_String.m_equals__java_lang_String__java_lang_Object(instance.m_nativeInstanceMethod__(), "nativeInstanceMethod"));]
[UNKNOWN] => [java_lang_Object.$clinit();]
