/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.nativeinjection.NativeClass.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.nativeinjection.NativeClass$impl');


let Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');
let String = goog.forwardDeclare('java.lang.String$impl');


class NativeClass extends Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!NativeClass}
   * @public
   */
  static $create__() {
    NativeClass.$clinit();
    let $instance = new NativeClass();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_nativeinjection_NativeClass__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_nativeinjection_NativeClass__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_nativeinjection_NativeClass();
  }

  /**
   * @return {?string}
   * @public
   */
  // native m_nativeInstanceMethod__()

  /**
   * @return {?string}
   * @public
   */
  // native static m_nativeStaticMethod__()

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof NativeClass; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NativeClass);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('java.lang.Class$impl');
    String = goog.module.get('java.lang.String$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nativeinjection_NativeClass() {}
};

$Util.$setClassMetadata(
    NativeClass,
    'com.google.j2cl.transpiler.readable.nativeinjection.NativeClass');



/**
 * Native Method Injection
 */
/**
 * Replaces the native instance method 'nativeInstanceMethod' in NativeClass.
 * @return {string}
 * @public
 */
NativeClass.prototype.m_nativeInstanceMethod__ = function() {
  return 'nativeInstanceMethod';
};

/**
 * Replaces the native static method 'nativeStaticMethod' in NativeClass.
 * @return {string}
 * @public
 */
NativeClass.m_nativeStaticMethod__ = function() {
  return 'nativeStaticMethod';
};


/**
 * Export class.
 */
exports = NativeClass;
//# sourceMappingURL=NativeClass.js.map