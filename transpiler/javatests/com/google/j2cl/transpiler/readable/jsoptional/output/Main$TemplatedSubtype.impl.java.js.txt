/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsoptional.Main$TemplatedSubtype.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.jsoptional.Main.TemplatedSubtype$impl');


const I = goog.require('com.google.j2cl.transpiler.readable.jsoptional.Main.I$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template C_TemplatedSubtype_T
 * @implements {I<C_TemplatedSubtype_T>}
 */
class TemplatedSubtype extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'TemplatedSubtype()'.
   * @template C_TemplatedSubtype_T
   * @return {!TemplatedSubtype<C_TemplatedSubtype_T>}
   * @public
   */
  static $create__() {
    TemplatedSubtype.$clinit();
    let $instance = new TemplatedSubtype();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsoptional_Main_TemplatedSubtype__();
    return $instance;
  }

  /**
   * Initialization from constructor 'TemplatedSubtype()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsoptional_Main_TemplatedSubtype__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {C_TemplatedSubtype_T} t
   * @param {*} o
   * @return {void}
   * @public
   */
  m_m__java_lang_String__java_lang_Object(t, o) {}

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @param {*=} arg1
   * @return {void}
   * @public
   */
  m(arg0, arg1) {
    this.m_m__java_lang_String__java_lang_Object(
        /**@type {C_TemplatedSubtype_T} */ ($Casts.$to(arg0, java_lang_String)),
        arg1);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof TemplatedSubtype;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, TemplatedSubtype);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    TemplatedSubtype.$clinit = function() {};
    java_lang_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    TemplatedSubtype,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsoptional.Main$TemplatedSubtype'));


I.$markImplementor(TemplatedSubtype);


/**
 * Export class.
 */
exports = TemplatedSubtype;
//# sourceMappingURL=Main$TemplatedSubtype.js.map