/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsoptional.Main$SpecializedSubtype.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jsoptional.Main.SpecializedSubtype$impl');


const I = goog.require('com.google.j2cl.transpiler.readable.jsoptional.Main.I$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsoptional.Main$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @implements {I<?string>}
 */
class SpecializedSubtype extends java_lang_Object {
  /**
   * JsConstructor 'SpecializedSubtype(Main, @JsOptional Object)'.
   * @param {Main} $outer_this
   * @param {*=} a
   * @public
   */
  constructor($outer_this, a) {
    SpecializedSubtype.$clinit();
    super();
    /** @public {Main} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_jsoptional_Main_SpecializedSubtype =
        null;
    this.$ctor__com_google_j2cl_transpiler_readable_jsoptional_Main_SpecializedSubtype__com_google_j2cl_transpiler_readable_jsoptional_Main__java_lang_Object(
        $outer_this, a);
  }

  /**
   * Initialization from constructor 'SpecializedSubtype(Main, @JsOptional
   * Object)'.
   * @param {Main} $outer_this
   * @param {*} a
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsoptional_Main_SpecializedSubtype__com_google_j2cl_transpiler_readable_jsoptional_Main__java_lang_Object(
      $outer_this, a) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_jsoptional_Main_SpecializedSubtype =
        $outer_this;
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jsoptional_Main_SpecializedSubtype();
  }

  /**
   * @param {?string} t
   * @param {*} o
   * @return {void}
   * @public
   */
  m_m__java_lang_String__java_lang_Object(t, o) {}

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @param {*=} arg1
   * @return {void}
   * @public
   */
  m(arg0, arg1) {
    this.m_m__java_lang_String__java_lang_Object(
        /**@type {?string} */ ($Casts.to(arg0, java_lang_String)), arg1);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SpecializedSubtype;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SpecializedSubtype);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    SpecializedSubtype.$clinit = function() {};
    Main = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsoptional.Main$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsoptional_Main_SpecializedSubtype() {
  }
};

$Util.$setClassMetadata(
    SpecializedSubtype,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsoptional.Main$SpecializedSubtype'));


I.$markImplementor(SpecializedSubtype);


/**
 * Export class.
 */
exports = SpecializedSubtype;
//# sourceMappingURL=Main$SpecializedSubtype.js.map