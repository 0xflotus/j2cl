/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsoptional.SpecializedSubtype.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jsoptional.SpecializedSubtype$impl');


let I = goog.require('com.google.j2cl.transpiler.readable.jsoptional.I$impl');
let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @implements {I<?string>}
 */
class SpecializedSubtype extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!SpecializedSubtype}
   * @public
   */
  static $create__() {
    SpecializedSubtype.$clinit();
    let $instance = new SpecializedSubtype();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsoptional_SpecializedSubtype__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsoptional_SpecializedSubtype__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jsoptional_SpecializedSubtype();
  }

  /**
   * @param {?string} t
   * @param {*} o
   * @return {void}
   * @public
   */
  m_m__java_lang_String__java_lang_Object(t, o) {}

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @param {*=} arg1
   * @return {void}
   * @public
   */
  m(arg0, arg1) {
    this.m_m__java_lang_String__java_lang_Object(
        /**@type {?string} */ ($Casts.to(arg0, java_lang_String)), arg1);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SpecializedSubtype;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SpecializedSubtype);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    java_lang_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsoptional_SpecializedSubtype() {}
};

$Util.$setClassMetadata(
    SpecializedSubtype,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsoptional.SpecializedSubtype'));


I.$markImplementor(SpecializedSubtype);


/**
 * Export class.
 */
exports = SpecializedSubtype;
//# sourceMappingURL=SpecializedSubtype.js.map