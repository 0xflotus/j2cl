/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jstype.SomeJsType.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const}
 */
goog.module('com.google.j2cl.transpiler.readable.jstype.SomeJsType$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @template C_T
 */
class SomeJsType extends Object {
  /**
   * Real constructor.
   * @public
   */
  constructor() {
    SomeJsType.$clinit();
    super();
    /**
     * @public {number}
     */
    this.publicField = 0;
    /**
     * @public {number}
     */
    this.f_privateField__com_google_j2cl_transpiler_readable_jstype_SomeJsType_ =
        0;
    /**
     * @public {number}
     */
    this.f_packageField__com_google_j2cl_transpiler_readable_jstype_SomeJsType =
        0;
    /**
     * @public {number}
     */
    this.f_protectedField__com_google_j2cl_transpiler_readable_jstype_SomeJsType =
        0;
    this.$ctor__com_google_j2cl_transpiler_readable_jstype_SomeJsType();
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @return {!SomeJsType<C_T>}
   * @public
   */
  static $create() { return new SomeJsType(); }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_jstype_SomeJsType() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_jstype_SomeJsType();
  }

  /**
   * @return {void}
   * @public
   */
  publicMethod() {}

  /**
   * @return {void}
   * @public
   */
  m_privateMethod_$p_com_google_j2cl_transpiler_readable_jstype_SomeJsType() {}

  /**
   * @return {void}
   * @public
   */
  m_packageMethod_$pp_com_google_j2cl_transpiler_readable_jstype() {}

  /**
   * @return {void}
   * @public
   */
  m_protectedMethod() {}

  /**
   * @return {void}
   * @public
   */
  useFieldsAndMethods() {
    let value = this.publicField +
        this.f_privateField__com_google_j2cl_transpiler_readable_jstype_SomeJsType_ +
        this.f_packageField__com_google_j2cl_transpiler_readable_jstype_SomeJsType +
        this.f_protectedField__com_google_j2cl_transpiler_readable_jstype_SomeJsType;
    this.publicMethod();
    this.m_privateMethod_$p_com_google_j2cl_transpiler_readable_jstype_SomeJsType();
    this.m_packageMethod_$pp_com_google_j2cl_transpiler_readable_jstype();
    this.m_protectedMethod();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof SomeJsType; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SomeJsType);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    SomeJsType.$clinit();
    if (!SomeJsType.$classSomeJsType_) {
      SomeJsType.$classSomeJsType_ = Class.$createForClass(
          $Util.$generateId('SomeJsType'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jstype.SomeJsType'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jstype.SomeJsType'));
    }
    return SomeJsType.$classSomeJsType_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return SomeJsType.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jstype_SomeJsType() {}
};


/**
 * The class literal field.
 * @private {Class}
 */
SomeJsType.$classSomeJsType_ = null;



/**
 * Export class.
 */
exports = SomeJsType;
//# sourceMappingURL=SomeJsType.js.map