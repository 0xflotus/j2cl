/**
 * Impl transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethodcasts.Map.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.bridgemethodcasts.Map$impl');


let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');


/**
 * @interface
 * @template C_K, C_V
 */
class Map {
  /**
   * @param {C_K} key
   * @param {C_V} value
   * @return {C_V}
   * @public
   */
  m_put__java_lang_Object__java_lang_Object(key, value) {}

  /**
   * Marks the provided class as implementing this interface.
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_bridgemethodcasts_Map =
        true;
  }

  /**
   * Returns whether the provided instance is of a class that implements this
   * interface.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance != null &&
           instance
               .$implements__com_google_j2cl_transpiler_readable_bridgemethodcasts_Map;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
           classConstructor.prototype
               .$implements__com_google_j2cl_transpiler_readable_bridgemethodcasts_Map;
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    Map.$clinit();
    if (!Map.$classMap_) {
      Map.$classMap_ = Class.$createForInterface(
          $Util.$generateId('Map'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodcasts.Map'),
          null,
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodcasts.Map'));
    }
    return Map.$classMap_;
  }

  /**
   * Runs inline static field initializers.
   * @public
   * @nocollapse
   */
  static $clinit() { Class = goog.module.get('gen.java.lang.Class$impl'); }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
Map.$classMap_ = null;


Map.$markImplementor(/** @type {Function} */ (Map));

/**
 * Export class.
 */
exports = Map;
