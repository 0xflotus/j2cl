/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethodcasts.Map$$LambdaAdaptor.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode, strictModuleDepCheck}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgemethodcasts.Map.$LambdaAdaptor$impl');


const Map = goog.require('com.google.j2cl.transpiler.readable.bridgemethodcasts.Map$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template C_K, C_V
 * @implements {Map<C_K, C_V>}
 */
class $LambdaAdaptor extends j_l_Object {
  /**
   * @param {?function(C_K, C_V):C_V} fn
   * @public
   */
  constructor(fn) {
    $LambdaAdaptor.$clinit();
    super();
    /** @public {?function(C_K, C_V):C_V} */
    this.f_$$fn__com_google_j2cl_transpiler_readable_bridgemethodcasts_Map_$LambdaAdaptor;
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethodcasts_Map_$LambdaAdaptor__com_google_j2cl_transpiler_readable_bridgemethodcasts_Map_$JsFunction(
        fn);
  }

  /**
   * @param {?function(C_K, C_V):C_V} fn
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethodcasts_Map_$LambdaAdaptor__com_google_j2cl_transpiler_readable_bridgemethodcasts_Map_$JsFunction(
      fn) {
    this.$ctor__java_lang_Object__();
    this.f_$$fn__com_google_j2cl_transpiler_readable_bridgemethodcasts_Map_$LambdaAdaptor =
        fn;
  }

  /**
   * @param {C_K} arg0
   * @param {C_V} arg1
   * @return {C_V}
   * @public
   */
  m_put__java_lang_Object__java_lang_Object(arg0, arg1) {
    let /** ?function(C_K, C_V):C_V */ $function;
    return (
        $function =
            this.f_$$fn__com_google_j2cl_transpiler_readable_bridgemethodcasts_Map_$LambdaAdaptor,
        $function(arg0, arg1));
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    $LambdaAdaptor.$clinit = (() => {});
    $LambdaAdaptor.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $LambdaAdaptor;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    $LambdaAdaptor,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgemethodcasts.Map$$LambdaAdaptor'));


Map.$markImplementor($LambdaAdaptor);


exports = $LambdaAdaptor;
//# sourceMappingURL=Map$$LambdaAdaptor.js.map