/**
 * Impl transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethodcasts.AbstractMap.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.bridgemethodcasts.AbstractMap$impl');


let Map = goog.require('gen.com.google.j2cl.transpiler.readable.bridgemethodcasts.Map$impl');
let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');


/**
 * @template C_K, C_V
 * @implements {Map<C_K, C_V>}
 */
class AbstractMap extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgemethodcasts_AbstractMap() {}

  /**
   * @override
   * @param {C_K} key
   * @param {C_V} value
   * @return {C_V}
   * @public
   */
  m_put__java_lang_Object__java_lang_Object(key, value) { return value; }

  /**
   * A particular Java constructor as a factory method.
   * @template C_K, C_V
   * @return {!AbstractMap<C_K, C_V>}
   * @public
   * @nocollapse
   */
  static $create() {
    AbstractMap.$clinit();
    let instance = new AbstractMap;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethodcasts_AbstractMap();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethodcasts_AbstractMap() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_bridgemethodcasts_AbstractMap();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof AbstractMap; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AbstractMap);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    AbstractMap.$clinit();
    if (!AbstractMap.$classAbstractMap_) {
      AbstractMap.$classAbstractMap_ = Class.$createForClass(
          $Util.$generateId('AbstractMap'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodcasts.AbstractMap'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.bridgemethodcasts.AbstractMap'));
    }
    return AbstractMap.$classAbstractMap_;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
AbstractMap.$classAbstractMap_ = null;


Map.$markImplementor(AbstractMap);



/**
 * Export class.
 */
exports = AbstractMap;
