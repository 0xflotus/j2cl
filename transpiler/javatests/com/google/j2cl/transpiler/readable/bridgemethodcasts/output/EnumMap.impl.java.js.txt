/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethodcasts.EnumMap.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgemethodcasts.EnumMap$impl');


const AbstractMap = goog.require('com.google.j2cl.transpiler.readable.bridgemethodcasts.AbstractMap$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Enum = goog.forwardDeclare('java.lang.Enum$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template C_K, C_V
 * @extends {AbstractMap<C_K, C_V>}
 */
class EnumMap extends AbstractMap {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'EnumMap()'.
   * @template C_K, C_V
   * @return {!EnumMap<C_K, C_V>}
   * @public
   */
  static $create__() {
    EnumMap.$clinit();
    let $instance = new EnumMap();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethodcasts_EnumMap__();
    return $instance;
  }

  /**
   * Initialization from constructor 'EnumMap()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethodcasts_EnumMap__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethodcasts_AbstractMap__();
  }

  /**
   * @param {C_K} key
   * @param {C_V} value
   * @return {C_V}
   * @public
   */
  m_put__java_lang_Enum__java_lang_Object(key, value) {
    return value;
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @param {*} arg1
   * @return {C_V}
   * @public
   */
  m_put__java_lang_Object__java_lang_Object(arg0, arg1) {
    return this.m_put__java_lang_Enum__java_lang_Object(
        /**@type {C_K} */ ($Casts.$to(arg0, Enum)), arg1);
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof EnumMap;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, EnumMap);
  }

  /**
   * @public
   */
  static $clinit() {
    EnumMap.$clinit = function() {};
    Enum = goog.module.get('java.lang.Enum$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    AbstractMap.$clinit();
  }
};

$Util.$setClassMetadata(
    EnumMap,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgemethodcasts.EnumMap'));



exports = EnumMap;
//# sourceMappingURL=EnumMap.js.map