/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethodcasts.AbstractMap.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgemethodcasts.AbstractMap$impl');


const Map = goog.require('com.google.j2cl.transpiler.readable.bridgemethodcasts.Map$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template C_K, C_V
 * @implements {Map<C_K, C_V>}
 */
class AbstractMap extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'AbstractMap()'.
   * @template C_K, C_V
   * @return {!AbstractMap<C_K, C_V>}
   * @public
   */
  static $create__() {
    AbstractMap.$clinit();
    let $instance = new AbstractMap();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethodcasts_AbstractMap__();
    return $instance;
  }

  /**
   * Initialization from constructor 'AbstractMap()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethodcasts_AbstractMap__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @override
   * @param {C_K} key
   * @param {C_V} value
   * @return {C_V}
   * @public
   */
  m_put__java_lang_Object__java_lang_Object(key, value) {
    return value;
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AbstractMap;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AbstractMap);
  }

  /**
   * @public
   */
  static $clinit() {
    AbstractMap.$clinit = function() {};
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    AbstractMap,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgemethodcasts.AbstractMap'));


Map.$markImplementor(AbstractMap);


exports = AbstractMap;
//# sourceMappingURL=AbstractMap.js.map