/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.lambdajsinterop.Main$$Lambda$JsSupplier$1.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.lambdajsinterop.Main.$Lambda$JsSupplier$1$impl');


const JsSupplier = goog.require('com.google.j2cl.transpiler.readable.lambdajsinterop.Main.JsSupplier$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Equals = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdajsinterop.Main.Equals$impl');
let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdajsinterop.Main.Equals.$Overlay$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');


/**
 * @implements {JsSupplier<Integer>}
 */
class $Lambda$JsSupplier$1 extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'new JsSupplier()'.
   * @return {!$Lambda$JsSupplier$1}
   * @public
   */
  static $create__() {
    $Lambda$JsSupplier$1.$clinit();
    let $instance = new $Lambda$JsSupplier$1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_lambdajsinterop_Main_$Lambda$JsSupplier$1__();
    return $instance;
  }

  /**
   * Initialization from constructor 'new JsSupplier()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_lambdajsinterop_Main_$Lambda$JsSupplier$1__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_lambdajsinterop_Main_$Lambda$JsSupplier$1();
  }

  /**
   * Lambda implementation method.
   * @override
   * @return {Integer}
   * @public
   */
  get() {
    return Integer.m_valueOf__int(1);
  }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @return {Integer}
   * @public
   */
  m_get__() {
    return this.get();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $Lambda$JsSupplier$1;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $Lambda$JsSupplier$1);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Lambda$JsSupplier$1.$clinit = function() {};
    Equals = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdajsinterop.Main.Equals$impl');
    $Overlay = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdajsinterop.Main.Equals.$Overlay$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    java_lang_Object.$clinit();
    Equals.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_lambdajsinterop_Main_$Lambda$JsSupplier$1() {
  }
};

$Util.$setClassMetadata(
    $Lambda$JsSupplier$1,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.lambdajsinterop.Main$$Lambda$JsSupplier$1'));


JsSupplier.$markImplementor($Lambda$JsSupplier$1);


/**
 * Export class.
 */
exports = $Lambda$JsSupplier$1;
//# sourceMappingURL=Main$$Lambda$JsSupplier$1.js.map