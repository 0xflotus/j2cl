/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.interfaceuse.SomeClass.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.interfaceuse.SomeClass$impl');


let AnotherInterface = goog.require('com.google.j2cl.transpiler.readable.interfaceuse.AnotherInterface$impl');
let SomeInterface = goog.require('com.google.j2cl.transpiler.readable.interfaceuse.SomeInterface$impl');
let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @implements {SomeInterface}
 * @implements {AnotherInterface}
 */
class SomeClass extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!SomeClass}
   * @public
   */
  static $create__() {
    SomeClass.$clinit();
    let $instance = new SomeClass();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_interfaceuse_SomeClass__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_interfaceuse_SomeClass__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_interfaceuse_SomeClass();
  }

  /**
   * @override
   * @return {number}
   * @public
   */
  m_run__() {
    return 0;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SomeClass;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SomeClass);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_interfaceuse_SomeClass() {}
};

$Util.$setClassMetadata(
    SomeClass,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.interfaceuse.SomeClass'));


SomeInterface.$markImplementor(SomeClass);
AnotherInterface.$markImplementor(SomeClass);


/**
 * Export class.
 */
exports = SomeClass;
//# sourceMappingURL=SomeClass.js.map