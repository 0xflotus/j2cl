/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.packageprivatemethods.package1.SuperParent.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.packageprivatemethods.package1.SuperParent$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class SuperParent extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!SuperParent}
   * @public
   */
  static $create() {
    SuperParent.$clinit();
    let $instance = new SuperParent;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_packageprivatemethods_package1_SuperParent();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_packageprivatemethods_package1_SuperParent() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_packageprivatemethods_package1_SuperParent();
  }

  /**
   * @param {number} a
   * @return {number}
   * @public
   */
  m_foo__int_$pp_com_google_j2cl_transpiler_readable_packageprivatemethods_package1(
      a) {
    return a - 1;
  }

  /**
   * @param {number} a
   * @param {number} b
   * @return {number}
   * @public
   */
  m_fun__int__int_$pp_com_google_j2cl_transpiler_readable_packageprivatemethods_package1(
      a, b) {
    return a + b;
  }

  /**
   * @param {number} a
   * @param {number} b
   * @param {number} c
   * @return {number}
   * @public
   */
  m_bar__int__int__int_$pp_com_google_j2cl_transpiler_readable_packageprivatemethods_package1(
      a, b, c) {
    return a + b + c;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof SuperParent; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SuperParent);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    SuperParent.$clinit();
    if (!SuperParent.$classSuperParent_) {
      SuperParent.$classSuperParent_ = Class.$createForClass(
          $Util.$generateId('SuperParent'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.packageprivatemethods.package1.SuperParent'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.packageprivatemethods.package1.SuperParent'));
    }
    return SuperParent.$classSuperParent_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return SuperParent.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_packageprivatemethods_package1_SuperParent() {
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
SuperParent.$classSuperParent_ = null;



/**
 * Export class.
 */
exports = SuperParent;
//# sourceMappingURL=SuperParent.js.map