/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.devirtualizedsupermethodcall.FooCallsSuperObjectMethod.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.devirtualizedsupermethodcall.FooCallsSuperObjectMethod$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class FooCallsSuperObjectMethod extends j_l_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'FooCallsSuperObjectMethod()'.
   * @return {!FooCallsSuperObjectMethod}
   * @public
   */
  static $create__() {
    FooCallsSuperObjectMethod.$clinit();
    let $instance = new FooCallsSuperObjectMethod();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_devirtualizedsupermethodcall_FooCallsSuperObjectMethod__();
    return $instance;
  }

  /**
   * Initialization from constructor 'FooCallsSuperObjectMethod()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_devirtualizedsupermethodcall_FooCallsSuperObjectMethod__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @override
   * @return {number}
   * @public
   */
  hashCode() {
    return super.hashCode();
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    FooCallsSuperObjectMethod.$clinit = (() => {});
    FooCallsSuperObjectMethod.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof FooCallsSuperObjectMethod;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, FooCallsSuperObjectMethod);
  }

  /**
   * @private
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    FooCallsSuperObjectMethod,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.devirtualizedsupermethodcall.FooCallsSuperObjectMethod'));



exports = FooCallsSuperObjectMethod;
//# sourceMappingURL=FooCallsSuperObjectMethod.js.map