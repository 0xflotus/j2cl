/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.booleanoperations.BooleanOperations.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.booleanoperations.BooleanOperations$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $1Outer = goog.forwardDeclare('com.google.j2cl.transpiler.readable.booleanoperations.BooleanOperations.$1Outer$impl');
let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


class BooleanOperations extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'BooleanOperations()'.
   * @return {!BooleanOperations}
   * @public
   */
  static $create__() {
    BooleanOperations.$clinit();
    let $instance = new BooleanOperations();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations__();
    return $instance;
  }

  /**
   * Initialization from constructor 'BooleanOperations()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {boolean} b
   * @return {void}
   * @public
   */
  static m_acceptBoolean__boolean_$p_com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
      b) {
    BooleanOperations.$clinit();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let ls = true;
    let rs = true;
    let r = true;
    r = ls == rs;
    r = ls != rs;
    r = !!(+ls ^ +rs);
    r = !!(+ls & +rs);
    r = !!(+ls | +rs);
    r = ls && rs;
    r = ls || rs;
    r = ls = rs;
    r = !!(+r ^ +rs);
    r = !!(+r & +rs);
    r = !!(+r | +rs);
    BooleanOperations
        .m_acceptBoolean__boolean_$p_com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
            ls == rs);
    BooleanOperations
        .m_acceptBoolean__boolean_$p_com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
            ls != rs);
    BooleanOperations
        .m_acceptBoolean__boolean_$p_com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
            !!(+ls ^ +rs));
    BooleanOperations
        .m_acceptBoolean__boolean_$p_com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
            !!(+ls & +rs));
    BooleanOperations
        .m_acceptBoolean__boolean_$p_com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
            !!(+ls | +rs));
    BooleanOperations
        .m_acceptBoolean__boolean_$p_com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
            ls && rs);
    BooleanOperations
        .m_acceptBoolean__boolean_$p_com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
            ls || rs);
    BooleanOperations
        .m_acceptBoolean__boolean_$p_com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
            ls = rs);
    let /** ?boolean */ br;
    br = /**@type {?boolean} */ ($Casts.$to((ls == rs), Boolean));
    br = /**@type {?boolean} */ ($Casts.$to((ls != rs), Boolean));
    br = /**@type {?boolean} */ ($Casts.$to((!!(+ls ^ +rs)), Boolean));
    br = /**@type {?boolean} */ ($Casts.$to((!!(+ls & +rs)), Boolean));
    br = /**@type {?boolean} */ ($Casts.$to((!!(+ls | +rs)), Boolean));
    br = /**@type {?boolean} */ ($Casts.$to((ls && rs), Boolean));
    br = /**@type {?boolean} */ ($Casts.$to((ls || rs), Boolean));
    br = /**@type {?boolean} */ ($Casts.$to((ls = rs), Boolean));
    if (ls == rs) {
      r = true;
    }
    if (ls != rs) {
      r = true;
    }
    if (!!(+ls ^ +rs)) {
      r = true;
    }
    if (!!(+ls & +rs)) {
      r = true;
    }
    if (!!(+ls | +rs)) {
      r = true;
    }
    if (ls && rs) {
      r = true;
    }
    if (ls || rs) {
      r = true;
    }
    let finalOuter =
        $1Outer
            .$create__com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
                this);
    finalOuter
        .f_b__com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations_1Outer =
        !!(+finalOuter
                .f_b__com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations_1Outer |
           +true);
    let outer =
        $1Outer
            .$create__com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations(
                this);
    outer
        .f_b__com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations_1Outer =
        !!(+outer
                .f_b__com_google_j2cl_transpiler_readable_booleanoperations_BooleanOperations_1Outer |
           +$Equality.$same((outer = null), null));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof BooleanOperations;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, BooleanOperations);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    BooleanOperations.$clinit = function() {};
    $1Outer = goog.module.get(
        'com.google.j2cl.transpiler.readable.booleanoperations.BooleanOperations.$1Outer$impl');
    Boolean = goog.module.get('java.lang.Boolean$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    BooleanOperations,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.booleanoperations.BooleanOperations'));



/**
 * Export class.
 */
exports = BooleanOperations;
//# sourceMappingURL=BooleanOperations.js.map