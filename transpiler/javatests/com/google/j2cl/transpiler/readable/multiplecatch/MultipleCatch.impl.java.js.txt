/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.multiplecatch.MultipleCatch.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.multiplecatch.MultipleCatch$impl');


let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let ClassCastException = goog.forwardDeclare('java.lang.ClassCastException$impl');
let NullPointerException = goog.forwardDeclare('java.lang.NullPointerException$impl');
let RuntimeException = goog.forwardDeclare('java.lang.RuntimeException$impl');
let $Exceptions = goog.forwardDeclare('vmbootstrap.Exceptions$impl');


class MultipleCatch extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!MultipleCatch}
   * @public
   */
  static $create__() {
    MultipleCatch.$clinit();
    let $instance = new MultipleCatch();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_multiplecatch_MultipleCatch__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_multiplecatch_MultipleCatch__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_multiplecatch_MultipleCatch();
  }

  /**
   * @return {void}
   * @public
   */
  m_main__() {
    try {
      throw $Exceptions.toJs(ClassCastException.$create__());
    } catch (/** @type {*} */ __$exc) {
      __$exc = $Exceptions.toJava(__$exc);
      if (NullPointerException.$isInstance(__$exc) ||
          ClassCastException.$isInstance(__$exc)) {
        let e = /**@type {RuntimeException} */ (__$exc);
      } else if (RuntimeException.$isInstance(__$exc)) {
        let r = /**@type {RuntimeException} */ (__$exc);
        r = null;
      } else {
        throw $Exceptions.toJs(__$exc);
      }
    }
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof MultipleCatch;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MultipleCatch);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    ClassCastException = goog.module.get('java.lang.ClassCastException$impl');
    NullPointerException =
        goog.module.get('java.lang.NullPointerException$impl');
    RuntimeException = goog.module.get('java.lang.RuntimeException$impl');
    $Exceptions = goog.module.get('vmbootstrap.Exceptions$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_multiplecatch_MultipleCatch() {}
};

$Util.$setClassMetadata(
    MultipleCatch,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.multiplecatch.MultipleCatch'));



/**
 * Export class.
 */
exports = MultipleCatch;
//# sourceMappingURL=MultipleCatch.js.map