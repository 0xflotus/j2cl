/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$$Lambda$BiFunction$4.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.$Lambda$BiFunction$4$impl');


const BiFunction = goog.require('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.BiFunction$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let MethodReferences = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$impl');
let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');


/**
 * @template C_T
 * @implements {BiFunction<MethodReferences<C_T>, (Number|?number), ?boolean>}
 */
class $Lambda$BiFunction$4 extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
    /** @public {MethodReferences<C_T>} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$BiFunction$4 =
        null;
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @param {MethodReferences<C_T>} $outer_this
   * @return {!$Lambda$BiFunction$4<C_T>}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
      $outer_this) {
    $Lambda$BiFunction$4.$clinit();
    let $instance = new $Lambda$BiFunction$4();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$BiFunction$4__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
            $outer_this);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {MethodReferences<C_T>} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$BiFunction$4__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$BiFunction$4 =
        $outer_this;
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$BiFunction$4();
  }

  /**
   * Lambda implementation method.
   * @override
   * @param {MethodReferences<C_T>} arg0
   * @param {(Number|?number)} arg1
   * @return {?boolean}
   * @public
   */
  m_apply__java_lang_Object__java_lang_Object(arg0, arg1) {
    return arg0
        .m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
            arg1);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $Lambda$BiFunction$4;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $Lambda$BiFunction$4);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Lambda$BiFunction$4.$clinit = function() {};
    MethodReferences = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$impl');
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Number = goog.module.get('java.lang.Number$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$BiFunction$4() {
  }
};

$Util.$setClassMetadata(
    $Lambda$BiFunction$4,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$$Lambda$BiFunction$4'));


BiFunction.$markImplementor($Lambda$BiFunction$4);


/**
 * Export class.
 */
exports = $Lambda$BiFunction$4;
//# sourceMappingURL=MethodReferences$$Lambda$BiFunction$4.js.map