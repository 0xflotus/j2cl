/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$Function.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Function$impl');


const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Function.$LambdaAdaptor$impl');


/**
 * @interface
 * @template C_Function_T, C_Function_U
 */
class MethodReferences_Function {
  /**
   * @abstract
   * @param {C_Function_T} t
   * @return {C_Function_U}
   * @public
   */
  m_apply__java_lang_Object(t) {}

  /**
   * @template C_Function_T, C_Function_U
   * @param {?function(C_Function_T):C_Function_U} fn
   * @return {MethodReferences_Function<C_Function_T, C_Function_U>}
   * @public
   */
  static $adapt(fn) {
    MethodReferences_Function.$clinit();
    return /**@type {!$LambdaAdaptor<*, *>} */ (new $LambdaAdaptor(fn));
  }

  /**
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function =
        true;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function;
  }

  /**
   * @public
   */
  static $clinit() {
    MethodReferences_Function.$clinit = function() {};
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Function.$LambdaAdaptor$impl');
  }
};

$Util.$setClassMetadataForInterface(
    MethodReferences_Function,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$Function'));


MethodReferences_Function.$markImplementor(
    /** @type {Function} */ (MethodReferences_Function));


exports = MethodReferences_Function;
//# sourceMappingURL=MethodReferences$Function.js.map