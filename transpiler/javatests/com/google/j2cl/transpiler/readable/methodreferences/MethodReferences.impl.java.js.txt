/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let ArrayProducer = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.ArrayProducer$impl');
let BiFunction = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.BiFunction$impl');
let com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Function$impl');
let ObjectCapturingOuter = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.ObjectCapturingOuter$impl');
let Predicate = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Predicate$impl');
let Producer = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Producer$impl');
let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Objects = goog.forwardDeclare('vmbootstrap.Objects$impl');


/**
 * @template C_T
 */
class MethodReferences extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'MethodReferences()'.
   * @template C_T
   * @return {!MethodReferences<C_T>}
   * @public
   */
  static $create__() {
    MethodReferences.$clinit();
    let $instance = new MethodReferences();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences__();
    return $instance;
  }

  /**
   * Initialization from constructor 'MethodReferences()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences();
  }

  /**
   * @return {*}
   * @public
   */
  static m_m___$pp_com_google_j2cl_transpiler_readable_methodreferences() {
    MethodReferences.$clinit();
    return java_lang_Object.$create__();
  }

  /**
   * @return {?boolean}
   * @public
   */
  m_isA__() {
    return true;
  }

  /**
   * @return {*}
   * @public
   */
  m_self___$pp_com_google_j2cl_transpiler_readable_methodreferences() {
    return this;
  }

  /**
   * @param {(Number|number)} n
   * @return {?boolean}
   * @public
   */
  m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
      n) {
    return false;
  }

  /**
   * @return {void}
   * @public
   */
  m_main___$pp_com_google_j2cl_transpiler_readable_methodreferences() {
    let /** MethodReferences<C_T> */ $$qualifier1,
        /** MethodReferences<*> */ $$qualifier2,
        /** MethodReferences<*> */ $$qualifier3;
    let objectFactory = Producer.$adapt((() => {
      return java_lang_Object.$create__();
    }));
    objectFactory = Producer.$adapt((() => {
      return MethodReferences
          .m_m___$pp_com_google_j2cl_transpiler_readable_methodreferences();
    }));
    objectFactory =
        ($$qualifier1 = /**@type {!MethodReferences<C_T>} */ (
             MethodReferences.$create__()),
         Producer.$adapt((() => {
           return $$qualifier1.m_isA__();
         })));
    let biFunction =
        /**@type {BiFunction<MethodReferences<C_T>, (Number|number), ?boolean>} */
        (BiFunction.$adapt(
            ((/** MethodReferences<*> */ arg0, /** (Number|number) */ arg1) => {
              return arg0
                  .m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
                      arg1);
            })));
    let functionWithParameters =
        com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function
            .$adapt(((/** (Number|number) */ arg0$1$) => {
              return this
                  .m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
                      arg0$1$);
            }));
    let objectPredicate = /**@type {Predicate<MethodReferences<C_T>>} */ (
        Predicate.$adapt(((/** MethodReferences<*> */ arg0$2$) => {
          return Boolean.m_booleanValue__java_lang_Boolean(arg0$2$.m_isA__());
        })));
    let objectCapturingOuterProducer =
        /**@type {Producer<ObjectCapturingOuter<C_T>>} */
        (Producer.$adapt((() => {
          return /**@type {!ObjectCapturingOuter<*>} */ (
              ObjectCapturingOuter
                  .$create__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
                      this));
        })));
    let arrayProducer = ArrayProducer.$adapt(((/** number */ arg0$3$) => {
      return /**@type {!Array<?number>} */ ($Arrays.$create([arg0$3$], Double));
    }));
    objectFactory =
        ($$qualifier2 =
             /**@type {!MethodReferences<*>} */ (MethodReferences.$create__()),
         Producer.$adapt((() => {
           return $$qualifier2
               .m_self___$pp_com_google_j2cl_transpiler_readable_methodreferences();
         })));
    let function$1$ =
        /**@type {com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function<MethodReferences<C_T>, *>} */
        (com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function
             .$adapt(((/** MethodReferences<*> */ arg0$4$) => {
               return arg0$4$
                   .m_self___$pp_com_google_j2cl_transpiler_readable_methodreferences();
             })));
    let arrayFactory =
        com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function
            .$adapt(((/** Integer */ arg0$5$) => {
              return new Array(arg0$5$.m_intValue__());
            }));
    let superToStringProducer = Producer.$adapt((() => {
      return java_lang_Object.prototype.toString.call(this);
    }));
    let jsobjectFactory = (() => {
      return java_lang_Object.$create__();
    });
    jsobjectFactory = (() => {
      return MethodReferences
          .m_m___$pp_com_google_j2cl_transpiler_readable_methodreferences();
    });
    jsobjectFactory =
        ($$qualifier3 =
             /**@type {!MethodReferences<*>} */ (MethodReferences.$create__()),
         (() => {
           return $$qualifier3
               .m_self___$pp_com_google_j2cl_transpiler_readable_methodreferences();
         }));
    let jsfunction = ((/** MethodReferences<*> */ arg0$6$) => {
      return arg0$6$
          .m_self___$pp_com_google_j2cl_transpiler_readable_methodreferences();
    });
    let jsarrayFactory = ((/** Integer */ arg0$7$) => {
      return new Array(arg0$7$.m_intValue__());
    });
    let jsSuperToStringProducer = (() => {
      return java_lang_Object.prototype.toString.call(this);
    });
    let jsbiFunction =
        ((/** MethodReferences<*> */ arg0$8$,
          /** (Number|number) */ arg1$1$) => {
          return arg0$8$
              .m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
                  arg1$1$);
        });
    let jsFunctionWithParameters = ((/** (Number|number) */ arg0$9$) => {
      return this
          .m_sameAs__java_lang_Number_$pp_com_google_j2cl_transpiler_readable_methodreferences(
              arg0$9$);
    });
  }

  /**
   * A static field getter.
   * @return {Producer<?string>}
   * @public
   */
  static get f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences() {
    return (
        MethodReferences.$clinit(),
        MethodReferences
            .$f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences);
  }

  /**
   * A static field setter.
   * @param {Producer<?string>} value
   * @return {void}
   * @public
   */
  static set f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
      value) {
    (MethodReferences.$clinit(),
     MethodReferences
         .$f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences =
         value);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof MethodReferences;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MethodReferences);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    MethodReferences.$clinit = function() {};
    ArrayProducer = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.ArrayProducer$impl');
    BiFunction = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.BiFunction$impl');
    com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function =
        goog.module.get(
            'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Function$impl');
    ObjectCapturingOuter = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.ObjectCapturingOuter$impl');
    Predicate = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Predicate$impl');
    Producer = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Producer$impl');
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Double = goog.module.get('java.lang.Double$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Objects = goog.module.get('vmbootstrap.Objects$impl');
    java_lang_Object.$clinit();
    let /** * */ $$qualifier0;
    MethodReferences
        .$f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences =
        ($$qualifier0 =
             MethodReferences
                 .m_m___$pp_com_google_j2cl_transpiler_readable_methodreferences(),
         Producer.$adapt((() => {
           return $Objects.m_toString__java_lang_Object($$qualifier0);
         })));
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences() {
  }
};

$Util.$setClassMetadata(
    MethodReferences,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences'));


/**
 * @private {Producer<?string>}
 */
MethodReferences
    .$f_staticStringProducer__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences;



/**
 * Export class.
 */
exports = MethodReferences;
//# sourceMappingURL=MethodReferences.js.map