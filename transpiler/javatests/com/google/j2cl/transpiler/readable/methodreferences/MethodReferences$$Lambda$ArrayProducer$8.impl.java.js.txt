/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$$Lambda$ArrayProducer$8.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.$Lambda$ArrayProducer$8$impl');


const ArrayProducer = goog.require('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.ArrayProducer$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let MethodReferences = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @template C_T
 * @implements {ArrayProducer<*>}
 */
class $Lambda$ArrayProducer$8 extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
    /** @public {MethodReferences<C_T>} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$ArrayProducer$8 =
        null;
  }

  /**
   * Factory method corresponding to constructor 'new
   * ArrayProducer(MethodReferences)'.
   * @template C_T
   * @param {MethodReferences<C_T>} $outer_this
   * @return {!$Lambda$ArrayProducer$8<C_T>}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
      $outer_this) {
    $Lambda$ArrayProducer$8.$clinit();
    let $instance = new $Lambda$ArrayProducer$8();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$ArrayProducer$8__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
            $outer_this);
    return $instance;
  }

  /**
   * Initialization from constructor 'new ArrayProducer(MethodReferences)'.
   * @param {MethodReferences<C_T>} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$ArrayProducer$8__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$ArrayProducer$8 =
        $outer_this;
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$ArrayProducer$8();
  }

  /**
   * Lambda implementation method.
   * @override
   * @param {number} arg0
   * @return {Array<*>}
   * @public
   */
  m_produce__int(arg0) {
    return /**@type {!Array<?number>} */ ($Arrays.$create([arg0], Double));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $Lambda$ArrayProducer$8;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $Lambda$ArrayProducer$8);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Lambda$ArrayProducer$8.$clinit = function() {};
    MethodReferences = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$impl');
    Double = goog.module.get('java.lang.Double$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$ArrayProducer$8() {
  }
};

$Util.$setClassMetadata(
    $Lambda$ArrayProducer$8,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$$Lambda$ArrayProducer$8'));


ArrayProducer.$markImplementor($Lambda$ArrayProducer$8);


/**
 * Export class.
 */
exports = $Lambda$ArrayProducer$8;
//# sourceMappingURL=MethodReferences$$Lambda$ArrayProducer$8.js.map