/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$$Lambda$Function$11.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.$Lambda$Function$11$impl');


const com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function = goog.require('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.Function$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let MethodReferences = goog.forwardDeclare('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template C_T
 * @implements {com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function<Integer, Array<*>>}
 */
class $Lambda$Function$11 extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
    /** @public {MethodReferences<C_T>} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$Function$11 =
        null;
  }

  /**
   * Factory method corresponding to constructor 'new
   * Function(MethodReferences)'.
   * @template C_T
   * @param {MethodReferences<C_T>} $outer_this
   * @return {!$Lambda$Function$11<C_T>}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
      $outer_this) {
    $Lambda$Function$11.$clinit();
    let $instance = new $Lambda$Function$11();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$Function$11__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
            $outer_this);
    return $instance;
  }

  /**
   * Initialization from constructor 'new Function(MethodReferences)'.
   * @param {MethodReferences<C_T>} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$Function$11__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$Function$11 =
        $outer_this;
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$Function$11();
  }

  /**
   * Lambda implementation method.
   * @param {Integer} arg0
   * @return {Array<*>}
   * @public
   */
  m_apply__java_lang_Integer(arg0) {
    return new Array(arg0.m_intValue__());
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {Array<*>}
   * @public
   */
  m_apply__java_lang_Object(arg0) {
    return this.m_apply__java_lang_Integer(
        /**@type {Integer} */ ($Casts.to(arg0, Integer)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $Lambda$Function$11;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $Lambda$Function$11);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Lambda$Function$11.$clinit = function() {};
    MethodReferences = goog.module.get(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_$Lambda$Function$11() {
  }
};

$Util.$setClassMetadata(
    $Lambda$Function$11,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$$Lambda$Function$11'));


com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_Function
    .$markImplementor($Lambda$Function$11);


/**
 * Export class.
 */
exports = $Lambda$Function$11;
//# sourceMappingURL=MethodReferences$$Lambda$Function$11.js.map