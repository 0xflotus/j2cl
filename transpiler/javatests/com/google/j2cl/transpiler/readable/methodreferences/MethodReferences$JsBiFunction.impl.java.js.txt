/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.methodreferences.MethodReferences$JsBiFunction.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.methodreferences.MethodReferences.JsBiFunction$impl');


const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @interface
 * @template C_JsBiFunction_T, C_JsBiFunction_U, C_JsBiFunction_V
 */
class JsBiFunction {
  /**
   * @abstract
   * @param {C_JsBiFunction_T} t
   * @param {C_JsBiFunction_U} u
   * @return {C_JsBiFunction_V}
   * @public
   */
  m_apply__java_lang_Object__java_lang_Object(t, u) {}

  /**
   * Marks the provided class as implementing this interface.
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_JsBiFunction =
        true;
  }

  /**
   * Returns whether the provided instance is of a class that implements this
   * interface.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null && typeof instance == 'function';
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        classConstructor.prototype
            .$implements__com_google_j2cl_transpiler_readable_methodreferences_MethodReferences_JsBiFunction;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    JsBiFunction.$clinit = function() {};
  }
};

$Util.$setClassMetadataForInterface(
    JsBiFunction, $Util.$makeClassName('Function'));


JsBiFunction.$markImplementor(/** @type {Function} */ (JsBiFunction));


/**
 * Export class.
 */
exports = JsBiFunction;
//# sourceMappingURL=MethodReferences$JsBiFunction.js.map