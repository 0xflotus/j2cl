/**
 * Transpiled from
 * third_party/java_src/j2cl/transpiler/javatests/com/google/j2cl/transpiler/readable/primitivearrays/PrimitiveArrays.java.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.primitivearrays.PrimitiveArraysModule');


let Class = goog.require('gen.java.lang.CoreModule').Class;
let Object = goog.require('gen.java.lang.CoreModule').Object;
let $Long = goog.require('nativebootstrap.LongUtilsModule').Long;
let $Util = goog.require('nativebootstrap.UtilModule').Util;
let $Arrays = goog.require('vmbootstrap.ArraysModule').Arrays;
let $boolean = goog.require('vmbootstrap.PrimitivesModule').$boolean;
let $byte = goog.require('vmbootstrap.PrimitivesModule').$byte;
let $char = goog.require('vmbootstrap.PrimitivesModule').$char;
let $double = goog.require('vmbootstrap.PrimitivesModule').$double;
let $float = goog.require('vmbootstrap.PrimitivesModule').$float;
let $int = goog.require('vmbootstrap.PrimitivesModule').$int;
let $long = goog.require('vmbootstrap.PrimitivesModule').$long;
let $short = goog.require('vmbootstrap.PrimitivesModule').$short;


class PrimitiveArrays extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_primitivearrays_PrimitiveArrays() {
  }

  /**
   * @return {void}
   * @public
   */
  m_main() {
    let bytes = /**@type {Array<number>} */ ($Arrays.$create([100], $byte));
    let bytes2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $byte));
    let shorts = /**@type {Array<number>} */ ($Arrays.$create([100], $short));
    let shorts2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $short));
    let ints = /**@type {Array<number>} */ ($Arrays.$create([100], $int));
    let ints2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $int));
    let longs = /**@type {Array<!$Long>} */ ($Arrays.$create([100], $long));
    let longs2d =
        /**@type {Array<Array<!$Long>>} */ ($Arrays.$create([5, 10], $long));
    let floats = /**@type {Array<number>} */ ($Arrays.$create([100], $float));
    let floats2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $float));
    let doubles = /**@type {Array<number>} */ ($Arrays.$create([100], $double));
    let doubles2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $double));
    let chars = /**@type {Array<number>} */ ($Arrays.$create([100], $char));
    let chars2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $char));
    let booleans =
        /**@type {Array<boolean>} */ ($Arrays.$create([100], $boolean));
    let booleans2d = /**@type {Array<Array<boolean>>} */ (
        $Arrays.$create([5, 10], $boolean));
    let foo = ints[0];
    foo = ints2d[0][1];
    $Arrays.$set(ints, 0, 10);
    $Arrays.$set(ints2d[0], 1, 20);
    $Arrays.$addSet(ints, 0, 1);
    $Arrays.$subSet(ints2d[0], 1, 1);
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!PrimitiveArrays}
   * @public
   * @nocollapse
   */
  static $create() {
    PrimitiveArrays.$clinit();
    let instance = new PrimitiveArrays;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_primitivearrays_PrimitiveArrays();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_primitivearrays_PrimitiveArrays() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_primitivearrays_PrimitiveArrays();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof PrimitiveArrays; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, PrimitiveArrays);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!PrimitiveArrays.$classPrimitiveArrays) {
      PrimitiveArrays.$classPrimitiveArrays = Class.$createForClass(
          $Util.$generateId('PrimitiveArrays'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.primitivearrays.PrimitiveArrays'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.primitivearrays.PrimitiveArrays'));
    }
    return PrimitiveArrays.$classPrimitiveArrays;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.PrimitiveArrays = PrimitiveArrays;
