/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.primitivearrays.PrimitiveArrays.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.primitivearrays.PrimitiveArrays$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Long = goog.require('nativebootstrap.Long$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');
let $byte = goog.forwardDeclare('vmbootstrap.primitives.$byte$impl');
let $char = goog.forwardDeclare('vmbootstrap.primitives.$char$impl');
let $double = goog.forwardDeclare('vmbootstrap.primitives.$double$impl');
let $float = goog.forwardDeclare('vmbootstrap.primitives.$float$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');
let $long = goog.forwardDeclare('vmbootstrap.primitives.$long$impl');
let $short = goog.forwardDeclare('vmbootstrap.primitives.$short$impl');


class PrimitiveArrays extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!PrimitiveArrays}
   * @public
   */
  static $create() {
    PrimitiveArrays.$clinit();
    let $instance = new PrimitiveArrays;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_primitivearrays_PrimitiveArrays();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_primitivearrays_PrimitiveArrays() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_primitivearrays_PrimitiveArrays();
  }

  /**
   * @return {void}
   * @public
   */
  m_main() {
    let bytes = /**@type {Array<number>} */ ($Arrays.$create([100], $byte));
    let bytes2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $byte));
    let shorts = /**@type {Array<number>} */ ($Arrays.$create([100], $short));
    let shorts2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $short));
    let ints = /**@type {Array<number>} */ ($Arrays.$create([100], $int));
    let ints2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $int));
    let longs = /**@type {Array<!$Long>} */ ($Arrays.$create([100], $long));
    let longs2d =
        /**@type {Array<Array<!$Long>>} */ ($Arrays.$create([5, 10], $long));
    let floats = /**@type {Array<number>} */ ($Arrays.$create([100], $float));
    let floats2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $float));
    let doubles = /**@type {Array<number>} */ ($Arrays.$create([100], $double));
    let doubles2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $double));
    let chars = /**@type {Array<number>} */ ($Arrays.$create([100], $char));
    let chars2d =
        /**@type {Array<Array<number>>} */ ($Arrays.$create([5, 10], $char));
    let booleans =
        /**@type {Array<boolean>} */ ($Arrays.$create([100], $boolean));
    let booleans2d = /**@type {Array<Array<boolean>>} */ (
        $Arrays.$create([5, 10], $boolean));
    let foo = ints[0];
    foo = ints2d[0][1];
    $Arrays.$set(ints, 0, 10);
    $Arrays.$set(ints2d[0], 1, 20);
    $Arrays.$addSet(ints, 0, 1);
    $Arrays.$subSet(ints2d[0], 1, 1);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof PrimitiveArrays; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, PrimitiveArrays);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    PrimitiveArrays.$clinit();
    if (!PrimitiveArrays.$classPrimitiveArrays_) {
      PrimitiveArrays.$classPrimitiveArrays_ = Class.$createForClass(
          $Util.$generateId('PrimitiveArrays'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.primitivearrays.PrimitiveArrays'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.primitivearrays.PrimitiveArrays'));
    }
    return PrimitiveArrays.$classPrimitiveArrays_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return PrimitiveArrays.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    $byte = goog.module.get('vmbootstrap.primitives.$byte$impl');
    $char = goog.module.get('vmbootstrap.primitives.$char$impl');
    $double = goog.module.get('vmbootstrap.primitives.$double$impl');
    $float = goog.module.get('vmbootstrap.primitives.$float$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    $long = goog.module.get('vmbootstrap.primitives.$long$impl');
    $short = goog.module.get('vmbootstrap.primitives.$short$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_primitivearrays_PrimitiveArrays() {
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
PrimitiveArrays.$classPrimitiveArrays_ = null;



/**
 * Export class.
 */
exports = PrimitiveArrays;
//# sourceMappingURL=PrimitiveArrays.js.map