/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.interfacewithfields.Main$1.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.interfacewithfields.Main.$1$impl');


const MyInterface = goog.require('com.google.j2cl.transpiler.readable.interfacewithfields.MyInterface$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.interfacewithfields.Main$impl');


/**
 * @implements {MyInterface}
 */
class $1 extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
    /** @public {Main} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_interfacewithfields_Main_1 =
        null;
  }

  /**
   * Factory method corresponding to constructor 'new MyInterface(Main)'.
   * @param {Main} $outer_this
   * @return {!$1}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_interfacewithfields_Main(
      $outer_this) {
    $1.$clinit();
    let $instance = new $1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_interfacewithfields_Main_1__com_google_j2cl_transpiler_readable_interfacewithfields_Main(
            $outer_this);
    return $instance;
  }

  /**
   * Initialization from constructor 'new MyInterface(Main)'.
   * @param {Main} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_interfacewithfields_Main_1__com_google_j2cl_transpiler_readable_interfacewithfields_Main(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_interfacewithfields_Main_1 =
        $outer_this;
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_interfacewithfields_Main_1();
  }

  /**
   * @override
   * @return {void}
   * @public
   */
  m_e__() {}

  /**
   * @override
   * @return {void}
   * @public
   */
  m_g__() {}

  /**
   * Default method forwarding stub.
   * @override
   * @return {void}
   * @public
   */
  m_d__() {
    MyInterface
        .m_d__$default__com_google_j2cl_transpiler_readable_interfacewithfields_MyInterface(
            this);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $1;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $1);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $1.$clinit = function() {};
    java_lang_Object.$clinit();
    MyInterface.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_interfacewithfields_Main_1() {}
};

$Util.$setClassMetadata(
    $1,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.interfacewithfields.Main$1'));


MyInterface.$markImplementor($1);


/**
 * Export class.
 */
exports = $1;
//# sourceMappingURL=Main$1.js.map