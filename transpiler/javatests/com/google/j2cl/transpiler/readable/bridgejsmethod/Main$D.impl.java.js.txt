/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.bridgejsmethod.Main$D.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.D$impl');


let Main$A = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.A$impl');
let Main$I = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.I$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @extends {Main$A<Integer>}
 * @implements {Main$I<Integer>}
 */
class Main$D extends Main$A {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Main$D}
   * @public
   */
  static $create__() {
    Main$D.$clinit();
    let $instance = new Main$D();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main$D__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main$D__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main$A__();
    this.$init__com_google_j2cl_transpiler_readable_bridgejsmethod_Main$D();
  }

  /**
   * @param {Integer} i
   * @return {Integer}
   * @public
   */
  m_fun__java_lang_Integer(i) {
    return i;
  }

  /**
   * Bridge method.
   * @override
   * @param {Integer} arg0
   * @return {Integer}
   * @public
   */
  fun(arg0) {
    return this.m_fun__java_lang_Integer(
        /**@type {Integer} */ ($Casts.to(arg0, Integer)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Main$D;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main$D);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Integer = goog.module.get('java.lang.Integer$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    Main$A.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgejsmethod_Main$D() {}
};

$Util.$setClassMetadata(
    Main$D, $Util.$makeClassName(
                'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$D'));


Main$I.$markImplementor(Main$D);


/**
 * Export class.
 */
exports = Main$D;
//# sourceMappingURL=Main$D.js.map