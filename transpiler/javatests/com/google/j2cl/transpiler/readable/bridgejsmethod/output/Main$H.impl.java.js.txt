/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgejsmethod.Main$H.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.H$impl');


const G = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.G$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template C_H_V
 * @implements {G<C_H_V>}
 */
class H extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @template C_H_V
   * @return {!H<C_H_V>}
   * @public
   */
  static $create__() {
    H.$clinit();
    let $instance = new H();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_H__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_H__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {C_H_V} value
   * @return {C_H_V}
   * @public
   */
  enclose(value) {
    return null;
  }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @param {C_H_V} arg0
   * @return {C_H_V}
   * @public
   */
  m_enclose__java_lang_Object(arg0) {
    return this.enclose(arg0);
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    H.$clinit = (() => {});
    H.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof H;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, H);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    H,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$H'));


G.$markImplementor(H);


exports = H;
//# sourceMappingURL=Main$H.js.map