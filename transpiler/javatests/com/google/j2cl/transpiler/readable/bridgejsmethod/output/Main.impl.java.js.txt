/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgejsmethod.Main.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let A = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.A$impl');
let B = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.B$impl');
let C = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.C$impl');
let D = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.D$impl');
let E = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.E$impl');
let H = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.H$impl');
let L = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.L$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');


class Main extends java_lang_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'Main()'.
   * @return {!Main}
   * @public
   */
  static $create__() {
    Main.$clinit();
    let $instance = new Main();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main__();
    return $instance;
  }

  /**
   * Initialization from constructor 'Main()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {void}
   * @public
   */
  static m_test__() {
    Main.$clinit();
    let a = /**@type {!A<Integer>} */ (A.$create__());
    a.fun(Integer.m_valueOf__int(1));
    a.m_bar__java_lang_Object(Integer.m_valueOf__int(1));
    let b = B.$create__();
    b.fun('abc');
    b.bar('abc');
    let c = C.$create__();
    c.fun(Integer.m_valueOf__int(1));
    c.m_bar__java_lang_Object(Integer.m_valueOf__int(1));
    let d = D.$create__();
    d.fun(Integer.m_valueOf__int(1));
    d.m_bar__java_lang_Object(Integer.m_valueOf__int(1));
    let e = E.$create__();
    e.fun('abc');
    e.bar('abc');
    let h = /**@type {!H<Integer>} */ (H.$create__());
    h.enclose(Integer.m_valueOf__int(1));
    let l = /**@type {!L<Integer>} */ (L.$create__());
    l.fun('foo', Integer.m_valueOf__int(1));
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Main;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * @public
   */
  static $clinit() {
    Main.$clinit = function() {};
    A = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.A$impl');
    B = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.B$impl');
    C = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.C$impl');
    D = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.D$impl');
    E = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.E$impl');
    H = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.H$impl');
    L = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.L$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    Main,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main'));



exports = Main;
//# sourceMappingURL=Main.js.map