/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgejsmethod.Main$F.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.F$impl');


const A = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.A$impl');
const I = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.I$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @extends {A<Integer>}
 * @implements {I<Integer>}
 */
class F extends A {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'F()'.
   * @return {!F}
   * @public
   */
  static $create__() {
    F.$clinit();
    let $instance = new F();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_F__();
    return $instance;
  }

  /**
   * Initialization from constructor 'F()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_F__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_A__();
    this.$init__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_F();
  }

  /**
   * Bridge method.
   * @override
   * @param {(Number|?number)} arg0
   * @return {Integer}
   * @public
   */
  fun(arg0) {
    return /**@type {Integer} */ ($Casts.$to(
        super.fun(/**@type {Integer} */ ($Casts.$to(arg0, Integer))), Integer));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof F;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, F);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    F.$clinit = function() {};
    Integer = goog.module.get('java.lang.Integer$impl');
    Number = goog.module.get('java.lang.Number$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    A.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_F() {}
};

$Util.$setClassMetadata(
    F,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$F'));


I.$markImplementor(F);


/**
 * Export class.
 */
exports = F;
//# sourceMappingURL=Main$F.js.map