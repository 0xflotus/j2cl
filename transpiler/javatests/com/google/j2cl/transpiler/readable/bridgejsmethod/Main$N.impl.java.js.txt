/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgejsmethod.Main$N.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.N$impl');


const M = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.M$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main$impl');
let B = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.B$impl');


/**
 * @abstract
 * @implements {M}
 */
class N extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
    /** @public {Main} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N =
        null;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {Main} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N =
        $outer_this;
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N();
  }

  /**
   * @abstract
   * @return {B}
   * @public
   */
  getB() {}

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @return {B}
   * @public
   */
  m_getB__() {
    return this.getB();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof N;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, N);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    N.$clinit = function() {};
    Main = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$impl');
    B = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main.B$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_N() {}
};

$Util.$setClassMetadata(
    N,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$N'));


M.$markImplementor(N);


/**
 * Export class.
 */
exports = N;
//# sourceMappingURL=Main$N.js.map