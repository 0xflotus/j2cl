/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgejsmethod.Main$D.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.D$impl');


const A = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.A$impl');
const I = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.I$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let java_lang_Object = goog.forwardDeclare('java.lang.Object$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @extends {A<Integer>}
 * @implements {I<Integer>}
 */
class D extends A {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'D()'.
   * @return {!D}
   * @public
   */
  static $create__() {
    D.$clinit();
    let $instance = new D();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_D__();
    return $instance;
  }

  /**
   * Initialization from constructor 'D()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_D__() {
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_A__();
    this.$init__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_D();
  }

  /**
   * @param {Integer} i
   * @return {Integer}
   * @public
   */
  m_fun__java_lang_Integer(i) {
    return i;
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {Integer}
   * @public
   */
  fun(arg0) {
    return this.m_fun__java_lang_Integer(
        /**@type {Integer} */ ($Casts.$to(arg0, Integer)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof D;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, D);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    D.$clinit = function() {};
    Integer = goog.module.get('java.lang.Integer$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    A.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_D() {}
};

$Util.$setClassMetadata(
    D,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$D'));


I.$markImplementor(D);


/**
 * Export class.
 */
exports = D;
//# sourceMappingURL=Main$D.js.map