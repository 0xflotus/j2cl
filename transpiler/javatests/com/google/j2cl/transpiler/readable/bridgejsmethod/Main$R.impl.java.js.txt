/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgejsmethod.Main$R.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.R$impl');


const Q = goog.require('com.google.j2cl.transpiler.readable.bridgejsmethod.Main.Q$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgejsmethod.Main$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');


/**
 * @abstract
 */
class R extends Q {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
    /** @public {Main} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_R =
        null;
  }

  /**
   * Initialization from constructor 'R(Main)'.
   * @param {Main} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_R__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_R =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_Q__com_google_j2cl_transpiler_readable_bridgejsmethod_Main(
        $outer_this);
    this.$init__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_R();
  }

  /**
   * @override
   * @return {?string}
   * @public
   */
  getKey() {
    return null;
  }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @return {?string}
   * @public
   */
  m_getKey__() {
    return this.getKey();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof R;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, R);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    R.$clinit = function() {};
    Q.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgejsmethod_Main_R() {}
};

$Util.$setClassMetadata(
    R,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgejsmethod.Main$R'));



/**
 * Export class.
 */
exports = R;
//# sourceMappingURL=Main$R.js.map