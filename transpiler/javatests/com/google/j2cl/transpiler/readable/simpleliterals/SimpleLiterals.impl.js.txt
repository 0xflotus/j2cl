/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.simpleliterals.SimpleLiterals.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.simpleliterals.SimpleLiterals$impl');


let Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');
let String = goog.forwardDeclare('java.lang.String$impl');
let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');
let $char = goog.forwardDeclare('vmbootstrap.primitives.$char$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class SimpleLiterals extends Object {
  /**
   * Defines instance fields.
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!SimpleLiterals}
   * @public
   */
  static $create() {
    SimpleLiterals.$clinit();
    let $instance = new SimpleLiterals();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simpleliterals_SimpleLiterals();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_simpleliterals_SimpleLiterals() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_simpleliterals_SimpleLiterals();
  }

  /**
   * @return {void}
   * @public
   */
  m_main() {
    let a = false;
    let b = 97 /* 'a' */;
    let c = null;
    let d = 101;
    let e = 'foo';
    let f = /**@type {Class<SimpleLiterals>} */ (Class.$get(SimpleLiterals));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof SimpleLiterals; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SimpleLiterals);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('java.lang.Class$impl');
    String = goog.module.get('java.lang.String$impl');
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    $char = goog.module.get('vmbootstrap.primitives.$char$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simpleliterals_SimpleLiterals() {}
};

$Util.$setClassMetadata(
    SimpleLiterals,
    'com.google.j2cl.transpiler.readable.simpleliterals.SimpleLiterals');



/**
 * Export class.
 */
exports = SimpleLiterals;
//# sourceMappingURL=SimpleLiterals.js.map