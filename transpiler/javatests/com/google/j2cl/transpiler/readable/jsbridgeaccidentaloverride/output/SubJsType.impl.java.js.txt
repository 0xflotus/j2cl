/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.SubJsType.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.SubJsType$impl');


const MyInterface = goog.require('com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.MyInterface$impl');
const MyJsType = goog.require('com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.MyJsType$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @implements {MyInterface}
 */
class SubJsType extends MyJsType {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'SubJsType()'.
   * @return {!SubJsType}
   * @public
   */
  static $create__() {
    SubJsType.$clinit();
    let $instance = new SubJsType();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_SubJsType__();
    return $instance;
  }

  /**
   * Initialization from constructor 'SubJsType()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_SubJsType__() {
    this.$ctor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_MyJsType__();
  }

  /**
   * @override
   * @param {number} a
   * @return {number}
   * @public
   */
  bar(a) {
    return a + 2;
  }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @param {number} arg0
   * @return {number}
   * @public
   */
  m_bar__int(arg0) {
    return this.bar(arg0);
  }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @param {number} arg0
   * @return {number}
   * @public
   */
  m_foo__int(arg0) {
    return this.foo(arg0);
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SubJsType;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SubJsType);
  }

  /**
   * @public
   */
  static $clinit() {
    SubJsType.$clinit = function() {};
    MyJsType.$clinit();
  }
};

$Util.$setClassMetadata(
    SubJsType,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.SubJsType'));


MyInterface.$markImplementor(SubJsType);


exports = SubJsType;
//# sourceMappingURL=SubJsType.js.map