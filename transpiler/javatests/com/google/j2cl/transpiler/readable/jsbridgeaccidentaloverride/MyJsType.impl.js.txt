/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.MyJsType.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.MyJsType$impl');


let OtherInterface = goog.require('gen.com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.OtherInterface$impl');
let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @implements {OtherInterface}
 */
class MyJsType extends Object {
  /**
   * Real constructor.
   * @public
   */
  constructor() {
    MyJsType.$clinit();
    super();
    this.$ctor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_MyJsType();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!MyJsType}
   * @public
   */
  static $create() { return new MyJsType(); }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_MyJsType() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_MyJsType();
  }

  /**
   * @param {number} a
   * @return {number}
   * @public
   */
  foo(a) { return a; }

  /**
   * @param {number} a
   * @return {number}
   * @public
   */
  bar(a) { return a + 1; }

  /**
   * @param {number} a
   * @return {number}
   * @public
   */
  fun(a) { return a - 1; }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @param {number} arg0
   * @return {number}
   * @public
   */
  m_fun__int(arg0) { return this.fun(arg0); }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof MyJsType; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MyJsType);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    MyJsType.$clinit();
    if (!MyJsType.$classMyJsType_) {
      MyJsType.$classMyJsType_ = Class.$createForClass(
          $Util.$generateId('MyJsType'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.MyJsType'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.MyJsType'));
    }
    return MyJsType.$classMyJsType_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return MyJsType.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_MyJsType() {
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
MyJsType.$classMyJsType_ = null;


OtherInterface.$markImplementor(MyJsType);


/**
 * Export class.
 */
exports = MyJsType;
//# sourceMappingURL=MyJsType.js.map