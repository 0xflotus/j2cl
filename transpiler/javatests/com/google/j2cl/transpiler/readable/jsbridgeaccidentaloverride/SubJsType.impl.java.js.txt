/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.SubJsType.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.SubJsType$impl');


let MyInterface = goog.require('com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.MyInterface$impl');
let MyJsType = goog.require('com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.MyJsType$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @implements {MyInterface}
 */
class SubJsType extends MyJsType {
  /**
   * Real constructor.
   * @public
   */
  constructor() {
    super();
    this.$ctor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_SubJsType__();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!SubJsType}
   * @public
   */
  static $create__() {
    SubJsType.$clinit();
    return new SubJsType();
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_SubJsType__() {
    this.$init__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_SubJsType();
  }

  /**
   * @override
   * @param {number} a
   * @return {number}
   * @public
   */
  bar(a) {
    return a + 2;
  }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @param {number} arg0
   * @return {number}
   * @public
   */
  m_bar__int(arg0) {
    return this.bar(arg0);
  }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @param {number} arg0
   * @return {number}
   * @public
   */
  m_foo__int(arg0) {
    return this.foo(arg0);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SubJsType;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SubJsType);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    MyJsType.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsbridgeaccidentaloverride_SubJsType() {
  }
};

$Util.$setClassMetadata(
    SubJsType,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsbridgeaccidentaloverride.SubJsType'));


MyInterface.$markImplementor(SubJsType);


/**
 * Export class.
 */
exports = SubJsType;
//# sourceMappingURL=SubJsType.js.map