/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.interfacejsbridge.InterfaceImpl.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.interfacejsbridge.InterfaceImpl$impl');


const SubInterface = goog.require('com.google.j2cl.transpiler.readable.interfacejsbridge.SubInterface$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @implements {SubInterface}
 */
class InterfaceImpl extends java_lang_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'InterfaceImpl()'.
   * @return {!InterfaceImpl}
   * @public
   */
  static $create__() {
    InterfaceImpl.$clinit();
    let $instance = new InterfaceImpl();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_interfacejsbridge_InterfaceImpl__();
    return $instance;
  }

  /**
   * Initialization from constructor 'InterfaceImpl()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_interfacejsbridge_InterfaceImpl__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @override
   * @param {number} a
   * @return {number}
   * @public
   */
  foo(a) {
    return 0;
  }

  /**
   * Bridge method for exposing non-JsMethod.
   * @override
   * @param {number} arg0
   * @return {number}
   * @public
   */
  m_foo__int(arg0) {
    return this.foo(arg0);
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof InterfaceImpl;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, InterfaceImpl);
  }

  /**
   * @public
   */
  static $clinit() {
    InterfaceImpl.$clinit = function() {};
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    InterfaceImpl,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.interfacejsbridge.InterfaceImpl'));


SubInterface.$markImplementor(InterfaceImpl);


exports = InterfaceImpl;
//# sourceMappingURL=InterfaceImpl.js.map