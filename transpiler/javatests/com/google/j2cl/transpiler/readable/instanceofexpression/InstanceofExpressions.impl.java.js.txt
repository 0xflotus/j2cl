/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.instanceofexpression.InstanceofExpressions.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.instanceofexpression.InstanceofExpressions$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Serializable = goog.forwardDeclare('java.io.Serializable$impl');
let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Byte = goog.forwardDeclare('java.lang.Byte$impl');
let Character = goog.forwardDeclare('java.lang.Character$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Float = goog.forwardDeclare('java.lang.Float$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Long = goog.forwardDeclare('java.lang.Long$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let Short = goog.forwardDeclare('java.lang.Short$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');


class InstanceofExpressions extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'InstanceofExpressions()'.
   * @return {!InstanceofExpressions}
   * @public
   */
  static $create__() {
    InstanceofExpressions.$clinit();
    let $instance = new InstanceofExpressions();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_instanceofexpression_InstanceofExpressions__();
    return $instance;
  }

  /**
   * Initialization from constructor 'InstanceofExpressions()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_instanceofexpression_InstanceofExpressions__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_instanceofexpression_InstanceofExpressions();
  }

  /**
   * @return {void}
   * @public
   */
  m_testInstanceofClass__() {
    let object = InstanceofExpressions.$create__();
    $Asserts.$assert(InstanceofExpressions.$isInstance(object));
    $Asserts.$assert(java_lang_Object.$isInstance(object));
    $Asserts.$assert(!java_lang_String.$isInstance(object));
  }

  /**
   * @return {boolean}
   * @public
   */
  m_testInstanceofInterface__() {
    let o = java_lang_Object.$create__();
    return Serializable.$isInstance(o);
  }

  /**
   * @return {void}
   * @public
   */
  m_testInstanceofBoxedType__() {
    let b = Integer.$create__int(1);
    let a = Byte.$isInstance(b);
    a = Double.$isInstance(b);
    a = Float.$isInstance(b);
    a = Integer.$isInstance(b);
    a = Long.$isInstance(b);
    a = Short.$isInstance(b);
    a = Number.$isInstance(b);
    a = Character.$isInstance(b);
    a = Boolean.$isInstance(b);
  }

  /**
   * @return {void}
   * @public
   */
  m_testInstanceOfArray__() {
    let object = java_lang_Object.$create__();
    let a = $Arrays.$instanceIsOfType(object, java_lang_Object, 1);
    let b = $Arrays.$instanceIsOfType(object, java_lang_Object, 2);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof InstanceofExpressions;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, InstanceofExpressions);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    InstanceofExpressions.$clinit = function() {};
    Serializable = goog.module.get('java.io.Serializable$impl');
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Byte = goog.module.get('java.lang.Byte$impl');
    Character = goog.module.get('java.lang.Character$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Float = goog.module.get('java.lang.Float$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    Long = goog.module.get('java.lang.Long$impl');
    Number = goog.module.get('java.lang.Number$impl');
    Short = goog.module.get('java.lang.Short$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_instanceofexpression_InstanceofExpressions() {
  }
};

$Util.$setClassMetadata(
    InstanceofExpressions,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.instanceofexpression.InstanceofExpressions'));



/**
 * Export class.
 */
exports = InstanceofExpressions;
//# sourceMappingURL=InstanceofExpressions.js.map