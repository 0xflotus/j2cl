/**
 * Transpiled from
 * third_party/java_src/j2cl/transpiler/javatests/com/google/j2cl/transpiler/readable/classliteral/ClassLiteral.java.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.classliteral.ClassLiteralModule');


let Class = goog.require('gen.java.lang.CoreModule').Class;
let Object = goog.require('gen.java.lang.CoreModule').Object;
let $Util = goog.require('nativebootstrap.UtilModule').Util;


class ClassLiteral extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_classliteral_ClassLiteral() {}

  /**
   * @return {void}
   * @public
   */
  m_main() {
    let o = ClassLiteral.$class;
    o = ClassLiteral.$class.$forArray(2);
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!ClassLiteral}
   * @public
   * @nocollapse
   */
  static $create() {
    ClassLiteral.$clinit();
    let instance = new ClassLiteral;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_classliteral_ClassLiteral();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_classliteral_ClassLiteral() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_classliteral_ClassLiteral();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof ClassLiteral; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, ClassLiteral);
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;


/**
 * @public {Class}
 * @nocollapse
 */
ClassLiteral.$class = Class.$createForClass(
    $Util.$generateId('ClassLiteral'),
    $Util.$generateId(
        'com.google.j2cl.transpiler.readable.classliteral.ClassLiteral'),
    Object.$class,
    $Util.$generateId(
        'com.google.j2cl.transpiler.readable.classliteral.ClassLiteral'));

/**
 * Export class.
 */
exports.ClassLiteral = ClassLiteral;
