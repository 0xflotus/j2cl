/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.lambdawithgenericsanddefaults.Function$$Lambda$Function$1.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.lambdawithgenericsanddefaults.Function.$Lambda$Function$1$impl');


const com_google_j2cl_transpiler_readable_lambdawithgenericsanddefaults_Function = goog.require('com.google.j2cl.transpiler.readable.lambdawithgenericsanddefaults.Function$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template M_T
 * @implements {com_google_j2cl_transpiler_readable_lambdawithgenericsanddefaults_Function<M_T, M_T>}
 */
class $Lambda$Function$1 extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'new Function()'.
   * @template M_T
   * @return {!$Lambda$Function$1<M_T>}
   * @public
   */
  static $create__() {
    $Lambda$Function$1.$clinit();
    let $instance = new $Lambda$Function$1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_lambdawithgenericsanddefaults_Function_$Lambda$Function$1__();
    return $instance;
  }

  /**
   * Initialization from constructor 'new Function()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_lambdawithgenericsanddefaults_Function_$Lambda$Function$1__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_lambdawithgenericsanddefaults_Function_$Lambda$Function$1();
  }

  /**
   * Lambda implementation method.
   * @override
   * @param {M_T} t
   * @return {M_T}
   * @public
   */
  m_apply__java_lang_Object(t) {
    return t;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $Lambda$Function$1;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $Lambda$Function$1);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Lambda$Function$1.$clinit = function() {};
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_lambdawithgenericsanddefaults_Function_$Lambda$Function$1() {
  }
};

$Util.$setClassMetadata(
    $Lambda$Function$1,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.lambdawithgenericsanddefaults.Function$$Lambda$Function$1'));


com_google_j2cl_transpiler_readable_lambdawithgenericsanddefaults_Function
    .$markImplementor($Lambda$Function$1);


/**
 * Export class.
 */
exports = $Lambda$Function$1;
//# sourceMappingURL=Function$$Lambda$Function$1.js.map