/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.packageinfo.Outer.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('readable.packageinfo.Outer$impl');


let Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');
let Outer$Inner = goog.forwardDeclare('readable.packageinfo.Outer$Inner$impl');


class Outer extends Object {
  /**
   * Real constructor.
   * @public
   */
  constructor() {
    Outer.$clinit();
    super();
    this.$ctor__com_google_j2cl_transpiler_readable_packageinfo_Outer();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Outer}
   * @public
   */
  static $create() {
    Outer.$clinit();
    return new Outer();
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_packageinfo_Outer() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_packageinfo_Outer();
  }

  /**
   * @return {Outer$Inner}
   * @public
   */
  $create_Outer$Inner() { return new Outer$Inner(this); }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof Outer; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Outer);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('java.lang.Class$impl');
    Outer$Inner = goog.module.get('readable.packageinfo.Outer$Inner$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_packageinfo_Outer() {}
};

$Util.$setClassMetadata(
    Outer, 'com.google.j2cl.transpiler.readable.packageinfo.Outer');



/**
 * Export class.
 */
exports = Outer;
//# sourceMappingURL=Outer.js.map