/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction$impl');


let MyFunction = goog.require('gen.com.google.j2cl.transpiler.readable.overwrittentypevariables.MyFunction$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let String = goog.forwardDeclare('gen.java.lang.String$impl');


/**
 * @interface
 * @template C_T
 * @extends {MyFunction<C_T, ?string>}
 */
class HashFunction {
  /**
   * Marks the provided class as implementing this interface.
   * @param {window.Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    MyFunction.$markImplementor(classConstructor);
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunction =
        true;
  }

  /**
   * Returns whether the provided instance is of a class that implements this
   * interface.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        instance
            .$implements__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunction;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        classConstructor.prototype
            .$implements__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunction;
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    HashFunction.$clinit();
    if (!HashFunction.$classHashFunction_) {
      HashFunction.$classHashFunction_ = Class.$createForInterface(
          $Util.$generateId('HashFunction'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction'));
    }
    return HashFunction.$classHashFunction_;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    String = goog.module.get('gen.java.lang.String$impl');
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
HashFunction.$classHashFunction_ = null;


HashFunction.$markImplementor(/** @type {window.Function} */ (HashFunction));


/**
 * Export class.
 */
exports = HashFunction;
//# sourceMappingURL=HashFunction.js.map