/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions$2.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.$2$impl');


let HashFunction = goog.require('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction$impl');
let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Enum = goog.forwardDeclare('java.lang.Enum$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template M_T
 * @implements {HashFunction<M_T>}
 */
class $2 extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @template M_T
   * @return {!$2<M_T>}
   * @public
   */
  static $create__() {
    $2.$clinit();
    let $instance = new $2();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions$2__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions$2__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions$2();
  }

  /**
   * @param {M_T} input
   * @return {?string}
   * @public
   */
  m_apply__java_lang_Enum(input) {
    return '' + input.ordinal();
  }

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {?string}
   * @public
   */
  m_apply__java_lang_Object(arg0) {
    return this.m_apply__java_lang_Enum(
        /**@type {M_T} */ ($Casts.to(arg0, Enum)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $2;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $2);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Enum = goog.module.get('java.lang.Enum$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions$2() {
  }
};

$Util.$setClassMetadata(
    $2,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions$2'));


HashFunction.$markImplementor($2);


/**
 * Export class.
 */
exports = $2;
//# sourceMappingURL=HashFunctions$2.js.map