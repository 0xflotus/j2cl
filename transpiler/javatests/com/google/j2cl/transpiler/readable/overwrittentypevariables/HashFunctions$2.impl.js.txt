/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions$2.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions$2$impl');


let HashFunction = goog.require('gen.com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction$impl');
let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let HashFunctions = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Enum = goog.forwardDeclare('gen.java.lang.Enum$impl');
let String = goog.forwardDeclare('gen.java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template M_T
 * @implements {HashFunction<M_T>}
 */
class HashFunctions$2 extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @template M_T
   * @return {!HashFunctions$2<M_T>}
   * @public
   */
  static $create() {
    HashFunctions$2.$clinit();
    let $instance = new HashFunctions$2;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions$2();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions$2() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions$2();
  }

  /**
   * @param {M_T} input
   * @return {?string}
   * @public
   */
  m_apply__java_lang_Enum(input) { return "" + input.m_ordinal(); }

  /**
   * Bridge method.
   * @param {M_T} arg0
   * @return {?string}
   * @public
   */
  m_apply__java_lang_Object(arg0) {
    return this.m_apply__java_lang_Enum(
        /**@type {M_T} */ ($Casts.to(arg0, Enum)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof HashFunctions$2; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, HashFunctions$2);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    HashFunctions$2.$clinit();
    if (!HashFunctions$2.$classHashFunctions$2_) {
      HashFunctions$2.$classHashFunctions$2_ = Class.$createForClass(
          $Util.$generateId('2'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions$2'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.2'));
    }
    return HashFunctions$2.$classHashFunctions$2_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return HashFunctions$2.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    HashFunctions = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    Enum = goog.module.get('gen.java.lang.Enum$impl');
    String = goog.module.get('gen.java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions$2() {
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
HashFunctions$2.$classHashFunctions$2_ = null;


HashFunction.$markImplementor(HashFunctions$2);


/**
 * Export class.
 */
exports = HashFunctions$2;
//# sourceMappingURL=HashFunctions$2.js.map