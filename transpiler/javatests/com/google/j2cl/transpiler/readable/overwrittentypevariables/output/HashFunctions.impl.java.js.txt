/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let HashFunction = goog.forwardDeclare('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunction$impl');
let $1 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.$1$impl');
let $2 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.$2$impl');
let Enum = goog.forwardDeclare('java.lang.Enum$impl');


class HashFunctions extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'HashFunctions()'.
   * @return {!HashFunctions}
   * @public
   */
  static $create__() {
    HashFunctions.$clinit();
    let $instance = new HashFunctions();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions__();
    return $instance;
  }

  /**
   * Initialization from constructor 'HashFunctions()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_overwrittentypevariables_HashFunctions__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @template M_T
   * @return {HashFunction<M_T>}
   * @public
   */
  static m_hashFunction__() {
    HashFunctions.$clinit();
    return /**@type {!$1<*>} */ ($1.$create__());
  }

  /**
   * @template M_T
   * @return {HashFunction<M_T>}
   * @public
   */
  static m_enumHashFunction__() {
    HashFunctions.$clinit();
    return /**@type {!$2<Enum>} */ ($2.$create__());
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof HashFunctions;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, HashFunctions);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    HashFunctions.$clinit = function() {};
    $1 = goog.module.get(
        'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.$1$impl');
    $2 = goog.module.get(
        'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions.$2$impl');
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    HashFunctions,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.overwrittentypevariables.HashFunctions'));



/**
 * Export class.
 */
exports = HashFunctions;
//# sourceMappingURL=HashFunctions.js.map