/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.lambdas.Lambdas$Functional.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.lambdas.Lambdas.Functional$impl');


const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdas.Lambdas.Functional.$LambdaAdaptor$impl');


/**
 * @interface
 * @template C_Functional_T
 */
class Functional {
  /**
   * @abstract
   * @param {Functional<C_Functional_T>} f
   * @return {Functional<C_Functional_T>}
   * @public
   */
  m_wrap__com_google_j2cl_transpiler_readable_lambdas_Lambdas_Functional(f) {}

  /**
   * @template C_Functional_T
   * @param {?function(Functional<C_Functional_T>):Functional<C_Functional_T>} fn
   * @return {Functional<C_Functional_T>}
   * @public
   */
  static $adapt(fn) {
    Functional.$clinit();
    return /**@type {!$LambdaAdaptor<*>} */ (new $LambdaAdaptor(fn));
  }

  /**
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_Functional =
        true;
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_Functional;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_lambdas_Lambdas_Functional;
  }

  /**
   * @public
   */
  static $clinit() {
    Functional.$clinit = function() {};
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdas.Lambdas.Functional.$LambdaAdaptor$impl');
  }
};

$Util.$setClassMetadataForInterface(
    Functional,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.lambdas.Lambdas$Functional'));


Functional.$markImplementor(/** @type {Function} */ (Functional));


exports = Functional;
//# sourceMappingURL=Lambdas$Functional.js.map