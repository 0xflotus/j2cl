/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethoddefault.BridgeMethodDefault$B.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgemethoddefault.BridgeMethodDefault$B$impl');


let BridgeMethodDefault$JJ = goog.require('com.google.j2cl.transpiler.readable.bridgemethoddefault.BridgeMethodDefault$JJ$impl');
let Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let BridgeMethodDefault$JJ$$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgemethoddefault.BridgeMethodDefault$JJ$$Overlay$impl');
let BridgeMethodDefault = goog.forwardDeclare('com.google.j2cl.transpiler.readable.bridgemethoddefault.BridgeMethodDefault$impl');
let Class = goog.forwardDeclare('java.lang.Class$impl');


/**
 * @implements {BridgeMethodDefault$JJ}
 */
class BridgeMethodDefault$B extends Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
    /** @public {BridgeMethodDefault} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgemethoddefault_BridgeMethodDefault$B =
        null;
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {BridgeMethodDefault} $outer_this
   * @return {!BridgeMethodDefault$B}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_bridgemethoddefault_BridgeMethodDefault(
      $outer_this) {
    BridgeMethodDefault$B.$clinit();
    let $instance = new BridgeMethodDefault$B();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethoddefault_BridgeMethodDefault$B__com_google_j2cl_transpiler_readable_bridgemethoddefault_BridgeMethodDefault(
            $outer_this);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {BridgeMethodDefault} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethoddefault_BridgeMethodDefault$B__com_google_j2cl_transpiler_readable_bridgemethoddefault_BridgeMethodDefault(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_bridgemethoddefault_BridgeMethodDefault$B =
        $outer_this;
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_bridgemethoddefault_BridgeMethodDefault$B();
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {*} arg0
   * @return {void}
   * @public
   */
  m(arg0) {
    BridgeMethodDefault$JJ$$Overlay
        .m_m__com_google_j2cl_transpiler_readable_bridgemethoddefault_BridgeMethodDefault$JJ__java_lang_Object(
            this, arg0);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof BridgeMethodDefault$B;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, BridgeMethodDefault$B);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    BridgeMethodDefault$JJ$$Overlay = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgemethoddefault.BridgeMethodDefault$JJ$$Overlay$impl');
    BridgeMethodDefault = goog.module.get(
        'com.google.j2cl.transpiler.readable.bridgemethoddefault.BridgeMethodDefault$impl');
    Class = goog.module.get('java.lang.Class$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_bridgemethoddefault_BridgeMethodDefault$B() {
  }
};

$Util.$setClassMetadata(
    BridgeMethodDefault$B,
    'com.google.j2cl.transpiler.readable.bridgemethoddefault.BridgeMethodDefault$B');


BridgeMethodDefault$JJ.$markImplementor(BridgeMethodDefault$B);


/**
 * Export class.
 */
exports = BridgeMethodDefault$B;
//# sourceMappingURL=BridgeMethodDefault$B.js.map