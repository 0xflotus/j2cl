/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethoddefault.I$$LambdaAdaptor.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgemethoddefault.I.$LambdaAdaptor$impl');


const I = goog.require('com.google.j2cl.transpiler.readable.bridgemethoddefault.I$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template C_T
 * @implements {I<C_T>}
 */
class $LambdaAdaptor extends java_lang_Object {
  /**
   * JsConstructor '$LambdaAdaptor($JsFunction)'.
   * @param {?function(C_T):void} fn
   * @public
   */
  constructor(fn) {
    $LambdaAdaptor.$clinit();
    super();
    /** @public {?function(C_T):void} */
    this.f_$$fn__com_google_j2cl_transpiler_readable_bridgemethoddefault_I_$LambdaAdaptor;
    this.$ctor__com_google_j2cl_transpiler_readable_bridgemethoddefault_I_$LambdaAdaptor__com_google_j2cl_transpiler_readable_bridgemethoddefault_I_$JsFunction(
        fn);
  }

  /**
   * Initialization from constructor '$LambdaAdaptor($JsFunction)'.
   * @param {?function(C_T):void} fn
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethoddefault_I_$LambdaAdaptor__com_google_j2cl_transpiler_readable_bridgemethoddefault_I_$JsFunction(
      fn) {
    this.$ctor__java_lang_Object__();
    this.f_$$fn__com_google_j2cl_transpiler_readable_bridgemethoddefault_I_$LambdaAdaptor =
        fn;
  }

  /**
   * @param {C_T} arg0
   * @return {void}
   * @public
   */
  m_m__java_lang_Object(arg0) {
    {
      let $function =
          this.f_$$fn__com_google_j2cl_transpiler_readable_bridgemethoddefault_I_$LambdaAdaptor;
      $function(arg0);
    }
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $LambdaAdaptor;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $LambdaAdaptor);
  }

  /**
   * @public
   */
  static $clinit() {
    $LambdaAdaptor.$clinit = function() {};
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    $LambdaAdaptor,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgemethoddefault.I$$LambdaAdaptor'));


I.$markImplementor($LambdaAdaptor);


exports = $LambdaAdaptor;
//# sourceMappingURL=I$$LambdaAdaptor.js.map