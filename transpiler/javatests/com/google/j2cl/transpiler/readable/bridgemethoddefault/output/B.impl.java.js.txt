/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.bridgemethoddefault.B.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.bridgemethoddefault.B$impl');


const JJ = goog.require('com.google.j2cl.transpiler.readable.bridgemethoddefault.JJ$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @implements {JJ}
 */
class B extends j_l_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'B()'.
   * @return {!B}
   * @public
   */
  static $create__() {
    B.$clinit();
    let $instance = new B();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_bridgemethoddefault_B__();
    return $instance;
  }

  /**
   * Initialization from constructor 'B()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_bridgemethoddefault_B__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {*} arg0
   * @return {void}
   * @public
   */
  m(arg0) {
    JJ.m_m__$default__com_google_j2cl_transpiler_readable_bridgemethoddefault_JJ__java_lang_Object(
        this, arg0);
  }

  /**
   * Bridge to JsMethod.
   * @param {*} arg0
   * @return {void}
   * @public
   */
  m_m__java_lang_Object(arg0) {
    this.m(arg0);
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof B;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, B);
  }

  /**
   * @public
   */
  static $clinit() {
    B.$clinit = function() {};
    j_l_Object.$clinit();
    JJ.$clinit();
  }
};

$Util.$setClassMetadata(
    B,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.bridgemethoddefault.B'));


JJ.$markImplementor(B);


exports = B;
//# sourceMappingURL=B.js.map