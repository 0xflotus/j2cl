/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.staticjsmethodswithclassnamespace.StaticJsMethodsWithClassNamespace.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('woo.StaticJsMethodsWithClassNamespace$impl');


let Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');


class StaticJsMethodsWithClassNamespace extends Object {
  /**
   * Real constructor.
   * @public
   */
  constructor() {
    StaticJsMethodsWithClassNamespace.$clinit();
    super();
    this.$ctor__com_google_j2cl_transpiler_readable_staticjsmethodswithclassnamespace_StaticJsMethodsWithClassNamespace();
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_staticjsmethodswithclassnamespace_StaticJsMethodsWithClassNamespace() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_staticjsmethodswithclassnamespace_StaticJsMethodsWithClassNamespace();
  }

  /**
   * @return {void}
   * @public
   */
  static replacedName() { StaticJsMethodsWithClassNamespace.$clinit(); }

  /**
   * @return {void}
   * @public
   */
  test() {
    StaticJsMethodsWithClassNamespace.replacedName();
    StaticJsMethodsWithClassNamespace.replacedName();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof StaticJsMethodsWithClassNamespace;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(
        classConstructor, StaticJsMethodsWithClassNamespace);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('java.lang.Class$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_staticjsmethodswithclassnamespace_StaticJsMethodsWithClassNamespace() {
  }
};

$Util.$setClassMetadata(
    StaticJsMethodsWithClassNamespace,
    'com.google.j2cl.transpiler.readable.staticjsmethodswithclassnamespace.StaticJsMethodsWithClassNamespace');



/**
 * Export class.
 */
exports = StaticJsMethodsWithClassNamespace;
//# sourceMappingURL=StaticJsMethodsWithClassNamespace.js.map