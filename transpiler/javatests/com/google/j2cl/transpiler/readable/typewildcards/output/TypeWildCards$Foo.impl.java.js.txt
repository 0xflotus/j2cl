/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards$Foo.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.Foo$impl');


const GenericType = goog.require('com.google.j2cl.transpiler.readable.typewildcards.GenericType$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let TypeWildCards = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards$impl');


/**
 * @extends {GenericType<Foo>}
 */
class Foo extends GenericType {
  /**
   * @private
   */
  constructor() {
    super();
    /** @public {TypeWildCards} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_Foo =
        null;
  }

  /**
   * Factory method corresponding to constructor 'Foo(TypeWildCards)'.
   * @param {TypeWildCards} $outer_this
   * @return {!Foo}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
      $outer_this) {
    Foo.$clinit();
    let $instance = new Foo();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_Foo__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
            $outer_this);
    return $instance;
  }

  /**
   * Initialization from constructor 'Foo(TypeWildCards)'.
   * @param {TypeWildCards} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_Foo__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_Foo =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_typewildcards_GenericType__();
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Foo;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Foo);
  }

  /**
   * @public
   */
  static $clinit() {
    Foo.$clinit = function() {};
    GenericType.$clinit();
  }
};

$Util.$setClassMetadata(
    Foo,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards$Foo'));



exports = Foo;
//# sourceMappingURL=TypeWildCards$Foo.js.map