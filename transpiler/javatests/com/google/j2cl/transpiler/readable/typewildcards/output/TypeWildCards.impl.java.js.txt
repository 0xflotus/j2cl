/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let GenericType = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typewildcards.GenericType$impl');
let A = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.A$impl');
let Foo = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.Foo$impl');
let HasKey = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.HasKey$impl');
let IntegerSupplier = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.IntegerSupplier$impl');
let Y = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.Y$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let List = goog.forwardDeclare('java.util.List$impl');
let java_util_function_Function = goog.forwardDeclare('java.util.function.Function$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


class TypeWildCards extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'TypeWildCards()'.
   * @return {!TypeWildCards}
   * @public
   */
  static $create__() {
    TypeWildCards.$clinit();
    let $instance = new TypeWildCards();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards__();
    return $instance;
  }

  /**
   * Initialization from constructor 'TypeWildCards()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards();
  }

  /**
   * @param {GenericType<?>} g
   * @return {void}
   * @public
   */
  m_unbounded__com_google_j2cl_transpiler_readable_typewildcards_GenericType(
      g) {}

  /**
   * @param {GenericType<?>} g
   * @return {void}
   * @public
   */
  m_upperBound__com_google_j2cl_transpiler_readable_typewildcards_GenericType(
      g) {}

  /**
   * @param {GenericType<?>} g
   * @return {void}
   * @public
   */
  m_lowerBound__com_google_j2cl_transpiler_readable_typewildcards_GenericType(
      g) {}

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    this.m_unbounded__com_google_j2cl_transpiler_readable_typewildcards_GenericType(
        /**@type {!GenericType<TypeWildCards>} */ (GenericType.$create__()));
    this.m_upperBound__com_google_j2cl_transpiler_readable_typewildcards_GenericType(
        /**@type {!GenericType<TypeWildCards>} */ (GenericType.$create__()));
    this.m_lowerBound__com_google_j2cl_transpiler_readable_typewildcards_GenericType(
        /**@type {!GenericType<TypeWildCards>} */ (GenericType.$create__()));
  }

  /**
   * @template M_T
   * @param {M_T} t
   * @return {void}
   * @public
   */
  static m_testBoundedTypeMemberAccess__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_A(
      t) {
    TypeWildCards.$clinit();
    let i =
        /**@type {A} */
        (t).f_f__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_A;
    /**@type {A} */ (t).m_m__();
  }

  /**
   * @template M_T
   * @param {M_T} t
   * @return {void}
   * @public
   */
  static m_testIntersectionBoundedTypeMemberAccess__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_A(
      t) {
    TypeWildCards.$clinit();
    let i =
        /**@type {A} */
        (t).f_f__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards_A;
    /**@type {A} */ (t).m_m__();
    /**@type {Y} */ ($Casts.$to(t, Y)).m_n__();
  }

  /**
   * @template M_F, M_V
   * @param {List<M_F>} from
   * @param {java_util_function_Function<?, ?>} function$1$
   * @return {List<M_V>}
   * @public
   */
  static m_transform__java_util_List__java_util_function_Function_$p_com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
      from, function$1$) {
    TypeWildCards.$clinit();
    return null;
  }

  /**
   * @template M_E
   * @param {List<?>} a
   * @param {List<?>} b
   * @return {List<M_E>}
   * @public
   */
  static m_concat__java_util_List__java_util_List_$p_com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
      a, b) {
    TypeWildCards.$clinit();
    return null;
  }

  /**
   * @return {void}
   * @public
   */
  m_testInferredGenericIntersection__() {
    let elements = null;
    let otherElements = null;
    let integers = /**@type {List<Integer>} */ (
        TypeWildCards
            .m_transform__java_util_List__java_util_function_Function_$p_com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
                /**@type {List<?>} */
                (TypeWildCards
                     .m_concat__java_util_List__java_util_List_$p_com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
                         elements, otherElements)),
                java_util_function_Function.$adapt(((/** HasKey */ a) => {
                  /**@type {HasKey} */ (a).m_getKey__();
                  return /**@type {IntegerSupplier} */ (
                             $Casts.$to(a, IntegerSupplier))
                      .m_get__();
                }))));
  }

  /**
   * @param {GenericType<Foo>} foo
   * @return {void}
   * @public
   */
  static m_takesRecursiveGeneric__com_google_j2cl_transpiler_readable_typewildcards_GenericType_$p_com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
      foo) {
    TypeWildCards.$clinit();
  }

  /**
   * @return {void}
   * @public
   */
  m_testRecursiveGeneric__() {
    TypeWildCards
        .m_takesRecursiveGeneric__com_google_j2cl_transpiler_readable_typewildcards_GenericType_$p_com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
            Foo.$create__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards(
                this));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof TypeWildCards;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, TypeWildCards);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    TypeWildCards.$clinit = function() {};
    GenericType = goog.module.get(
        'com.google.j2cl.transpiler.readable.typewildcards.GenericType$impl');
    Foo = goog.module.get(
        'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.Foo$impl');
    IntegerSupplier = goog.module.get(
        'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.IntegerSupplier$impl');
    Y = goog.module.get(
        'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards.Y$impl');
    java_util_function_Function =
        goog.module.get('java.util.function.Function$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_typewildcards_TypeWildCards() {}
};

$Util.$setClassMetadata(
    TypeWildCards,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.typewildcards.TypeWildCards'));



/**
 * Export class.
 */
exports = TypeWildCards;
//# sourceMappingURL=TypeWildCards.js.map