/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.gwtincompatible.Implementor.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.gwtincompatible.Implementor$impl');


let Interface = goog.require('com.google.j2cl.transpiler.readable.gwtincompatible.Interface$impl');
let Interface$ClassWithAbstractMethod = goog.require('com.google.j2cl.transpiler.readable.gwtincompatible.Interface.ClassWithAbstractMethod$impl');
let Interface$NestedInterface = goog.require('com.google.j2cl.transpiler.readable.gwtincompatible.Interface.NestedInterface$impl');
let $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @implements {Interface}
 * @implements {Interface$NestedInterface}
 */
class Implementor extends Interface$ClassWithAbstractMethod {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Implementor}
   * @public
   */
  static $create__() {
    Implementor.$clinit();
    let $instance = new Implementor();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_gwtincompatible_Implementor__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_gwtincompatible_Implementor__() {
    this.$ctor__com_google_j2cl_transpiler_readable_gwtincompatible_Interface$ClassWithAbstractMethod__();
    this.$init__com_google_j2cl_transpiler_readable_gwtincompatible_Implementor();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof Implementor; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Implementor);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() { Interface$ClassWithAbstractMethod.$clinit(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_gwtincompatible_Implementor() {}
};

$Util.$setClassMetadata(
    Implementor,
    'com.google.j2cl.transpiler.readable.gwtincompatible.Implementor');


Interface.$markImplementor(Implementor);
Interface$NestedInterface.$markImplementor(Implementor);


/**
 * Export class.
 */
exports = Implementor;
//# sourceMappingURL=Implementor.js.map