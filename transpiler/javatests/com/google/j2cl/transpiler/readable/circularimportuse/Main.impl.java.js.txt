/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.circularimportuse.Main.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.circularimportuse.Main$impl');


let Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Left = goog.forwardDeclare('com.google.j2cl.transpiler.readable.circularimportuse.Left$impl');
let Right = goog.forwardDeclare('com.google.j2cl.transpiler.readable.circularimportuse.Right$impl');
let String = goog.forwardDeclare('java.lang.String$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');


class Main extends Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Main}
   * @public
   */
  static $create__() {
    Main.$clinit();
    let $instance = new Main();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_circularimportuse_Main__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_circularimportuse_Main__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_circularimportuse_Main();
  }

  /**
   * @param {Array<?string>} args
   * @return {void}
   * @public
   */
  static m_main__arrayOf_java_lang_String(args) {
    Main.$clinit();
    let left = Left.$create__();
    let right = Right.$create__();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof Main; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Left = goog.module.get(
        'com.google.j2cl.transpiler.readable.circularimportuse.Left$impl');
    Right = goog.module.get(
        'com.google.j2cl.transpiler.readable.circularimportuse.Right$impl');
    String = goog.module.get('java.lang.String$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_circularimportuse_Main() {}
};

$Util.$setClassMetadata(
    Main, 'com.google.j2cl.transpiler.readable.circularimportuse.Main');



/**
 * Export class.
 */
exports = Main;
//# sourceMappingURL=Main.js.map