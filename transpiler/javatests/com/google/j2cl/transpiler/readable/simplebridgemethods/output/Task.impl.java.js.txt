/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.simplebridgemethods.Task.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.simplebridgemethods.Task$impl');


const Callable = goog.require('com.google.j2cl.transpiler.readable.simplebridgemethods.Callable$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template C_T
 * @implements {Callable<C_T>}
 */
class Task extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'Task()'.
   * @template C_T
   * @return {!Task<C_T>}
   * @public
   */
  static $create__() {
    Task.$clinit();
    let $instance = new Task();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Task__();
    return $instance;
  }

  /**
   * Initialization from constructor 'Task()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Task__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_simplebridgemethods_Task();
  }

  /**
   * @override
   * @param {C_T} t
   * @return {void}
   * @public
   */
  m_call__java_lang_Object(t) {}

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Task;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Task);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Task.$clinit = function() {};
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simplebridgemethods_Task() {}
};

$Util.$setClassMetadata(
    Task,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.simplebridgemethods.Task'));


Callable.$markImplementor(Task);


/**
 * Export class.
 */
exports = Task;
//# sourceMappingURL=Task.js.map