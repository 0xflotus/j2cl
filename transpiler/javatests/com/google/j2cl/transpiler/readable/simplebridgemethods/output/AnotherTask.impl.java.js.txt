/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherTask.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherTask$impl');


const Callable = goog.require('com.google.j2cl.transpiler.readable.simplebridgemethods.Callable$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Superclass = goog.forwardDeclare('com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass$impl');
let AssertionError = goog.forwardDeclare('java.lang.AssertionError$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template C_T
 * @implements {Callable<Superclass<C_T>>}
 */
class AnotherTask extends j_l_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'AnotherTask()'.
   * @template C_T
   * @return {!AnotherTask<C_T>}
   * @public
   */
  static $create__() {
    AnotherTask.$clinit();
    let $instance = new AnotherTask();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherTask__();
    return $instance;
  }

  /**
   * Initialization from constructor 'AnotherTask()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherTask__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {Superclass<C_T>} t
   * @return {void}
   * @public
   */
  m_call__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass(
      t) {}

  /**
   * Bridge method.
   * @override
   * @param {*} arg0
   * @return {void}
   * @public
   */
  m_call__java_lang_Object(arg0) {
    this.m_call__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass(
        /**@type {Superclass<C_T>} */ ($Casts.$to(arg0, Superclass)));
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AnotherTask;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AnotherTask);
  }

  /**
   * @public
   */
  static $clinit() {
    AnotherTask.$clinit = function() {};
    Superclass = goog.module.get(
        'com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    j_l_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    AnotherTask,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherTask'));


Callable.$markImplementor(AnotherTask);


exports = AnotherTask;
//# sourceMappingURL=AnotherTask.js.map