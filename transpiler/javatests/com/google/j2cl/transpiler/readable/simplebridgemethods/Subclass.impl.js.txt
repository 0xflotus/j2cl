/**
 * Impl transpiled from
 * com.google.j2cl.transpiler.readable.simplebridgemethods.Subclass.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.simplebridgemethods.Subclass$impl');


let Superclass = goog.require('gen.com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let AssertionError = goog.forwardDeclare('gen.java.lang.AssertionError$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @extends {Superclass<AssertionError>}
 */
class Subclass extends Superclass {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simplebridgemethods_Subclass() {}

  /**
   * @param {AssertionError} a
   * @return {void}
   * @public
   */
  m_m1__java_lang_AssertionError(a) {}

  /**
   * A particular Java constructor as a factory method.
   * @return {!Subclass}
   * @public
   * @nocollapse
   */
  static $create() {
    Subclass.$clinit();
    let instance = new Subclass;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Subclass();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Subclass() {
    this.$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass();
    this.$init__com_google_j2cl_transpiler_readable_simplebridgemethods_Subclass();
  }

  /**
   * Synthetic method.
   * @param {AssertionError} arg0
   * @return {void}
   * @public
   */
  m_m1__java_lang_Error(arg0) {
    this.m_m1__java_lang_AssertionError(
        /**@type {AssertionError} */ ($Casts.to(arg0, AssertionError)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof Subclass; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Subclass);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    Subclass.$clinit();
    if (!Subclass.$classSubclass_) {
      Subclass.$classSubclass_ = Class.$createForClass(
          $Util.$generateId('Subclass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Subclass'),
          Superclass.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Subclass'));
    }
    return Subclass.$classSubclass_;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() {
    AssertionError = goog.module.get('gen.java.lang.AssertionError$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    Superclass.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
Subclass.$classSubclass_ = null;



/**
 * Export class.
 */
exports = Subclass;
