/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherSubclass.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherSubclass$impl');


const Superclass = goog.require('com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let AssertionError = goog.forwardDeclare('java.lang.AssertionError$impl');


/**
 * @extends {Superclass<AssertionError>}
 */
class AnotherSubclass extends Superclass {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'AnotherSubclass()'.
   * @return {!AnotherSubclass}
   * @public
   */
  static $create__() {
    AnotherSubclass.$clinit();
    let $instance = new AnotherSubclass();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherSubclass__();
    return $instance;
  }

  /**
   * Initialization from constructor 'AnotherSubclass()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherSubclass__() {
    this.$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass__();
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    AnotherSubclass.$clinit = (() => {});
    AnotherSubclass.$loadModules();
    Superclass.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AnotherSubclass;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AnotherSubclass);
  }

  /**
   * @private
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    AnotherSubclass,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherSubclass'));



exports = AnotherSubclass;
//# sourceMappingURL=AnotherSubclass.js.map