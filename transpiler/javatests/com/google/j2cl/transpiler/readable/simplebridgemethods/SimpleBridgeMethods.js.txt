/**
 * Transpiled from
 * third_party/java_src/j2cl/transpiler/javatests/com/google/j2cl/transpiler/readable/simplebridgemethods/SimpleBridgeMethods.java.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.simplebridgemethods.SimpleBridgeMethodsModule');


let AssertionError = goog.require('gen.java.lang.AssertionErrorModule').AssertionError;
let Class = goog.require('gen.java.lang.CoreModule').Class;
let Object = goog.require('gen.java.lang.CoreModule').Object;
let $Util = goog.require('nativebootstrap.UtilModule').Util;
let $Casts = goog.require('vmbootstrap.CastsModule').Casts;


/**
 * @template C_T
 */
class Superclass extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass() {}

  /**
   * @param {C_T} t
   * @return {void}
   * @public
   */
  m_m1__java_lang_Error(t) {}

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @return {!Superclass<C_T>}
   * @package
   * @nocollapse
   */
  static $create() {
    Superclass.$clinit();
    let instance = new Superclass;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof Superclass; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Superclass);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!Superclass.$classSuperclass) {
      Superclass.$classSuperclass = Class.$createForClass(
          $Util.$generateId('Superclass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass'));
    }
    return Superclass.$classSuperclass;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.Superclass = Superclass;



/**
 * @extends {Superclass<AssertionError>}
 */
class Subclass extends Superclass {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simplebridgemethods_Subclass() {}

  /**
   * @param {AssertionError} a
   * @return {void}
   * @public
   */
  m_m1__java_lang_AssertionError(a) {}

  /**
   * A particular Java constructor as a factory method.
   * @return {!Subclass}
   * @package
   * @nocollapse
   */
  static $create() {
    Subclass.$clinit();
    let instance = new Subclass;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Subclass();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Subclass() {
    this.$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass();
    this.$init__com_google_j2cl_transpiler_readable_simplebridgemethods_Subclass();
  }

  /**
   * Synthetic method.
   * @param {AssertionError} arg0
   * @return {void}
   * @public
   */
  m_m1__java_lang_Error(arg0) {
    this.m_m1__java_lang_AssertionError(/**@type {AssertionError} */ (
        $Casts.to(arg0, AssertionError.$isInstance(arg0))));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof Subclass; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Subclass);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!Subclass.$classSubclass) {
      Subclass.$classSubclass = Class.$createForClass(
          $Util.$generateId('Subclass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Subclass'),
          Superclass.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Subclass'));
    }
    return Subclass.$classSubclass;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Superclass.$clinit(); }
}
;



/**
 * Export class.
 */
exports.Subclass = Subclass;



/**
 * @extends {Superclass<AssertionError>}
 */
class AnotherSubclass extends Superclass {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherSubclass() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!AnotherSubclass}
   * @package
   * @nocollapse
   */
  static $create() {
    AnotherSubclass.$clinit();
    let instance = new AnotherSubclass;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherSubclass();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherSubclass() {
    this.$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass();
    this.$init__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherSubclass();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof AnotherSubclass; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AnotherSubclass);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!AnotherSubclass.$classAnotherSubclass) {
      AnotherSubclass.$classAnotherSubclass = Class.$createForClass(
          $Util.$generateId('AnotherSubclass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherSubclass'),
          Superclass.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherSubclass'));
    }
    return AnotherSubclass.$classAnotherSubclass;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Superclass.$clinit(); }
}
;



/**
 * Export class.
 */
exports.AnotherSubclass = AnotherSubclass;



/**
 * @interface
 * @template C_V
 */
class Callable {
  /**
   * @param {C_V} v
   * @return {void}
   * @public
   */
  m_call__java_lang_Object(v) {}

  /**
   * Marks the provided class as implementing this interface.
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_simplebridgemethods_Callable =
        true;
  }

  /**
   * Returns whether the provided instance is of a class that implements this
   * interface.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance != null &&
           instance
               .$implements__com_google_j2cl_transpiler_readable_simplebridgemethods_Callable;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
           classConstructor.prototype
               .$implements__com_google_j2cl_transpiler_readable_simplebridgemethods_Callable;
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!Callable.$classCallable) {
      Callable.$classCallable = Class.$createForInterface(
          $Util.$generateId('Callable'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Callable'),
          null,
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Callable'));
    }
    return Callable.$classCallable;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() {}
}
;


Callable.$markImplementor(/** @type {Function} */ (Callable));

/**
 * Export class.
 */
exports.Callable = Callable;



/**
 * @template C_T
 * @implements {Callable<C_T>}
 */
class Task extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simplebridgemethods_Task() {}

  /**
   * @override
   * @param {C_T} t
   * @return {void}
   * @public
   */
  m_call__java_lang_Object(t) {}

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @return {!Task<C_T>}
   * @package
   * @nocollapse
   */
  static $create() {
    Task.$clinit();
    let instance = new Task;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Task();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Task() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_simplebridgemethods_Task();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof Task; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Task);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!Task.$classTask) {
      Task.$classTask = Class.$createForClass(
          $Util.$generateId('Task'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Task'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Task'));
    }
    return Task.$classTask;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;


Callable.$markImplementor(Task);



/**
 * Export class.
 */
exports.Task = Task;



/**
 * @template C_T
 * @implements {Callable<Superclass<C_T>>}
 */
class AnotherTask extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherTask() {
  }

  /**
   * @param {Superclass<C_T>} t
   * @return {void}
   * @public
   */
  m_call__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass(
      t) {}

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @return {!AnotherTask<C_T>}
   * @package
   * @nocollapse
   */
  static $create() {
    AnotherTask.$clinit();
    let instance = new AnotherTask;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherTask();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @package
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherTask() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_simplebridgemethods_AnotherTask();
  }

  /**
   * Synthetic method.
   * @param {Superclass<C_T>} arg0
   * @return {void}
   * @public
   */
  m_call__java_lang_Object(arg0) {
    this.m_call__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass(
        /**@type {Superclass<C_T>} */ (
            $Casts.to(arg0, Superclass.$isInstance(arg0))));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof AnotherTask; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AnotherTask);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!AnotherTask.$classAnotherTask) {
      AnotherTask.$classAnotherTask = Class.$createForClass(
          $Util.$generateId('AnotherTask'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherTask'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.AnotherTask'));
    }
    return AnotherTask.$classAnotherTask;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;


Callable.$markImplementor(AnotherTask);



/**
 * Export class.
 */
exports.AnotherTask = AnotherTask;



class SimpleBridgeMethods extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simplebridgemethods_SimpleBridgeMethods() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!SimpleBridgeMethods}
   * @public
   * @nocollapse
   */
  static $create() {
    SimpleBridgeMethods.$clinit();
    let instance = new SimpleBridgeMethods;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_SimpleBridgeMethods();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_SimpleBridgeMethods() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_simplebridgemethods_SimpleBridgeMethods();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) {
    return instance instanceof SimpleBridgeMethods;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SimpleBridgeMethods);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    if (!SimpleBridgeMethods.$classSimpleBridgeMethods) {
      SimpleBridgeMethods.$classSimpleBridgeMethods = Class.$createForClass(
          $Util.$generateId('SimpleBridgeMethods'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.SimpleBridgeMethods'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.SimpleBridgeMethods'));
    }
    return SimpleBridgeMethods.$classSimpleBridgeMethods;
  }

  /**
   * Runs inline static field initializers.
   * @protected
   * @nocollapse
   */
  static $clinit() { Object.$clinit(); }
}
;



/**
 * Export class.
 */
exports.SimpleBridgeMethods = SimpleBridgeMethods;
