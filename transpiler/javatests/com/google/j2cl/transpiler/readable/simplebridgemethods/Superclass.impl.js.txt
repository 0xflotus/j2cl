/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');


/**
 * @template C_T
 */
class Superclass extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @return {!Superclass<C_T>}
   * @public
   */
  static $create() {
    Superclass.$clinit();
    let $instance = new Superclass;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass();
  }

  /**
   * @param {C_T} t
   * @return {void}
   * @public
   */
  m_m1__java_lang_Error(t) {}

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof Superclass; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Superclass);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    Superclass.$clinit();
    if (!Superclass.$classSuperclass_) {
      Superclass.$classSuperclass_ = Class.$createForClass(
          $Util.$generateId('Superclass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.simplebridgemethods.Superclass'));
    }
    return Superclass.$classSuperclass_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return Superclass.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simplebridgemethods_Superclass() {}
};


/**
 * The class literal field.
 * @private {Class}
 */
Superclass.$classSuperclass_ = null;



/**
 * Export class.
 */
exports = Superclass;
//# sourceMappingURL=Superclass.js.map