/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.casttoreference.CastToReference.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.casttoreference.CastToReference$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Long = goog.require('nativebootstrap.Long$impl');
let $Util = goog.require('nativebootstrap.Util$impl');
let $LongUtils = goog.require('vmbootstrap.LongUtils$impl');

let Byte = goog.forwardDeclare('gen.java.lang.Byte$impl');
let Character = goog.forwardDeclare('gen.java.lang.Character$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Float = goog.forwardDeclare('gen.java.lang.Float$impl');
let Integer = goog.forwardDeclare('gen.java.lang.Integer$impl');
let Long = goog.forwardDeclare('gen.java.lang.Long$impl');
let Short = goog.forwardDeclare('gen.java.lang.Short$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');
let $byte = goog.forwardDeclare('vmbootstrap.primitives.$byte$impl');
let $char = goog.forwardDeclare('vmbootstrap.primitives.$char$impl');
let $double = goog.forwardDeclare('vmbootstrap.primitives.$double$impl');
let $float = goog.forwardDeclare('vmbootstrap.primitives.$float$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');
let $long = goog.forwardDeclare('vmbootstrap.primitives.$long$impl');
let $short = goog.forwardDeclare('vmbootstrap.primitives.$short$impl');


class CastToReference extends Object {
  /**
   * Defines instance fields.
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!CastToReference}
   * @public
   */
  static $create() {
    CastToReference.$clinit();
    let $instance = new CastToReference();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_casttoreference_CastToReference();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_casttoreference_CastToReference() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_casttoreference_CastToReference();
  }

  /**
   * @return {void}
   * @public
   */
  m_testPrimitiveToReference() {
    let bool = true;
    let b = 1;
    let c = 97 /* 'a' */;
    let s = 1;
    let i = 1;
    let l = $LongUtils.$fromInt(1);
    let f = 1.0;
    let d = 1.0;
    let o = bool;
    o = Byte.m_valueOf__byte(b);
    o = Character.m_valueOf__char(c);
    o = Short.m_valueOf__short(s);
    o = Integer.m_valueOf__int(i);
    o = Long.m_valueOf__long(l);
    o = Float.m_valueOf__float(f);
    o = d;
    o = /**@type {*} */ ($Casts.to(bool, Object));
    o = /**@type {*} */ ($Casts.to(Byte.m_valueOf__byte(b), Object));
    o = /**@type {*} */ ($Casts.to(Character.m_valueOf__char(c), Object));
    o = /**@type {*} */ ($Casts.to(Short.m_valueOf__short(s), Object));
    o = /**@type {*} */ ($Casts.to(Integer.m_valueOf__int(i), Object));
    o = /**@type {*} */ ($Casts.to(Long.m_valueOf__long(l), Object));
    o = /**@type {*} */ ($Casts.to(Float.m_valueOf__float(f), Object));
    o = /**@type {*} */ ($Casts.to(d, Object));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof CastToReference; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, CastToReference);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Byte = goog.module.get('gen.java.lang.Byte$impl');
    Character = goog.module.get('gen.java.lang.Character$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    Float = goog.module.get('gen.java.lang.Float$impl');
    Integer = goog.module.get('gen.java.lang.Integer$impl');
    Long = goog.module.get('gen.java.lang.Long$impl');
    Short = goog.module.get('gen.java.lang.Short$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    $byte = goog.module.get('vmbootstrap.primitives.$byte$impl');
    $char = goog.module.get('vmbootstrap.primitives.$char$impl');
    $double = goog.module.get('vmbootstrap.primitives.$double$impl');
    $float = goog.module.get('vmbootstrap.primitives.$float$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    $long = goog.module.get('vmbootstrap.primitives.$long$impl');
    $short = goog.module.get('vmbootstrap.primitives.$short$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_casttoreference_CastToReference() {
  }
};

$Util.$setClassMetadata(
    CastToReference,
    'com.google.j2cl.transpiler.readable.casttoreference.CastToReference');



/**
 * Export class.
 */
exports = CastToReference;
//# sourceMappingURL=CastToReference.js.map