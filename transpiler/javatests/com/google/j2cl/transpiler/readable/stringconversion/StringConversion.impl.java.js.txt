/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.stringconversion.StringConversion.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.stringconversion.StringConversion$impl');


let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Character = goog.forwardDeclare('java.lang.Character$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');


class StringConversion extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!StringConversion}
   * @public
   */
  static $create__() {
    StringConversion.$clinit();
    let $instance = new StringConversion();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_stringconversion_StringConversion__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_stringconversion_StringConversion__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_stringconversion_StringConversion();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let s1 = null;
    let s2 = null;
    let s3 = '' + s1 + s2;
    s2 = '' + s2 + s2;
    s1 += 'a';
    s3 = '' + s1 + s1 + s2 +
        java_lang_String.m_valueOf__java_lang_Object(null) + 'a';
    s3 =
        'a' + s1 + s1 + s2 + java_lang_String.m_valueOf__java_lang_Object(null);
    let s4;
    let c1 = 70 /* 'F' */;
    let c2 = 111 /* 'o' */;
    s4 = java_lang_String.m_valueOf__java_lang_Object(
             Character.m_valueOf__char(c1)) +
        java_lang_String.m_valueOf__java_lang_Object(
            Character.m_valueOf__char(c2)) +
        'o';
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof StringConversion;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, StringConversion);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Character = goog.module.get('java.lang.Character$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_stringconversion_StringConversion() {
  }
};

$Util.$setClassMetadata(
    StringConversion,
    'com.google.j2cl.transpiler.readable.stringconversion.StringConversion');



/**
 * Export class.
 */
exports = StringConversion;
//# sourceMappingURL=StringConversion.js.map