/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.lambdanoreturn.LambdaNoReturn$Runner.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.lambdanoreturn.LambdaNoReturn.Runner$impl');


let $Util = goog.require('nativebootstrap.Util$impl');

let LambdaNoReturn = goog.forwardDeclare('com.google.j2cl.transpiler.readable.lambdanoreturn.LambdaNoReturn$impl');
let Class = goog.forwardDeclare('java.lang.Class$impl');


/**
 * @interface
 */
class LambdaNoReturn$Runner {
  /**
   * Abstract method.
   * @return {void}
   * @public
   */
  m_run() {}

  /**
   * Marks the provided class as implementing this interface.
   * @param {window.Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_lambdanoreturn_LambdaNoReturn$Runner =
        true;
  }

  /**
   * Returns whether the provided instance is of a class that implements this
   * interface.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        instance
            .$implements__com_google_j2cl_transpiler_readable_lambdanoreturn_LambdaNoReturn$Runner;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        classConstructor.prototype
            .$implements__com_google_j2cl_transpiler_readable_lambdanoreturn_LambdaNoReturn$Runner;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    LambdaNoReturn = goog.module.get(
        'com.google.j2cl.transpiler.readable.lambdanoreturn.LambdaNoReturn$impl');
    Class = goog.module.get('java.lang.Class$impl');
  }
};

$Util.$setClassMetadataForInterface(
    LambdaNoReturn$Runner,
    'com.google.j2cl.transpiler.readable.lambdanoreturn.LambdaNoReturn$Runner');


LambdaNoReturn$Runner.$markImplementor(
    /** @type {window.Function} */ (LambdaNoReturn$Runner));


/**
 * Export class.
 */
exports = LambdaNoReturn$Runner;
//# sourceMappingURL=LambdaNoReturn$Runner.js.map