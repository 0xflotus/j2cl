/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.casterasure.GenericType.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.casterasure.GenericType$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let ArrayList = goog.forwardDeclare('java.util.ArrayList$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template C_T
 */
class GenericType extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
    /** @public {C_T} */
    this.f_field__com_google_j2cl_transpiler_readable_casterasure_GenericType =
        null;
  }

  /**
   * Factory method corresponding to constructor 'GenericType()'.
   * @template C_T
   * @return {!GenericType<C_T>}
   * @public
   */
  static $create__() {
    GenericType.$clinit();
    let $instance = new GenericType();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_casterasure_GenericType__();
    return $instance;
  }

  /**
   * Initialization from constructor 'GenericType()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_casterasure_GenericType__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_casterasure_GenericType();
  }

  /**
   * @return {C_T}
   * @public
   */
  m_method___$pp_com_google_j2cl_transpiler_readable_casterasure() {
    return null;
  }

  /**
   * @return {void}
   * @public
   */
  static m_addErasureCast__() {
    GenericType.$clinit();
    let str = /**@type {?string} */ ($Casts.$to(
        /**@type {!GenericType<?string>} */ (GenericType.$create__())
            .f_field__com_google_j2cl_transpiler_readable_casterasure_GenericType,
        java_lang_String));
    str = /**@type {?string} */ ($Casts.$to(
        /**@type {!GenericType<?string>} */ (GenericType.$create__())
            .m_method___$pp_com_google_j2cl_transpiler_readable_casterasure(),
        java_lang_String));
  }

  /**
   * @template M_T
   * @param {M_T} foo
   * @return {GenericType<M_T>}
   * @public
   */
  static m_inferGeneric__java_lang_Object(foo) {
    GenericType.$clinit();
    return /**@type {!GenericType<*>} */ (GenericType.$create__());
  }

  /**
   * @param {GenericType<?string>} foo
   * @return {GenericType<GenericType<?string>>}
   * @public
   */
  static m_tightenType__com_google_j2cl_transpiler_readable_casterasure_GenericType(
      foo) {
    GenericType.$clinit();
    if (!$Equality.$same(foo, null)) {
      return /**@type {GenericType<GenericType<?string>>} */ (
          GenericType.m_inferGeneric__java_lang_Object(foo));
    }
    return null;
  }

  /**
   * @return {void}
   * @public
   */
  static m_main__() {
    GenericType.$clinit();
    let list = /**@type {ArrayList<*>} */ (
        GenericType.m_newArrayList__java_lang_Object('foo'));
    GenericType.m_acceptsArrayListOfObject__java_util_ArrayList(list);
  }

  /**
   * @template M_V
   * @param {M_V} foo
   * @return {ArrayList<M_V>}
   * @public
   */
  static m_newArrayList__java_lang_Object(foo) {
    GenericType.$clinit();
    return /**@type {!ArrayList<*>} */ (ArrayList.$create__());
  }

  /**
   * @param {ArrayList<*>} foo
   * @return {void}
   * @public
   */
  static m_acceptsArrayListOfObject__java_util_ArrayList(foo) {
    GenericType.$clinit();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof GenericType;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, GenericType);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    GenericType.$clinit = function() {};
    java_lang_String = goog.module.get('java.lang.String$impl');
    ArrayList = goog.module.get('java.util.ArrayList$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_casterasure_GenericType() {}
};

$Util.$setClassMetadata(
    GenericType,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.casterasure.GenericType'));



/**
 * Export class.
 */
exports = GenericType;
//# sourceMappingURL=GenericType.js.map