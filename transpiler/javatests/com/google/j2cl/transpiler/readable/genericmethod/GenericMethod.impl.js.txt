/**
 * Impl transpiled from
 * com.google.j2cl.transpiler.readable.genericmethod.GenericMethod.
 */
goog.module('gen.com.google.j2cl.transpiler.readable.genericmethod.GenericMethod$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Error = goog.forwardDeclare('gen.java.lang.Error$impl');
let Exception = goog.forwardDeclare('gen.java.lang.Exception$impl');
let Number = goog.forwardDeclare('gen.java.lang.Number$impl');
let String = goog.forwardDeclare('gen.java.lang.String$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');


/**
 * @template C_T
 */
class GenericMethod extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod() {}

  /**
   * A particular Java constructor as a factory method.
   * @template C_T
   * @return {!GenericMethod<C_T>}
   * @public
   * @nocollapse
   */
  static $create() {
    GenericMethod.$clinit();
    let instance = new GenericMethod;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod();
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod();
  }

  /**
   * @template M_T, M_S
   * @param {M_T} f
   * @param {M_S} s
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Object(f, s) {}

  /**
   * @param {*} o
   * @return {void}
   * @public
   */
  m_fun__java_lang_Object(o) {}

  /**
   * @template M_T
   * @param {M_T} t
   * @return {void}
   * @public
   */
  m_fun__java_lang_Exception(t) {}

  /**
   * @template M_T
   * @param {M_T} t
   * @return {void}
   * @public
   */
  m_fun__java_lang_Error(t) {}

  /**
   * @template M_T
   * @return {GenericMethod<M_T>}
   * @public
   */
  m_bar() { return null; }

  /**
   * @template M_T
   * @param {Array<M_T>} array
   * @return {Array<M_T>}
   * @public
   */
  m_fun__arrayOf_java_lang_Object(array) { return array; }

  /**
   * @return {void}
   * @public
   */
  m_test() {
    let g =
        /**@type {GenericMethod<(Number|?number)>} */ (GenericMethod.$create());
    g.m_foo__java_lang_Object__java_lang_Object(g, g);
    g.m_foo__java_lang_Object__java_lang_Object(
        Error.$create(), Exception.$create());
    g.m_fun__java_lang_Object(Object.$create());
    g.m_fun__java_lang_Exception(Exception.$create());
    g.m_fun__java_lang_Error(Error.$create());
    g.m_fun__arrayOf_java_lang_Object(
        /**@type {Array<?string>} */ ($Arrays.$init(["asdf"], String)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof GenericMethod; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, GenericMethod);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    GenericMethod.$clinit();
    if (!GenericMethod.$classGenericMethod_) {
      GenericMethod.$classGenericMethod_ = Class.$createForClass(
          $Util.$generateId('GenericMethod'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.genericmethod.GenericMethod'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.genericmethod.GenericMethod'));
    }
    return GenericMethod.$classGenericMethod_;
  }

  /**
   * Runs inline static field initializers.
   * @public
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    Error = goog.module.get('gen.java.lang.Error$impl');
    Exception = goog.module.get('gen.java.lang.Exception$impl');
    Number = goog.module.get('gen.java.lang.Number$impl');
    String = goog.module.get('gen.java.lang.String$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
GenericMethod.$classGenericMethod_ = null;



/**
 * Export class.
 */
exports = GenericMethod;
