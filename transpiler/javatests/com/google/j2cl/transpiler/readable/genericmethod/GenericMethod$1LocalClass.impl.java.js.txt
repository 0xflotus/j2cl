/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.genericmethod.GenericMethod$1LocalClass.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.genericmethod.GenericMethod.$1LocalClass$impl');


const GenericMethod = goog.require('com.google.j2cl.transpiler.readable.genericmethod.GenericMethod$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @template C_1LocalClass_T, M_T, C_T
 * @extends {GenericMethod<C_1LocalClass_T>}
 */
class $1LocalClass extends GenericMethod {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
    /** @public {GenericMethod<C_T>} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod_1LocalClass =
        null;
  }

  /**
   * Factory method corresponding to constructor 'LocalClass(GenericMethod)'.
   * @template C_1LocalClass_T, M_T, C_T
   * @param {GenericMethod<C_T>} $outer_this
   * @return {!$1LocalClass<C_1LocalClass_T, M_T, C_T>}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod(
      $outer_this) {
    $1LocalClass.$clinit();
    let $instance = new $1LocalClass();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod_1LocalClass__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod(
            $outer_this);
    return $instance;
  }

  /**
   * Initialization from constructor 'LocalClass(GenericMethod)'.
   * @param {GenericMethod<C_T>} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod_1LocalClass__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod_1LocalClass =
        $outer_this;
    this.$ctor__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod__();
    this.$init__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod_1LocalClass();
  }

  /**
   * @param {C_1LocalClass_T} t
   * @return {void}
   * @public
   */
  m_fun2__java_lang_Object(t) {}

  /**
   * @template M_LocalClass_fun2_T
   * @param {M_LocalClass_fun2_T} t
   * @return {void}
   * @public
   */
  m_fun2__java_lang_Number(t) {}

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $1LocalClass;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $1LocalClass);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $1LocalClass.$clinit = function() {};
    GenericMethod.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod_1LocalClass() {
  }
};

$Util.$setClassMetadata(
    $1LocalClass,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.genericmethod.GenericMethod$1LocalClass'));



/**
 * Export class.
 */
exports = $1LocalClass;
//# sourceMappingURL=GenericMethod$1LocalClass.js.map