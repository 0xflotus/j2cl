/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.genericmethod.GenericMethod.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.genericmethod.GenericMethod$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $1 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.genericmethod.GenericMethod.$1$impl');
let $1LocalClass = goog.forwardDeclare('com.google.j2cl.transpiler.readable.genericmethod.GenericMethod.$1LocalClass$impl');
let Error = goog.forwardDeclare('java.lang.Error$impl');
let Exception = goog.forwardDeclare('java.lang.Exception$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template C_T
 */
class GenericMethod extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'GenericMethod()'.
   * @template C_T
   * @return {!GenericMethod<C_T>}
   * @public
   */
  static $create__() {
    GenericMethod.$clinit();
    let $instance = new GenericMethod();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod__();
    return $instance;
  }

  /**
   * Initialization from constructor 'GenericMethod()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @template M_T, M_S
   * @param {M_T} f
   * @param {M_S} s
   * @return {void}
   * @public
   */
  m_foo__java_lang_Object__java_lang_Object(f, s) {}

  /**
   * @param {*} o
   * @return {void}
   * @public
   */
  m_fun__java_lang_Object(o) {}

  /**
   * @template M_T
   * @param {M_T} t
   * @return {void}
   * @public
   */
  m_fun__java_lang_Exception(t) {}

  /**
   * @template M_T
   * @param {M_T} t
   * @return {void}
   * @public
   */
  m_fun__java_lang_Error(t) {
    /**@type {!$1<Error, C_T>} */
    ($1.$create__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod(
        this));
    /**@type {!$1LocalClass<Error, Error, C_T>} */
    ($1LocalClass
         .$create__com_google_j2cl_transpiler_readable_genericmethod_GenericMethod(
             this));
  }

  /**
   * @template M_T
   * @return {GenericMethod<M_T>}
   * @public
   */
  m_bar__() {
    return null;
  }

  /**
   * @template M_T
   * @param {Array<M_T>} array
   * @return {Array<M_T>}
   * @public
   */
  m_fun__arrayOf_java_lang_Object(array) {
    return array;
  }

  /**
   * @template M_T
   * @return {M_T}
   * @public
   */
  m_checked__() {
    return null;
  }

  /**
   * @template M_T
   * @return {M_T}
   * @public
   */
  m_unchecked__() {
    return null;
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let g = /**@type {!GenericMethod<(Number|number)>} */ (
        GenericMethod.$create__());
    g.m_foo__java_lang_Object__java_lang_Object(g, g);
    g.m_foo__java_lang_Object__java_lang_Object(
        Error.$create__(), Exception.$create__());
    g.m_fun__java_lang_Object(java_lang_Object.$create__());
    g.m_fun__java_lang_Exception(Exception.$create__());
    g.m_fun__java_lang_Error(Error.$create__());
    g.m_fun__arrayOf_java_lang_Object(/**@type {!Array<?string>} */ (
        $Arrays.$init(['asdf'], java_lang_String)));
    let s = /**@type {?string} */ (
        $Casts.$to(this.m_checked__(), java_lang_String));
    s = /**@type {?string} */ (this.m_unchecked__());
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof GenericMethod;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, GenericMethod);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    GenericMethod.$clinit = function() {};
    $1 = goog.module.get(
        'com.google.j2cl.transpiler.readable.genericmethod.GenericMethod.$1$impl');
    $1LocalClass = goog.module.get(
        'com.google.j2cl.transpiler.readable.genericmethod.GenericMethod.$1LocalClass$impl');
    Error = goog.module.get('java.lang.Error$impl');
    Exception = goog.module.get('java.lang.Exception$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    GenericMethod,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.genericmethod.GenericMethod'));



/**
 * Export class.
 */
exports = GenericMethod;
//# sourceMappingURL=GenericMethod.js.map