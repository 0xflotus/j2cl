/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.instanceofboxedtype.InstanceofBoxedType.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.instanceofboxedtype.InstanceofBoxedType$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Byte = goog.forwardDeclare('java.lang.Byte$impl');
let Character = goog.forwardDeclare('java.lang.Character$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Float = goog.forwardDeclare('java.lang.Float$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Long = goog.forwardDeclare('java.lang.Long$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let Short = goog.forwardDeclare('java.lang.Short$impl');


class InstanceofBoxedType extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'InstanceofBoxedType()'.
   * @return {!InstanceofBoxedType}
   * @public
   */
  static $create__() {
    InstanceofBoxedType.$clinit();
    let $instance = new InstanceofBoxedType();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_instanceofboxedtype_InstanceofBoxedType__();
    return $instance;
  }

  /**
   * Initialization from constructor 'InstanceofBoxedType()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_instanceofboxedtype_InstanceofBoxedType__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_instanceofboxedtype_InstanceofBoxedType();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let b = Integer.$create__int(1);
    let a = Byte.$isInstance(b);
    a = Double.$isInstance(b);
    a = Float.$isInstance(b);
    a = Integer.$isInstance(b);
    a = Long.$isInstance(b);
    a = Short.$isInstance(b);
    a = Number.$isInstance(b);
    a = Character.$isInstance(b);
    a = Boolean.$isInstance(b);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof InstanceofBoxedType;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, InstanceofBoxedType);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    InstanceofBoxedType.$clinit = function() {};
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Byte = goog.module.get('java.lang.Byte$impl');
    Character = goog.module.get('java.lang.Character$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Float = goog.module.get('java.lang.Float$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    Long = goog.module.get('java.lang.Long$impl');
    Number = goog.module.get('java.lang.Number$impl');
    Short = goog.module.get('java.lang.Short$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_instanceofboxedtype_InstanceofBoxedType() {
  }
};

$Util.$setClassMetadata(
    InstanceofBoxedType,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.instanceofboxedtype.InstanceofBoxedType'));



/**
 * Export class.
 */
exports = InstanceofBoxedType;
//# sourceMappingURL=InstanceofBoxedType.js.map