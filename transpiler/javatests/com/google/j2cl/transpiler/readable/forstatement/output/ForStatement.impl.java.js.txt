/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.forstatement.ForStatement.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.forstatement.ForStatement$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class ForStatement extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {!ForStatement}
   * @public
   */
  static $create__() {
    ForStatement.$clinit();
    let $instance = new ForStatement();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_forstatement_ForStatement__();
    return $instance;
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_forstatement_ForStatement__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    for (let i = 0, count = 0; i < 100; i++) {
      count++;
    }
  }

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    ForStatement.$clinit = (() => {});
    ForStatement.$loadModules();
    j_l_Object.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof ForStatement;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, ForStatement);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    ForStatement,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.forstatement.ForStatement'));



exports = ForStatement;
//# sourceMappingURL=ForStatement.js.map