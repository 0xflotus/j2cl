/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.simplelambda.SimpleLambda$$Lambda$MyInterface$3.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.simplelambda.SimpleLambda.$Lambda$MyInterface$3$impl');


let MyInterface = goog.require('com.google.j2cl.transpiler.readable.simplelambda.MyInterface$impl');
let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let SimpleLambda = goog.forwardDeclare('com.google.j2cl.transpiler.readable.simplelambda.SimpleLambda$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @implements {MyInterface}
 */
class $Lambda$MyInterface$3 extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
    /** @public {number} */
    this.$c_x = 0;
    /** @public {SimpleLambda} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_simplelambda_SimpleLambda$$Lambda$MyInterface$3 =
        null;
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {number} $c_x
   * @param {SimpleLambda} $outer_this
   * @return {!$Lambda$MyInterface$3}
   * @public
   */
  static $create__int__com_google_j2cl_transpiler_readable_simplelambda_SimpleLambda(
      $c_x, $outer_this) {
    $Lambda$MyInterface$3.$clinit();
    let $instance = new $Lambda$MyInterface$3();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_simplelambda_SimpleLambda$$Lambda$MyInterface$3__int__com_google_j2cl_transpiler_readable_simplelambda_SimpleLambda(
            $c_x, $outer_this);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {number} $c_x
   * @param {SimpleLambda} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_simplelambda_SimpleLambda$$Lambda$MyInterface$3__int__com_google_j2cl_transpiler_readable_simplelambda_SimpleLambda(
      $c_x, $outer_this) {
    this.$c_x = $c_x;
    this.f_$outer_this__com_google_j2cl_transpiler_readable_simplelambda_SimpleLambda$$Lambda$MyInterface$3 =
        $outer_this;
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_simplelambda_SimpleLambda$$Lambda$MyInterface$3();
  }

  /**
   * @param {number} i
   * @return {number}
   * @public
   */
  lambda$Lambda$MyInterface$3(i) {
    return this.$c_x + i + 1;
  }

  /**
   * @override
   * @param {number} arg0
   * @return {number}
   * @public
   */
  m_foo__int(arg0) {
    return this.lambda$Lambda$MyInterface$3(arg0);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $Lambda$MyInterface$3;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $Lambda$MyInterface$3);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    SimpleLambda = goog.module.get(
        'com.google.j2cl.transpiler.readable.simplelambda.SimpleLambda$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_simplelambda_SimpleLambda$$Lambda$MyInterface$3() {
  }
};

$Util.$setClassMetadata(
    $Lambda$MyInterface$3,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.simplelambda.SimpleLambda$$Lambda$MyInterface$3'));


MyInterface.$markImplementor($Lambda$MyInterface$3);


/**
 * Export class.
 */
exports = $Lambda$MyInterface$3;
//# sourceMappingURL=SimpleLambda$$Lambda$MyInterface$3.js.map