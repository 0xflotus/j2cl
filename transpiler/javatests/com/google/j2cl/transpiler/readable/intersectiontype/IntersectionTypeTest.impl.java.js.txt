/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest$impl');


let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Cmp = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.Cmp$impl');
let Cmp2 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.Cmp2$impl');
let Getable = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.Getable$impl');
let $00Setable = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$00Setable$impl');
let $01Getable = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$01Getable$impl');
let $02Getable = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$02Getable$impl');
let $03Getable = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$03Getable$impl');
let $04Cmp = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$04Cmp$impl');
let $05Cmp2 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$05Cmp2$impl');
let $06IntersectionTypeTest$EmptyA = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$06IntersectionTypeTest$EmptyA$impl');
let $0cmp = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$0cmp$impl');
let $1cmp = goog.forwardDeclare('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$1cmp$impl');
let Comparable = goog.forwardDeclare('java.lang.Comparable$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template C_U
 */
class IntersectionTypeTest extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @template C_U
   * @return {!IntersectionTypeTest<C_U>}
   * @public
   */
  static $create__() {
    IntersectionTypeTest.$clinit();
    let $instance = new IntersectionTypeTest();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest();
  }

  /**
   * @template M_T
   * @param {M_T} object
   * @return {void}
   * @public
   */
  static m_getAndSet__com_google_j2cl_transpiler_readable_intersectiontype_Getable(
      object) {
    IntersectionTypeTest.$clinit();
    object.m_set__int(1);
    object.m_get__();
  }

  /**
   * @template M_T
   * @param {*} o
   * @return {Getable<M_T>}
   * @public
   */
  static m_cast__java_lang_Object(o) {
    IntersectionTypeTest.$clinit();
    if ($Equality.$same(o, null)) {
      return /**@type {$00Setable<*>} */ ($Casts.to(o, $00Setable));
    }
    return /**@type {$01Getable<*>} */ ($Casts.to(o, $01Getable));
  }

  /**
   * @template M_T
   * @param {*} s
   * @return {Getable<(Comparable<?string>|?boolean|?number|?string)>}
   * @public
   */
  static m_cast1__java_lang_Object(s) {
    IntersectionTypeTest.$clinit();
    return /**@type {$02Getable} */ ($Casts.to(s, $02Getable));
  }

  /**
   * @template M_T
   * @param {*} s
   * @return {Getable<(Comparable<M_T>|?boolean|?number|?string)>}
   * @public
   */
  static m_cast2__java_lang_Object(s) {
    IntersectionTypeTest.$clinit();
    return /**@type {$03Getable<*>} */ ($Casts.to(s, $03Getable));
  }

  /**
   * @param {*} s
   * @return {*}
   * @public
   */
  m_cast3__java_lang_Object(s) {
    return s;
  }

  /**
   * @return {Cmp}
   * @public
   */
  static m_method__() {
    IntersectionTypeTest.$clinit();
    return /**@type {$04Cmp} */ ($Casts.to($0cmp.$create__(), $04Cmp));
  }

  /**
   * @return {Cmp2}
   * @public
   */
  static m_method2__() {
    IntersectionTypeTest.$clinit();
    return /**@type {$05Cmp2} */ ($Casts.to($1cmp.$create__(), $05Cmp2));
  }

  /**
   * @param {*} o
   * @return {void}
   * @public
   */
  static m_testClosureAssignment__java_lang_Object(o) {
    IntersectionTypeTest.$clinit();
    let e = /**@type {$06IntersectionTypeTest$EmptyA} */ (
        $Casts.to(o, $06IntersectionTypeTest$EmptyA));
    let g = /**@type {$06IntersectionTypeTest$EmptyA} */ (
        $Casts.to(o, $06IntersectionTypeTest$EmptyA));
    let s = /**@type {$06IntersectionTypeTest$EmptyA} */ (
        $Casts.to(o, $06IntersectionTypeTest$EmptyA));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof IntersectionTypeTest;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, IntersectionTypeTest);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Cmp = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.Cmp$impl');
    Cmp2 = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.Cmp2$impl');
    Getable = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.Getable$impl');
    $00Setable = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$00Setable$impl');
    $01Getable = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$01Getable$impl');
    $02Getable = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$02Getable$impl');
    $03Getable = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$03Getable$impl');
    $04Cmp = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$04Cmp$impl');
    $05Cmp2 = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$05Cmp2$impl');
    $06IntersectionTypeTest$EmptyA = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$06IntersectionTypeTest$EmptyA$impl');
    $0cmp = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$0cmp$impl');
    $1cmp = goog.module.get(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$1cmp$impl');
    Comparable = goog.module.get('java.lang.Comparable$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest() {
  }
};

$Util.$setClassMetadata(
    IntersectionTypeTest,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest'));



/**
 * Export class.
 */
exports = IntersectionTypeTest;
//# sourceMappingURL=IntersectionTypeTest.js.map