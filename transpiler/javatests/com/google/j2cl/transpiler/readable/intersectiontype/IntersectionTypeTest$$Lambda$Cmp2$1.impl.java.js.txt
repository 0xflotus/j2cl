/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest$$Lambda$Cmp2$1.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$Lambda$Cmp2$1$impl');


let Cmp2 = goog.require('com.google.j2cl.transpiler.readable.intersectiontype.Cmp2$impl');
let Serial = goog.require('com.google.j2cl.transpiler.readable.intersectiontype.Serial$impl');
let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @implements {Cmp2}
 * @implements {Serial}
 */
class $Lambda$Cmp2$1 extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!$Lambda$Cmp2$1}
   * @public
   */
  static $create__() {
    $Lambda$Cmp2$1.$clinit();
    let $instance = new $Lambda$Cmp2$1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$Lambda$Cmp2$1__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$Lambda$Cmp2$1__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$Lambda$Cmp2$1();
  }

  /**
   * Lambda implementation method.
   * @override
   * @param {number} a
   * @return {number}
   * @public
   */
  m_cmp__int(a) {
    return 1;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $Lambda$Cmp2$1;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $Lambda$Cmp2$1);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Lambda$Cmp2$1.$clinit = function() {};
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$Lambda$Cmp2$1() {
  }
};

$Util.$setClassMetadata(
    $Lambda$Cmp2$1,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest$$Lambda$Cmp2$1'));


Cmp2.$markImplementor($Lambda$Cmp2$1);
Serial.$markImplementor($Lambda$Cmp2$1);


/**
 * Export class.
 */
exports = $Lambda$Cmp2$1;
//# sourceMappingURL=IntersectionTypeTest$$Lambda$Cmp2$1.js.map