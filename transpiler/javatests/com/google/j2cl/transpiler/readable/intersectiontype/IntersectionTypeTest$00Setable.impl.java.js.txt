/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest$00Setable.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$00Setable$impl');


let Getable = goog.require('com.google.j2cl.transpiler.readable.intersectiontype.Getable$impl');
let Setable = goog.require('com.google.j2cl.transpiler.readable.intersectiontype.Setable$impl');
let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @abstract
 * @template M_T
 * @implements {Setable}
 * @implements {Getable<M_T>}
 */
class $00Setable extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * @abstract
   * @override
   * @param {number} arg0
   * @return {void}
   * @public
   */
  m_set__int(arg0) {}

  /**
   * @abstract
   * @override
   * @return {M_T}
   * @public
   */
  m_get__() {}

  /**
   * Returns whether the provided instance matches the intersection type.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return Setable.$isInstance(instance) && Getable.$isInstance(instance);
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $00Setable);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest$00Setable() {
  }
};

$Util.$setClassMetadata(
    $00Setable,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest$00Setable'));


Setable.$markImplementor($00Setable);
Getable.$markImplementor($00Setable);


/**
 * Export class.
 */
exports = $00Setable;
//# sourceMappingURL=IntersectionTypeTest$00Setable.js.map