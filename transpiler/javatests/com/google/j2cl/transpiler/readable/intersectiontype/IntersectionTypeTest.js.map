[UNKNOWN] => [super();]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[UNKNOWN] => [let $instance = new IntersectionTypeTest();]
[UNKNOWN] => [$instance.$ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest__();]
[UNKNOWN] => [return $instance;]
[UNKNOWN] => [this.$ctor__java_lang_Object__();]
[UNKNOWN] => [this.$init__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest();]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[object.set(1);] => [object.m_set__int(1);]
[object.get();] => [object.m_get__();]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[if (o == null) {
      return (Setable & Getable<T>) o;
    }] => [if ($Equality.$same(o, null)) {
      return /**@type {$Intersect$Setable$Getable$0<*>} */ ($Casts.to(o, $Intersect$Setable$Getable$0));
    }]
[return (Setable & Getable<T>) o;] => [return /**@type {$Intersect$Setable$Getable$0<*>} */ ($Casts.to(o, $Intersect$Setable$Getable$0));]
[return (Getable<T> & Setable) o;] => [return /**@type {$Intersect$Getable$Setable$1<*>} */ ($Casts.to(o, $Intersect$Getable$Setable$1));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Getable<Comparable<String>> & Setable) s;] => [return /**@type {$Intersect$Getable$Setable$2} */ ($Casts.to(s, $Intersect$Getable$Setable$2));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Getable<Comparable<T>> & Setable) s;] => [return /**@type {$Intersect$Getable$Setable$3<*>} */ ($Casts.to(s, $Intersect$Getable$Setable$3));]
[return s;] => [return s;]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Cmp & Serial) () -> 1;] => [return /**@type {$Intersect$Cmp$Serial$4} */ ($Casts.to($Lambda$Cmp$0.$create__(), $Intersect$Cmp$Serial$4));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Cmp2 & Serial) (a) -> 1;] => [return /**@type {$Intersect$Cmp2$Serial$5} */ ($Casts.to($Lambda$Cmp2$1.$create__(), $Intersect$Cmp2$Serial$5));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[A e = (A & EmptyA & EmptyB) o;] => [let e = /**@type {$Intersect$EmptyA$EmptyB$A$6} */ ($Casts.to(o, $Intersect$EmptyA$EmptyB$A$6));]
[EmptyA g = (A & EmptyA & EmptyB) o;] => [let g = /**@type {$Intersect$EmptyA$EmptyB$A$6} */ ($Casts.to(o, $Intersect$EmptyA$EmptyB$A$6));]
[EmptyB s = (A & EmptyA & EmptyB) o;] => [let s = /**@type {$Intersect$EmptyA$EmptyB$A$6} */ ($Casts.to(o, $Intersect$EmptyA$EmptyB$A$6));]
