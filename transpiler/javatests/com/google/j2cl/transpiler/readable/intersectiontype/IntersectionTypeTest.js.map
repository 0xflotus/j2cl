[UNKNOWN] => [super();]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[UNKNOWN] => [let $instance = new IntersectionTypeTest();]
[UNKNOWN] => [$instance.$ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest__();]
[UNKNOWN] => [return $instance;]
[UNKNOWN] => [this.$ctor__java_lang_Object__();]
[UNKNOWN] => [this.$init__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest();]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[object.set(1);] => [/**@type {Setable} */ ($Casts.to(object, Setable)).m_set__int(1);]
[object.get();] => [object.m_get__();]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[if (o == null) {
      return (Setable & Getable<T>) o;
    }] => [if ($Equality.$same(o, null)) {
      return /**@type {Getable<*>} */ ($Casts.to(/**@type {Setable} */ ($Casts.to(/**@type {Getable<*>} */ ($Casts.to(o, Getable)), Setable)), Getable));
    }]
[return (Setable & Getable<T>) o;] => [return /**@type {Getable<*>} */ ($Casts.to(/**@type {Setable} */ ($Casts.to(/**@type {Getable<*>} */ ($Casts.to(o, Getable)), Setable)), Getable));]
[return (Getable<T> & Setable) o;] => [return /**@type {Getable<*>} */ ($Casts.to(/**@type {Setable} */ ($Casts.to(o, Setable)), Getable));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Getable<Comparable<String>> & Setable) s;] => [return /**@type {Getable<(Comparable<?string>|?boolean|?number|?string)>} */ ($Casts.to(/**@type {Setable} */ ($Casts.to(s, Setable)), Getable));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Getable<Comparable<T>> & Setable) s;] => [return /**@type {Getable<(Comparable<*>|?boolean|?number|?string)>} */ ($Casts.to(/**@type {Setable} */ ($Casts.to(s, Setable)), Getable));]
[return s;] => [return s;]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Cmp & Serial) () -> 1;] => [return /**@type {Cmp} */ ($Casts.to(/**@type {Serial} */ ($Casts.to($Lambda$Cmp$0.$create__(), Serial)), Cmp));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Cmp2 & Serial) (a) -> 1;] => [return /**@type {Cmp2} */ ($Casts.to(/**@type {Serial} */ ($Casts.to($Lambda$Cmp2$1.$create__(), Serial)), Cmp2));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[A e = (A & EmptyA & EmptyB) o;] => [let e = /**@type {A} */ ($Casts.to(/**@type {EmptyA} */ ($Casts.to(/**@type {EmptyB} */ ($Casts.to(o, EmptyB)), EmptyA)), A));]
[EmptyA g = (A & EmptyA & EmptyB) o;] => [let g = /**@type {EmptyA} */ ($Casts.to(/**@type {A} */ ($Casts.to(/**@type {EmptyA} */ ($Casts.to(/**@type {EmptyB} */ ($Casts.to(o, EmptyB)), EmptyA)), A)), EmptyA));]
[EmptyB s = (A & EmptyA & EmptyB) o;] => [let s = /**@type {EmptyB} */ ($Casts.to(/**@type {A} */ ($Casts.to(/**@type {EmptyA} */ ($Casts.to(/**@type {EmptyB} */ ($Casts.to(o, EmptyB)), EmptyA)), A)), EmptyB));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return t;] => [return t;]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (T) get(new Object());] => [return /**@type {A} */ ($Casts.to(IntersectionTypeTest.m_get__java_lang_Object_$p_com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest(java_lang_Object.$create__()), A));]
