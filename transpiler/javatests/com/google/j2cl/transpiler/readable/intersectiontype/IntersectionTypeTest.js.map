[UNKNOWN] => [super();]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[UNKNOWN] => [let $instance = new IntersectionTypeTest();]
[UNKNOWN] => [$instance.$ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest();]
[UNKNOWN] => [return $instance;]
[UNKNOWN] => [this.$ctor__java_lang_Object();]
[UNKNOWN] => [this.$init__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest();]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[object.set(1);] => [object.m_set__int(1);]
[object.get();] => [object.m_get();]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[if (o == null) {
      return (Setable & Getable<T>) o;
    }] => [if ($Equality.$same(o, null)) {
      return /**@type {IntersectionTypeTest$00Setable<*>} */ ($Casts.to(o, IntersectionTypeTest$00Setable));
    }]
[return (Setable & Getable<T>) o;] => [return /**@type {IntersectionTypeTest$00Setable<*>} */ ($Casts.to(o, IntersectionTypeTest$00Setable));]
[return (Getable<T> & Setable) o;] => [return /**@type {IntersectionTypeTest$01Getable<*>} */ ($Casts.to(o, IntersectionTypeTest$01Getable));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Getable<Comparable<String>> & Setable) s;] => [return /**@type {IntersectionTypeTest$02Getable} */ ($Casts.to(s, IntersectionTypeTest$02Getable));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Getable<Comparable<T>> & Setable) s;] => [return /**@type {IntersectionTypeTest$03Getable<*>} */ ($Casts.to(s, IntersectionTypeTest$03Getable));]
[return s;] => [return s;]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Cmp & Serial) () -> 1;] => [return /**@type {IntersectionTypeTest$04Cmp} */ ($Casts.to(IntersectionTypeTest$0cmp.$create(), IntersectionTypeTest$04Cmp));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[return (Cmp2 & Serial) (a) -> 1;] => [return /**@type {IntersectionTypeTest$05Cmp2} */ ($Casts.to(IntersectionTypeTest$1cmp.$create(), IntersectionTypeTest$05Cmp2));]
[UNKNOWN] => [IntersectionTypeTest.$clinit();]
[A e = (A & EmptyA & EmptyB) o;] => [let e = /**@type {IntersectionTypeTest$06IntersectionTypeTest$EmptyA} */ ($Casts.to(o, IntersectionTypeTest$06IntersectionTypeTest$EmptyA));]
[EmptyA g = (A & EmptyA & EmptyB) o;] => [let g = /**@type {IntersectionTypeTest$06IntersectionTypeTest$EmptyA} */ ($Casts.to(o, IntersectionTypeTest$06IntersectionTypeTest$EmptyA));]
[EmptyB s = (A & EmptyA & EmptyB) o;] => [let s = /**@type {IntersectionTypeTest$06IntersectionTypeTest$EmptyA} */ ($Casts.to(o, IntersectionTypeTest$06IntersectionTypeTest$EmptyA));]
