/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest$$LambdaAdaptor$1.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest.$LambdaAdaptor$1$impl');


const Cmp = goog.require('com.google.j2cl.transpiler.readable.intersectiontype.Cmp$impl');
const Serial = goog.require('com.google.j2cl.transpiler.readable.intersectiontype.Serial$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


/**
 * @implements {Cmp}
 * @implements {Serial}
 */
class $LambdaAdaptor$1 extends java_lang_Object {
  /**
   * JsConstructor '$LambdaAdaptor$1($JsFunction)'.
   * @param {?function():number} fn
   * @public
   */
  constructor(fn) {
    $LambdaAdaptor$1.$clinit();
    super();
    /** @public {?function():number} */
    this.f_$$fn__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$1 =
        null;
    this.$ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$1__com_google_j2cl_transpiler_readable_intersectiontype_Cmp_$JsFunction(
        fn);
  }

  /**
   * Initialization from constructor '$LambdaAdaptor$1($JsFunction)'.
   * @param {?function():number} fn
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$1__com_google_j2cl_transpiler_readable_intersectiontype_Cmp_$JsFunction(
      fn) {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$1();
    this.f_$$fn__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$1 =
        fn;
  }

  /**
   * @return {number}
   * @public
   */
  m_cmp__() {
    let /** ?function():number */ $function;
    return (
        $function =
            this.f_$$fn__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$1,
        $function());
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $LambdaAdaptor$1;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $LambdaAdaptor$1);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $LambdaAdaptor$1.$clinit = function() {};
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_intersectiontype_IntersectionTypeTest_$LambdaAdaptor$1() {
  }
};

$Util.$setClassMetadata(
    $LambdaAdaptor$1,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.intersectiontype.IntersectionTypeTest$$LambdaAdaptor$1'));


Cmp.$markImplementor($LambdaAdaptor$1);
Serial.$markImplementor($LambdaAdaptor$1);


/**
 * Export class.
 */
exports = $LambdaAdaptor$1;
//# sourceMappingURL=IntersectionTypeTest$$LambdaAdaptor$1.js.map