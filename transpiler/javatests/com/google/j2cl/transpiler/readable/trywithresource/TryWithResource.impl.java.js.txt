/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.trywithresource.TryWithResource.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.trywithresource.TryWithResource$impl');


let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let TryWithResource$ClosableThing = goog.forwardDeclare('com.google.j2cl.transpiler.readable.trywithresource.TryWithResource.ClosableThing$impl');
let Exception = goog.forwardDeclare('java.lang.Exception$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let Throwable = goog.forwardDeclare('java.lang.Throwable$impl');
let $Equality = goog.forwardDeclare('nativebootstrap.Equality$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Exceptions = goog.forwardDeclare('vmbootstrap.Exceptions$impl');


class TryWithResource extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!TryWithResource}
   * @public
   */
  static $create__() {
    TryWithResource.$clinit();
    let $instance = new TryWithResource();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_trywithresource_TryWithResource__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_trywithresource_TryWithResource__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_trywithresource_TryWithResource();
  }

  /**
   * @return {void}
   * @public
   */
  static m_tryWithResource__() {
    TryWithResource.$clinit();
    {
      let $primaryExc = null;
      let thing = null;
      try {
        thing = TryWithResource$ClosableThing.$create__();
        let i = 0;
      } catch (/** @type {*} */ __$exc) {
        __$exc = $Exceptions.toJava(__$exc);
        if (Throwable.$isInstance(__$exc)) {
          let $exceptionFromTry = /**@type {Throwable} */ (__$exc);
          $primaryExc = $exceptionFromTry;
          throw $Exceptions.toJs($exceptionFromTry);
        } else {
          throw $Exceptions.toJs(__$exc);
        }
      } finally {
        $primaryExc = $Exceptions.safeClose(thing, $primaryExc);
        if (!$Equality.$same($primaryExc, null)) {
          throw $Exceptions.toJs($primaryExc);
        }
      }
    }
  }

  /**
   * @param {Array<?string>} args
   * @return {void}
   * @public
   */
  static m_tryWithResourceMultipleResources__arrayOf_java_lang_String(args) {
    TryWithResource.$clinit();
    try {
      let $primaryExc = null;
      let thing = null;
      let thing2 = null;
      try {
        thing = TryWithResource$ClosableThing.$create__();
        thing2 = TryWithResource$ClosableThing.$create__();
        let i = 0;
        throw $Exceptions.toJs(Exception.$create__());
      } catch (/** @type {*} */ __$exc) {
        __$exc = $Exceptions.toJava(__$exc);
        if (Throwable.$isInstance(__$exc)) {
          let $exceptionFromTry = /**@type {Throwable} */ (__$exc);
          $primaryExc = $exceptionFromTry;
          throw $Exceptions.toJs($exceptionFromTry);
        } else {
          throw $Exceptions.toJs(__$exc);
        }
      } finally {
        $primaryExc = $Exceptions.safeClose(thing2, $primaryExc);
        $primaryExc = $Exceptions.safeClose(thing, $primaryExc);
        if (!$Equality.$same($primaryExc, null)) {
          throw $Exceptions.toJs($primaryExc);
        }
      }
    } catch (/** @type {*} */ __$exc) {
      __$exc = $Exceptions.toJava(__$exc);
      if (Exception.$isInstance(__$exc)) {
        let e = /**@type {Exception} */ (__$exc);
        let b = 10;
      } else {
        throw $Exceptions.toJs(__$exc);
      }
    }
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof TryWithResource;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, TryWithResource);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    TryWithResource$ClosableThing = goog.module.get(
        'com.google.j2cl.transpiler.readable.trywithresource.TryWithResource.ClosableThing$impl');
    Exception = goog.module.get('java.lang.Exception$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    Throwable = goog.module.get('java.lang.Throwable$impl');
    $Equality = goog.module.get('nativebootstrap.Equality$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Exceptions = goog.module.get('vmbootstrap.Exceptions$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_trywithresource_TryWithResource() {
  }
};

$Util.$setClassMetadata(
    TryWithResource,
    'com.google.j2cl.transpiler.readable.trywithresource.TryWithResource');



/**
 * Export class.
 */
exports = TryWithResource;
//# sourceMappingURL=TryWithResource.js.map