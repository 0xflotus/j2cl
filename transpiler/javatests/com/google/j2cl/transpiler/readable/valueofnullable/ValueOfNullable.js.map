[UNKNOWN] => [super();]
[UNKNOWN] => [/** @public {?string} */
    this.f_nullableString__com_google_j2cl_transpiler_readable_valueofnullable_ValueOfNullable = null;]
[UNKNOWN] => [/** @public {number} */
    this.f_someChar__com_google_j2cl_transpiler_readable_valueofnullable_ValueOfNullable = 0;]
[UNKNOWN] => [/** @public {?string} */
    this.f_result__com_google_j2cl_transpiler_readable_valueofnullable_ValueOfNullable = null;]
[UNKNOWN] => [ValueOfNullable.$clinit();]
[UNKNOWN] => [let $instance = new ValueOfNullable();]
[UNKNOWN] => [$instance.$ctor__com_google_j2cl_transpiler_readable_valueofnullable_ValueOfNullable__();]
[UNKNOWN] => [return $instance;]
[UNKNOWN] => [this.$ctor__java_lang_Object__();]
[UNKNOWN] => [this.$init__com_google_j2cl_transpiler_readable_valueofnullable_ValueOfNullable();]
[UNKNOWN] => [java_lang_Object.$clinit();]
[String nullableString = "b";] => [this.f_nullableString__com_google_j2cl_transpiler_readable_valueofnullable_ValueOfNullable = "b";]
[char someChar = 'a';] => [this.f_someChar__com_google_j2cl_transpiler_readable_valueofnullable_ValueOfNullable = 97 /* 'a' */;]
[/**
   * someChar will be boxed in output using String.valueOf(Character.valueOf(someChar)) and since
   * the return value is nullable the concatenation expression needs further special handling
   * (prefixing the expression with "" + ) to guard against null + null concatenation.
   */
  String result = someChar + nullableString;] => [this.f_result__com_google_j2cl_transpiler_readable_valueofnullable_ValueOfNullable = java_lang_String.m_valueOf__char(this.f_someChar__com_google_j2cl_transpiler_readable_valueofnullable_ValueOfNullable) + java_lang_String.m_valueOf__java_lang_Object(this.f_nullableString__com_google_j2cl_transpiler_readable_valueofnullable_ValueOfNullable);]
