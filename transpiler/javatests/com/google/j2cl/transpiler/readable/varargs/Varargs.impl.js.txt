/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.varargs.Varargs.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.varargs.Varargs$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Varargs extends Object {
  /**
   * Defines instance fields.
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @param {Array<number>} args
   * @return {!Varargs}
   * @public
   */
  static $create__arrayOf_int(args) {
    Varargs.$clinit();
    let $instance = new Varargs;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_varargs_Varargs__arrayOf_int(
            args);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {Array<number>} args
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_varargs_Varargs__arrayOf_int(
      args) {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_varargs_Varargs();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Varargs}
   * @public
   */
  static $create() {
    Varargs.$clinit();
    let $instance = new Varargs;
    $instance.$ctor__com_google_j2cl_transpiler_readable_varargs_Varargs();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_varargs_Varargs() {
    this.$ctor__com_google_j2cl_transpiler_readable_varargs_Varargs__arrayOf_int(
        /**@type {Array<number>} */ ($Arrays.$init([1], $int)));
  }

  /**
   * @param {number} a
   * @param {Array<*>} args
   * @return {void}
   * @public
   */
  m_test__int__arrayOf_java_lang_Object(a, args) {}

  /**
   * @template M_T
   * @param {Array<M_T>} elements
   * @return {void}
   * @public
   */
  static m_fun__arrayOf_java_lang_Object(elements) { Varargs.$clinit(); }

  /**
   * @template M_E
   * @param {M_E} a
   * @param {M_E} b
   * @return {void}
   * @public
   */
  static m_bar__java_lang_Object__java_lang_Object(a, b) {
    Varargs.$clinit();
    Varargs.m_fun__arrayOf_java_lang_Object(
        /**@type {Array<*>} */ ($Arrays.$init([a, b], Object)));
  }

  /**
   * @return {void}
   * @public
   */
  m_main() {
    let v = Varargs.$create();
    v.m_test__int__arrayOf_java_lang_Object(1, []);
    v.m_test__int__arrayOf_java_lang_Object(1, [Object.$create()]);
    v.m_test__int__arrayOf_java_lang_Object(1, [Object.$create()]);
    v.m_test__int__arrayOf_java_lang_Object(1, []);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof Varargs; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Varargs);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    Varargs.$clinit();
    if (!Varargs.$classVarargs_) {
      Varargs.$classVarargs_ = Class.$createForClass(
          $Util.$generateId('Varargs'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.varargs.Varargs'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.varargs.Varargs'));
    }
    return Varargs.$classVarargs_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return Varargs.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_varargs_Varargs() {}
};


/**
 * The class literal field.
 * @private {Class}
 */
Varargs.$classVarargs_ = null;



/**
 * Export class.
 */
exports = Varargs;
//# sourceMappingURL=Varargs.js.map