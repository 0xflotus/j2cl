/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.varargs.Varargs.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.varargs.Varargs$impl');


let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Varargs extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {Array<number>} args
   * @return {!Varargs}
   * @public
   */
  static $create__arrayOf_int(args) {
    Varargs.$clinit();
    let $instance = new Varargs();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_varargs_Varargs__arrayOf_int(
            args);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {Array<number>} args
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_varargs_Varargs__arrayOf_int(
      args) {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_varargs_Varargs();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Varargs}
   * @public
   */
  static $create__() {
    Varargs.$clinit();
    let $instance = new Varargs();
    $instance.$ctor__com_google_j2cl_transpiler_readable_varargs_Varargs__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_varargs_Varargs__() {
    this.$ctor__com_google_j2cl_transpiler_readable_varargs_Varargs__arrayOf_int(
        /**@type {!Array<number>} */ ($Arrays.$init([1], $int)));
  }

  /**
   * @param {number} a
   * @param {Array<*>} args
   * @return {void}
   * @public
   */
  m_test__int__arrayOf_java_lang_Object(a, args) {}

  /**
   * @template M_T
   * @param {Array<M_T>} elements
   * @return {void}
   * @public
   */
  static m_fun__arrayOf_java_lang_Object(elements) {
    Varargs.$clinit();
  }

  /**
   * @template M_E
   * @param {M_E} a
   * @param {M_E} b
   * @return {void}
   * @public
   */
  static m_bar__java_lang_Object__java_lang_Object(a, b) {
    Varargs.$clinit();
    Varargs.m_fun__arrayOf_java_lang_Object(
        /**@type {!Array<*>} */ ($Arrays.$init([a, b], java_lang_Object)));
  }

  /**
   * @return {void}
   * @public
   */
  m_main__() {
    let v = Varargs.$create__();
    v.m_test__int__arrayOf_java_lang_Object(1, []);
    v.m_test__int__arrayOf_java_lang_Object(1, [java_lang_Object.$create__()]);
    v.m_test__int__arrayOf_java_lang_Object(1, [java_lang_Object.$create__()]);
    v.m_test__int__arrayOf_java_lang_Object(1, []);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Varargs;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Varargs);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_varargs_Varargs() {}
};

$Util.$setClassMetadata(
    Varargs, $Util.$makeClassName(
                 'com.google.j2cl.transpiler.readable.varargs.Varargs'));



/**
 * Export class.
 */
exports = Varargs;
//# sourceMappingURL=Varargs.js.map