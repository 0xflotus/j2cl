/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.defaultmethods.DefaultMethods$List$$Overlay.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.defaultmethods.DefaultMethods.List.$Overlay$impl');


const $Util = goog.require('nativebootstrap.Util$impl');

let List = goog.forwardDeclare('com.google.j2cl.transpiler.readable.defaultmethods.DefaultMethods.List$impl');


class $Overlay {
  /**
   * @template C_List_T
   * @param {List<C_List_T>} $thisArg
   * @param {C_List_T} elem
   * @return {void}
   * @public
   */
  static m_add__com_google_j2cl_transpiler_readable_defaultmethods_DefaultMethods_List__java_lang_Object(
      $thisArg, elem) {
    $Overlay.$clinit();
  }

  /**
   * @template C_List_T
   * @param {List<C_List_T>} $thisArg
   * @param {Array<C_List_T>} elems
   * @return {void}
   * @public
   */
  static m_remove__com_google_j2cl_transpiler_readable_defaultmethods_DefaultMethods_List__arrayOf_java_lang_Object(
      $thisArg, elems) {
    $Overlay.$clinit();
  }

  /**
   * @template C_List_T
   * @param {List<C_List_T>} $thisArg
   * @param {number} startIndex
   * @param {number} endIndex
   * @return {List<C_List_T>}
   * @public
   */
  static m_sublist__com_google_j2cl_transpiler_readable_defaultmethods_DefaultMethods_List__int__int(
      $thisArg, startIndex, endIndex) {
    $Overlay.$clinit();
    return null;
  }

  /**
   * Returns whether the provided instance is of a class that implements this
   * interface.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return true;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    $Overlay.$clinit = function() {};
  }
};

$Util.$setClassMetadataForInterface(
    $Overlay,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.defaultmethods.DefaultMethods.List'));


/**
 * Export class.
 */
exports = $Overlay;
//# sourceMappingURL=DefaultMethods$List$$Overlay.js.map