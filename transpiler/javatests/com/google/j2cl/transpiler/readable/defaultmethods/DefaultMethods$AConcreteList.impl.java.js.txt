/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.defaultmethods.DefaultMethods$AConcreteList.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.defaultmethods.DefaultMethods.AConcreteList$impl');


const List = goog.require('com.google.j2cl.transpiler.readable.defaultmethods.DefaultMethods.List$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let List$$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.defaultmethods.DefaultMethods.List$$Overlay$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


/**
 * @template C_AConcreteList_T
 * @implements {List<C_AConcreteList_T>}
 */
class AConcreteList extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'AConcreteList()'.
   * @template C_AConcreteList_T
   * @return {!AConcreteList<C_AConcreteList_T>}
   * @public
   */
  static $create__() {
    AConcreteList.$clinit();
    let $instance = new AConcreteList();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_defaultmethods_DefaultMethods_AConcreteList__();
    return $instance;
  }

  /**
   * Initialization from constructor 'AConcreteList()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_defaultmethods_DefaultMethods_AConcreteList__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_defaultmethods_DefaultMethods_AConcreteList();
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {C_AConcreteList_T} arg0
   * @return {void}
   * @public
   */
  m_add__java_lang_Object(arg0) {
    List$$Overlay
        .m_add__com_google_j2cl_transpiler_readable_defaultmethods_DefaultMethods_List__java_lang_Object(
            this, arg0);
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {Array<C_AConcreteList_T>} arg0
   * @return {void}
   * @public
   */
  m_remove__arrayOf_java_lang_Object(arg0) {
    List$$Overlay
        .m_remove__com_google_j2cl_transpiler_readable_defaultmethods_DefaultMethods_List__arrayOf_java_lang_Object(
            this, arg0);
  }

  /**
   * Default method forwarding stub.
   * @override
   * @param {number} arg0
   * @param {number} arg1
   * @return {List<C_AConcreteList_T>}
   * @public
   */
  m_sublist__int__int(arg0, arg1) {
    return /**@type {List<C_AConcreteList_T>} */ (
        List$$Overlay
            .m_sublist__com_google_j2cl_transpiler_readable_defaultmethods_DefaultMethods_List__int__int(
                this, arg0, arg1));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AConcreteList;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AConcreteList);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    AConcreteList.$clinit = function() {};
    List$$Overlay = goog.module.get(
        'com.google.j2cl.transpiler.readable.defaultmethods.DefaultMethods.List$$Overlay$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
    List.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_defaultmethods_DefaultMethods_AConcreteList() {
  }
};

$Util.$setClassMetadata(
    AConcreteList,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.defaultmethods.DefaultMethods$AConcreteList'));


List.$markImplementor(AConcreteList);


/**
 * Export class.
 */
exports = AConcreteList;
//# sourceMappingURL=DefaultMethods$AConcreteList.js.map