/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.anonymousclass.SomeClass.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.anonymousclass.SomeClass$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let String = goog.forwardDeclare('gen.java.lang.String$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class SomeClass extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_anonymousclass_SomeClass() {}

  /**
   * Abstract method.
   * @return {?string}
   * @public
   */
  m_foo() {}

  /**
   * A particular Java constructor as a factory method.
   * @param {number} i
   * @return {!SomeClass}
   * @public
   * @nocollapse
   */
  static $create__int(i) {
    SomeClass.$clinit();
    let instance = new SomeClass;
    instance
        .$ctor__com_google_j2cl_transpiler_readable_anonymousclass_SomeClass__int(
            i);
    return instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {number} i
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_anonymousclass_SomeClass__int(i) {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_anonymousclass_SomeClass();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isInstance(instance) { return instance instanceof SomeClass; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   * @nocollapse
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SomeClass);
  }

  /**
   * @return {Class}
   * @public
   * @nocollapse
   */
  static $getClass() {
    SomeClass.$clinit();
    if (!SomeClass.$classSomeClass_) {
      SomeClass.$classSomeClass_ = Class.$createForClass(
          $Util.$generateId('SomeClass'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.anonymousclass.SomeClass'),
          Object.$getClass(),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.anonymousclass.SomeClass'));
    }
    return SomeClass.$classSomeClass_;
  }

  /**
   * Runs inline static field initializers.
   * @public
   * @nocollapse
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    String = goog.module.get('gen.java.lang.String$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }
}
;


/**
 * The class literal field.
 * @private {Class}
 */
SomeClass.$classSomeClass_ = null;



/**
 * Export class.
 */
exports = SomeClass;
