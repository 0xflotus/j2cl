/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.anonymousclass.SomeInterface$1.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.anonymousclass.SomeInterface.$Anonymous1$impl');


let SomeClass = goog.require('com.google.j2cl.transpiler.readable.anonymousclass.SomeClass$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');
let String = goog.forwardDeclare('java.lang.String$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class SomeInterface$1 extends SomeClass {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @param {number} $_0
   * @return {!SomeInterface$1}
   * @public
   */
  static $create__int($_0) {
    SomeInterface$1.$clinit();
    let $instance = new SomeInterface$1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_anonymousclass_SomeInterface$1__int(
            $_0);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {number} $_0
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_anonymousclass_SomeInterface$1__int(
      $_0) {
    this.$ctor__com_google_j2cl_transpiler_readable_anonymousclass_SomeClass__int(
        $_0);
    this.$init__com_google_j2cl_transpiler_readable_anonymousclass_SomeInterface$1();
  }

  /**
   * @override
   * @return {?string}
   * @public
   */
  m_foo__() { return 'a'; }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof SomeInterface$1; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SomeInterface$1);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('java.lang.Class$impl');
    String = goog.module.get('java.lang.String$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    SomeClass.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_anonymousclass_SomeInterface$1() {}
};

$Util.$setClassMetadata(
    SomeInterface$1,
    'com.google.j2cl.transpiler.readable.anonymousclass.SomeInterface$1');



/**
 * Export class.
 */
exports = SomeInterface$1;
//# sourceMappingURL=SomeInterface$1.js.map