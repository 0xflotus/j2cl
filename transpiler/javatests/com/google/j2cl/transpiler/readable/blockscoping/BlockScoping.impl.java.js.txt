/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.blockscoping.BlockScoping.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.blockscoping.BlockScoping$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class BlockScoping extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'BlockScoping()'.
   * @return {!BlockScoping}
   * @public
   */
  static $create__() {
    BlockScoping.$clinit();
    let $instance = new BlockScoping();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_blockscoping_BlockScoping__();
    return $instance;
  }

  /**
   * Initialization from constructor 'BlockScoping()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_blockscoping_BlockScoping__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_blockscoping_BlockScoping();
  }

  /**
   * @return {void}
   * @public
   */
  m_main__() {
    { let i = 0; }
    { let i$1$ = 1; }
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof BlockScoping;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, BlockScoping);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    BlockScoping.$clinit = function() {};
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_blockscoping_BlockScoping() {}
};

$Util.$setClassMetadata(
    BlockScoping,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.blockscoping.BlockScoping'));



/**
 * Export class.
 */
exports = BlockScoping;
//# sourceMappingURL=BlockScoping.js.map