/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.genericinterfaceabstractimpl.MyInterface.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.genericinterfaceabstractimpl.MyInterface$impl');


const $Util = goog.require('nativebootstrap.Util$impl');

let $LambdaAdaptor = goog.forwardDeclare('com.google.j2cl.transpiler.readable.genericinterfaceabstractimpl.MyInterface.$LambdaAdaptor$impl');
let java_lang_Object = goog.forwardDeclare('java.lang.Object$impl');
let $JavaScriptFunction = goog.forwardDeclare('vmbootstrap.JavaScriptFunction$impl');


/**
 * @interface
 * @template C_T
 */
class MyInterface {
  /**
   * @abstract
   * @param {C_T} t
   * @return {C_T}
   * @public
   */
  m_fun__java_lang_Object(t) {}

  /**
   * @template C_T
   * @param {?function(C_T):C_T} fn
   * @return {MyInterface<C_T>}
   * @public
   */
  static $adapt(fn) {
    MyInterface.$clinit();
    return /**@type {!$LambdaAdaptor<*>} */ (new $LambdaAdaptor(fn));
  }

  /**
   * Marks the provided class as implementing this interface.
   * @param {Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_genericinterfaceabstractimpl_MyInterface =
        true;
  }

  /**
   * Returns whether the provided instance is of a class that implements this
   * interface.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$implements__com_google_j2cl_transpiler_readable_genericinterfaceabstractimpl_MyInterface;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        !!classConstructor.prototype
              .$implements__com_google_j2cl_transpiler_readable_genericinterfaceabstractimpl_MyInterface;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    MyInterface.$clinit = function() {};
    $LambdaAdaptor = goog.module.get(
        'com.google.j2cl.transpiler.readable.genericinterfaceabstractimpl.MyInterface.$LambdaAdaptor$impl');
    java_lang_Object = goog.module.get('java.lang.Object$impl');
    $JavaScriptFunction =
        goog.module.get('vmbootstrap.JavaScriptFunction$impl');
  }
};

$Util.$setClassMetadataForInterface(
    MyInterface,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.genericinterfaceabstractimpl.MyInterface'));


MyInterface.$markImplementor(/** @type {Function} */ (MyInterface));


/**
 * Export class.
 */
exports = MyInterface;
//# sourceMappingURL=MyInterface.js.map