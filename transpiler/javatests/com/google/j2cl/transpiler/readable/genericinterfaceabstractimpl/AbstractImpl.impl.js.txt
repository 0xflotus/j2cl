/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.genericinterfaceabstractimpl.AbstractImpl.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.genericinterfaceabstractimpl.AbstractImpl$impl');


let MyInterface = goog.require('gen.com.google.j2cl.transpiler.readable.genericinterfaceabstractimpl.MyInterface$impl');
let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Integer = goog.forwardDeclare('gen.java.lang.Integer$impl');


/**
 * Abstract class, do not instantiate.
 * @implements {MyInterface<Integer>}
 */
class AbstractImpl extends Object {
  /**
   * Defines instance fields.
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!AbstractImpl}
   * @public
   */
  static $create() {
    AbstractImpl.$clinit();
    let $instance = new AbstractImpl();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_genericinterfaceabstractimpl_AbstractImpl();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_genericinterfaceabstractimpl_AbstractImpl() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_genericinterfaceabstractimpl_AbstractImpl();
  }

  /**
   * Abstract method.
   * @param {Integer} arg0
   * @return {Integer}
   * @public
   */
  m_fun__java_lang_Object(arg0) {}

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof AbstractImpl; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AbstractImpl);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    Integer = goog.module.get('gen.java.lang.Integer$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_genericinterfaceabstractimpl_AbstractImpl() {
  }
};

$Util.$setClassMetadata(
    AbstractImpl,
    'com.google.j2cl.transpiler.readable.genericinterfaceabstractimpl.AbstractImpl');


MyInterface.$markImplementor(AbstractImpl);


/**
 * Export class.
 */
exports = AbstractImpl;
//# sourceMappingURL=AbstractImpl.js.map