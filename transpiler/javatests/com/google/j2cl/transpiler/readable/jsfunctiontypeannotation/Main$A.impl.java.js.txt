/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$A.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main.A$impl');


let ApplyFunction = goog.require('com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main.ApplyFunction$impl');
let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Double = goog.forwardDeclare('java.lang.Double$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @implements {ApplyFunction<?number, ?number>}
 */
class A extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {function(?number, ?number):?number}
   * @public
   */
  static $create__() {
    A.$clinit();
    let $instance = new A();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_A__();
    return $Util.$makeLambdaFunction(
        $Util.$getPrototype(A).m_apply__java_lang_Object__java_lang_Number,
        $instance, A.$copy);
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_A__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_A();
  }

  /**
   * @param {?number} d
   * @param {?number} i
   * @return {?number}
   * @public
   */
  m_apply__java_lang_Double__java_lang_Double(d, i) {}

  /**
   * Bridge method.
   * @override
   * @this {?function(?number, ?number):?number}
   * @param {*} arg0
   * @param {(Number|?number)} arg1
   * @return {?number}
   * @public
   */
  m_apply__java_lang_Object__java_lang_Number(arg0, arg1) {
    return A
        .m_apply__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_A__java_lang_Double__java_lang_Double(
            this, /**@type {?number} */ ($Casts.to(arg0, Double)),
            /**@type {?number} */ ($Casts.to(arg1, Double)));
  }

  /**
   * @param {?function(?number, ?number):?number} $thisArg
   * @param {?number} d
   * @param {?number} i
   * @return {?number}
   * @public
   */
  static m_apply__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_A__java_lang_Double__java_lang_Double(
      $thisArg, d, i) {
    A.$clinit();
    return d;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        instance
            .$is__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_A;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, A);
  }

  /**
   * Copies the fields from {@code from} to {@code to}.
   * @param {A} from
   * @param {*} to
   * @public
   */
  static $copy(from, to) {
    // Marks the object is an instance of this class.
    to.$is__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_A =
        true;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    A.$clinit = function() {};
    Double = goog.module.get('java.lang.Double$impl');
    Number = goog.module.get('java.lang.Number$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_A() {
  }
};

$Util.$setClassMetadata(
    A,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$A'));


ApplyFunction.$markImplementor(A);


/**
 * Export class.
 */
exports = A;
//# sourceMappingURL=Main$A.js.map