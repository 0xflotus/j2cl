/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$impl');


let java_lang_Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let A = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main.A$impl');
let ApplyFunction = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main.ApplyFunction$impl');
let B = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main.B$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


class Main extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Main}
   * @public
   */
  static $create__() {
    Main.$clinit();
    let $instance = new Main();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main();
  }

  /**
   * @param {?function(*, (Number|?number)):*} af
   * @param {*} o
   * @param {(Number|?number)} n
   * @return {*}
   * @public
   */
  static m_callGenericInterface__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_ApplyFunction__java_lang_Object__java_lang_Number(
      af, o, n) {
    Main.$clinit();
    return af(o, n);
  }

  /**
   * @param {?function(?string, Integer):?string} af
   * @param {?string} s
   * @return {?string}
   * @public
   */
  static m_callParametricInterface__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_ApplyFunction__java_lang_String(
      af, s) {
    Main.$clinit();
    return /**@type {?string} */ (
        $Casts.to(af(s, Integer.m_valueOf__int(1)), java_lang_String));
  }

  /**
   * @template M_U, M_V
   * @param {?function(M_U, M_V):M_U} af
   * @param {M_U} u
   * @param {M_V} v
   * @return {M_U}
   * @public
   */
  static m_callParametricWithTypeVariable__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_ApplyFunction__java_lang_Object__java_lang_Number(
      af, u, v) {
    Main.$clinit();
    return af(u, v);
  }

  /**
   * @param {?function(*, Integer):*} b
   * @param {*} o
   * @param {Integer} n
   * @return {*}
   * @public
   */
  static m_callImplementorGeneric__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_B__java_lang_Object__java_lang_Integer(
      b, o, n) {
    Main.$clinit();
    return b(o, n);
  }

  /**
   * @param {?function(?string, Integer):?string} b
   * @param {?string} s
   * @return {?string}
   * @public
   */
  static m_callImplementorParametric__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_B__java_lang_String(
      b, s) {
    Main.$clinit();
    return /**@type {?string} */ (
        $Casts.to(b(s, Integer.m_valueOf__int(1)), java_lang_String));
  }

  /**
   * @return {void}
   * @public
   */
  static m_testParameterTypes__() {
    Main.$clinit();
    let foo = /**@type {function(?string, Integer):?string} */ (B.$create__());
    let bar = A.$create__();
    Main.m_callGenericInterface__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_ApplyFunction__java_lang_Object__java_lang_Number(
        foo, 'a', Integer.m_valueOf__int(1));
    Main.m_callGenericInterface__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_ApplyFunction__java_lang_Object__java_lang_Number(
        bar, 1.1, 1.1);
    Main.m_callParametricInterface__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_ApplyFunction__java_lang_String(
        foo, 'a');
    Main.m_callParametricWithTypeVariable__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_ApplyFunction__java_lang_Object__java_lang_Number(
        foo, 'a', Integer.m_valueOf__int(1));
    Main.m_callParametricWithTypeVariable__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_ApplyFunction__java_lang_Object__java_lang_Number(
        bar, 1.1, 1.1);
    Main.m_callImplementorGeneric__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_B__java_lang_Object__java_lang_Integer(
        /**@type {function(?number, Integer):?number} */ (B.$create__()), 1.1,
        Integer.m_valueOf__int(1));
    Main.m_callImplementorParametric__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main_B__java_lang_String(
        /**@type {function(?string, Integer):?string} */ (B.$create__()), '');
    foo('a', Integer.m_valueOf__int(1));
    bar(1.1, 1.1);
    Main.callOnFunction(A.$create__());
  }

  /**
   * @return {void}
   * @public
   */
  static m_testCast__() {
    Main.$clinit();
    let o = /**@type {function(?string, Integer):?string} */ (B.$create__());
    let b1 = /**@type {?function(*, Integer):*} */ ($Casts.to(o, B));
    let b2 =
        /**@type {?function(?string, Integer):?string} */ ($Casts.to(o, B));
    let af1 = /**@type {?function(*, (Number|?number)):*} */ (
        $Casts.to(o, ApplyFunction));
    let af2 = /**@type {?function(?string, Integer):?string} */ (
        $Casts.to(o, ApplyFunction));
    let a = /**@type {?function(?number, ?number):?number} */ ($Casts.to(o, A));
  }

  /**
   * @return {void}
   * @public
   */
  static m_testNewInstance__() {
    Main.$clinit();
    let b1 = B.$create__();
    let b2 =
        /**@type {?function(*, Integer):*} */ ($Casts.to(B.$create__(), B));
    let af1 = A.$create__();
  }

  /**
   * @param {?function(?number, ?number):?number} f
   * @return {number}
   * @public
   */
  // native static callOnFunction(f)

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Main;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Main.$clinit = function() {};
    A = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main.A$impl');
    ApplyFunction = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main.ApplyFunction$impl');
    B = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main.B$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    Number = goog.module.get('java.lang.Number$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main() {}
};

$Util.$setClassMetadata(
    Main,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main'));



/**
 * Native Method Injection
 */
// Alias for the class defined in this module
const __class = Main;
/**
 * @param {function(?number, ?number):?number} fn
 * @return {?number}
 * @public
 */
__class.callOnFunction =
    function(fn) {
  return fn(1.1, 1.1);
}


/**
 * Export class.
 */
exports = Main;
//# sourceMappingURL=Main.js.map