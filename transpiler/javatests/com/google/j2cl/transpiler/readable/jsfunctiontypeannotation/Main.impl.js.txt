/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Main$A = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$A$impl');
let Main$ApplyFunction = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$ApplyFunction$impl');
let Main$B = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$B$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Double = goog.forwardDeclare('gen.java.lang.Double$impl');
let Integer = goog.forwardDeclare('gen.java.lang.Integer$impl');
let Number = goog.forwardDeclare('gen.java.lang.Number$impl');
let String = goog.forwardDeclare('gen.java.lang.String$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


class Main extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Main}
   * @public
   */
  static $create() {
    Main.$clinit();
    let $instance = new Main;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main();
  }

  /**
   * @param {window.Function} af
   * @param {*} o
   * @param {(Number|?number)} n
   * @return {*}
   * @public
   */
  static m_callGenericInterface__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$ApplyFunction__java_lang_Object__java_lang_Number(
      af, o, n) {
    Main.$clinit();
    return af(o, n);
  }

  /**
   * @param {?function(?string, Integer):?string} af
   * @param {?string} s
   * @return {?string}
   * @public
   */
  static m_callParametricInterface__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$ApplyFunction__java_lang_String(
      af, s) {
    Main.$clinit();
    return af(s, Integer.m_valueOf__int(1));
  }

  /**
   * @template M_U, M_V
   * @param {?function(M_U, M_V):M_U} af
   * @param {M_U} u
   * @param {M_V} v
   * @return {M_U}
   * @public
   */
  static m_callParametricWithTypeVariable__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$ApplyFunction__java_lang_Object__java_lang_Number(
      af, u, v) {
    Main.$clinit();
    return af(u, v);
  }

  /**
   * @param {window.Function} b
   * @param {*} o
   * @param {Integer} n
   * @return {*}
   * @public
   */
  static m_callImplementorGeneric__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B__java_lang_Object__java_lang_Integer(
      b, o, n) {
    Main.$clinit();
    return b(o, n);
  }

  /**
   * @param {?function(?string, Integer):?string} b
   * @param {?string} s
   * @return {?string}
   * @public
   */
  static m_callImplementorParametric__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B__java_lang_String(
      b, s) {
    Main.$clinit();
    return b(s, Integer.m_valueOf__int(1));
  }

  /**
   * @return {void}
   * @public
   */
  static m_testParameterTypes() {
    Main.$clinit();
    let foo = /**@type {?function(?string, Integer):?string} */ (
        $Util.$makeLambdaFunction(
            Main$B.prototype.m_apply__java_lang_Object__java_lang_Number,
            Main$B.$create(), Main$B.$copy));
    let bar = /**@type {?function(?number, ?number):?number} */ (
        $Util.$makeLambdaFunction(
            Main$A.prototype.m_apply__java_lang_Object__java_lang_Number,
            Main$A.$create(), Main$A.$copy));
    Main.m_callGenericInterface__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$ApplyFunction__java_lang_Object__java_lang_Number(
        foo, "a", Integer.m_valueOf__int(1));
    Main.m_callGenericInterface__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$ApplyFunction__java_lang_Object__java_lang_Number(
        bar, 1.1, 1.1);
    Main.m_callParametricInterface__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$ApplyFunction__java_lang_String(
        foo, "a");
    Main.m_callParametricWithTypeVariable__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$ApplyFunction__java_lang_Object__java_lang_Number(
        foo, "a", Integer.m_valueOf__int(1));
    Main.m_callParametricWithTypeVariable__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$ApplyFunction__java_lang_Object__java_lang_Number(
        bar, 1.1, 1.1);
    Main.m_callImplementorGeneric__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B__java_lang_Object__java_lang_Integer(
        /**@type {?function(?number, Integer):?number} */ (
            $Util.$makeLambdaFunction(
                Main$B.prototype.m_apply__java_lang_Object__java_lang_Number,
                Main$B.$create(), Main$B.$copy)),
        1.1, Integer.m_valueOf__int(1));
    Main.m_callImplementorParametric__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B__java_lang_String(
        /**@type {?function(?string, Integer):?string} */ (
            $Util.$makeLambdaFunction(
                Main$B.prototype.m_apply__java_lang_Object__java_lang_Number,
                Main$B.$create(), Main$B.$copy)),
        "");
    foo("a", Integer.m_valueOf__int(1));
    bar(1.1, 1.1);
    Main.callOnFunction(
        /**@type {?function(?number, ?number):?number} */ (
            $Util.$makeLambdaFunction(
                Main$A.prototype.m_apply__java_lang_Object__java_lang_Number,
                Main$A.$create(), Main$A.$copy)));
  }

  /**
   * @return {void}
   * @public
   */
  static m_testCast() {
    Main.$clinit();
    let o = /**@type {?function(?string, Integer):?string} */ (
        $Util.$makeLambdaFunction(
            Main$B.prototype.m_apply__java_lang_Object__java_lang_Number,
            Main$B.$create(), Main$B.$copy));
    let b1 = /**@type {window.Function} */ ($Casts.to(o, Main$B));
    let b2 = /**@type {?function(?string, Integer):?string} */ (
        $Casts.to(o, Main$B));
    let af1 = /**@type {window.Function} */ ($Casts.to(o, Main$ApplyFunction));
    let af2 = /**@type {?function(?string, Integer):?string} */ (
        $Casts.to(o, Main$ApplyFunction));
    let a = /**@type {?function(?number, ?number):?number} */ (
        $Casts.to(o, Main$A));
  }

  /**
   * @return {void}
   * @public
   */
  static m_testNewInstance() {
    Main.$clinit();
    let b1 = /**@type {window.Function} */ (
        $Util.$makeLambdaFunction(
            Main$B.prototype.m_apply__java_lang_Object__java_lang_Number,
            Main$B.$create(), Main$B.$copy));
    let b2 = /**@type {window.Function} */ (
        $Casts.to(
            /**@type {?function(?string, Integer):?string} */ (
                $Util.$makeLambdaFunction(
                    Main$B.prototype
                        .m_apply__java_lang_Object__java_lang_Number,
                    Main$B.$create(), Main$B.$copy)),
            Main$B));
    let af1 = /**@type {?function(?number, ?number):?number} */ (
        $Util.$makeLambdaFunction(
            Main$A.prototype.m_apply__java_lang_Object__java_lang_Number,
            Main$A.$create(), Main$A.$copy));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof Main; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    Main.$clinit();
    if (!Main.$classMain_) {
      Main.$classMain_ = Class.$createForClass(
          $Util.$generateId('Main'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main'));
    }
    return Main.$classMain_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return Main.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Main$A = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$A$impl');
    Main$ApplyFunction = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$ApplyFunction$impl');
    Main$B = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$B$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    Double = goog.module.get('gen.java.lang.Double$impl');
    Integer = goog.module.get('gen.java.lang.Integer$impl');
    Number = goog.module.get('gen.java.lang.Number$impl');
    String = goog.module.get('gen.java.lang.String$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main() {}
};


/**
 * The class literal field.
 * @private {Class}
 */
Main.$classMain_ = null;



/**
 * Native Method Injection
 */
/**
 * @param {function(?number, ?number):?number} fn
 * @return {?number}
 * @public
 */
Main.callOnFunction =
    function(fn) {
  return fn(1.1, 1.1);
}


/**
 * Export class.
 */
exports = Main;
//# sourceMappingURL=Main.js.map