/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$B.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$B$impl');


let Main$ApplyFunction = goog.require('gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$ApplyFunction$impl');
let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Main = goog.forwardDeclare('gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let Integer = goog.forwardDeclare('gen.java.lang.Integer$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


/**
 * @template C_B_T
 * @implements {Main$ApplyFunction<C_B_T, Integer>}
 */
class Main$B extends Object {
  /**
   * Defines instance fields.
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @template C_B_T
   * @return {!Main$B<C_B_T>}
   * @public
   */
  static $create() {
    Main$B.$clinit();
    let $instance = new Main$B();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B();
  }

  /**
   * @param {C_B_T} element
   * @param {Integer} i
   * @return {C_B_T}
   * @public
   */
  m_apply__java_lang_Object__java_lang_Integer(element, i) {}

  /**
   * Bridge method.
   * @this {?function(C_B_T, Integer):C_B_T}
   * @param {C_B_T} arg0
   * @param {Integer} arg1
   * @return {C_B_T}
   * @public
   */
  m_apply__java_lang_Object__java_lang_Number(arg0, arg1) {
    return Main$B
        .m_apply__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B__java_lang_Object__java_lang_Integer(
            this, /**@type {*} */ ($Casts.to(arg0, Object)),
            /**@type {Integer} */ ($Casts.to(arg1, Integer)));
  }

  /**
   * @template C_B_T
   * @param {?function(C_B_T, Integer):C_B_T} $thisArg
   * @param {C_B_T} element
   * @param {Integer} i
   * @return {C_B_T}
   * @public
   */
  static m_apply__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B__java_lang_Object__java_lang_Integer(
      $thisArg, element, i) {
    Main$B.$clinit();
    return null;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        instance
            .$is__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main$B);
  }

  /**
   * Copies the fields from {@code from} to {@code to}.
   * @param {Main$B} from
   * @param {*} to
   * @public
   */
  static $copy(from, to) {
    // Marks the object is an instance of this class.
    to.$is__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B =
        true;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Main = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    Integer = goog.module.get('gen.java.lang.Integer$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main$B() {
  }
};

$Util.$setClassMetadata(
    Main$B,
    'com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$B');


Main$ApplyFunction.$markImplementor(Main$B);


/**
 * Export class.
 */
exports = Main$B;
//# sourceMappingURL=Main$B.js.map