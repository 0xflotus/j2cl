/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.ImportTypeInJsFunctionMethod$FooFunction.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.ImportTypeInJsFunctionMethod$FooFunction$impl');


let $Util = goog.require('nativebootstrap.Util$impl');

let ImportTypeInJsFunctionMethod = goog.forwardDeclare('gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.ImportTypeInJsFunctionMethod$impl');
let Main = goog.forwardDeclare('gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $void = goog.forwardDeclare('vmbootstrap.primitives.$void$impl');


/**
 * @interface
 */
class ImportTypeInJsFunctionMethod$FooFunction {
  /**
   * Abstract method.
   * @param {Main} main
   * @return {void}
   * @public
   */
  m_apply__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_Main(
      main) {}

  /**
   * Marks the provided class as implementing this interface.
   * @param {window.Function} classConstructor
   * @public
   */
  static $markImplementor(classConstructor) {
    /**
     * @public {boolean}
     */
    classConstructor.prototype
        .$implements__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_ImportTypeInJsFunctionMethod$FooFunction =
        true;
  }

  /**
   * Returns whether the provided instance is of a class that implements this
   * interface.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null && typeof instance == "function";
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return classConstructor != null &&
        classConstructor.prototype
            .$implements__com_google_j2cl_transpiler_readable_jsfunctiontypeannotation_ImportTypeInJsFunctionMethod$FooFunction;
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    ImportTypeInJsFunctionMethod$FooFunction.$clinit();
    if (!ImportTypeInJsFunctionMethod$FooFunction
             .$classImportTypeInJsFunctionMethod$FooFunction_) {
      ImportTypeInJsFunctionMethod$FooFunction
          .$classImportTypeInJsFunctionMethod$FooFunction_ = Class.$createForInterface(
          $Util.$generateId('FooFunction'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.ImportTypeInJsFunctionMethod$FooFunction'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.ImportTypeInJsFunctionMethod.FooFunction'));
    }
    return ImportTypeInJsFunctionMethod$FooFunction
        .$classImportTypeInJsFunctionMethod$FooFunction_;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    ImportTypeInJsFunctionMethod = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.ImportTypeInJsFunctionMethod$impl');
    Main = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jsfunctiontypeannotation.Main$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    $void = goog.module.get('vmbootstrap.primitives.$void$impl');
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
ImportTypeInJsFunctionMethod$FooFunction
    .$classImportTypeInJsFunctionMethod$FooFunction_ = null;


ImportTypeInJsFunctionMethod$FooFunction.$markImplementor(
    /** @type {window.Function} */ (ImportTypeInJsFunctionMethod$FooFunction));


/**
 * Export class.
 */
exports = ImportTypeInJsFunctionMethod$FooFunction;
//# sourceMappingURL=ImportTypeInJsFunctionMethod$FooFunction.js.map