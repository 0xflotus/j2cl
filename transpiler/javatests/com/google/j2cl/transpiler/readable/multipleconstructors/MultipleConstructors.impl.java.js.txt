/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.multipleconstructors.MultipleConstructors.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.multipleconstructors.MultipleConstructors$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class MultipleConstructors extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
    /** @public {number} */
    this.f_id__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        0;
    /** @public {boolean} */
    this.f_flag__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        false;
  }

  /**
   * Factory method corresponding to constructor 'MultipleConstructors(int)'.
   * @param {number} id
   * @return {!MultipleConstructors}
   * @public
   */
  static $create__int(id) {
    MultipleConstructors.$clinit();
    let $instance = new MultipleConstructors();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__int(
            id);
    return $instance;
  }

  /**
   * Initialization from constructor 'MultipleConstructors(int)'.
   * @param {number} id
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__int(
      id) {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors();
    this.f_id__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        id;
    this.f_flag__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        (id == 0);
  }

  /**
   * Factory method corresponding to constructor
   * 'MultipleConstructors(boolean)'.
   * @param {boolean} flag
   * @return {!MultipleConstructors}
   * @public
   */
  static $create__boolean(flag) {
    MultipleConstructors.$clinit();
    let $instance = new MultipleConstructors();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__boolean(
            flag);
    return $instance;
  }

  /**
   * Initialization from constructor 'MultipleConstructors(boolean)'.
   * @param {boolean} flag
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__boolean(
      flag) {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors();
    this.f_id__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        -1;
    this.f_flag__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        flag;
  }

  /**
   * Factory method corresponding to constructor 'MultipleConstructors(int,
   * boolean)'.
   * @param {number} id
   * @param {boolean} flag
   * @return {!MultipleConstructors}
   * @public
   */
  static $create__int__boolean(id, flag) {
    MultipleConstructors.$clinit();
    let $instance = new MultipleConstructors();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__int__boolean(
            id, flag);
    return $instance;
  }

  /**
   * Initialization from constructor 'MultipleConstructors(int, boolean)'.
   * @param {number} id
   * @param {boolean} flag
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__int__boolean(
      id, flag) {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors();
    this.f_id__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        id;
    this.f_flag__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        flag;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof MultipleConstructors;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MultipleConstructors);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    MultipleConstructors.$clinit = function() {};
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors() {
  }
};

$Util.$setClassMetadata(
    MultipleConstructors,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.multipleconstructors.MultipleConstructors'));



/**
 * Export class.
 */
exports = MultipleConstructors;
//# sourceMappingURL=MultipleConstructors.js.map