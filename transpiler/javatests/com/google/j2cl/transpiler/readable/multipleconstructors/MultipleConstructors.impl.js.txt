/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.multipleconstructors.MultipleConstructors.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.multipleconstructors.MultipleConstructors$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $boolean = goog.forwardDeclare('vmbootstrap.primitives.$boolean$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class MultipleConstructors extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() {
    super();
    /**
     * @public {number}
     */
    this.f_id__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        0;
    /**
     * @public {boolean}
     */
    this.f_flag__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        false;
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors() {
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {number} id
   * @return {!MultipleConstructors}
   * @public
   */
  static $create__int(id) {
    MultipleConstructors.$clinit();
    let $instance = new MultipleConstructors;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__int(
            id);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {number} id
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__int(
      id) {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors();
    this.f_id__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        id;
    this.f_flag__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        (id == 0);
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {boolean} flag
   * @return {!MultipleConstructors}
   * @public
   */
  static $create__boolean(flag) {
    MultipleConstructors.$clinit();
    let $instance = new MultipleConstructors;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__boolean(
            flag);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {boolean} flag
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__boolean(
      flag) {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors();
    this.f_id__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        -1;
    this.f_flag__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        flag;
  }

  /**
   * A particular Java constructor as a factory method.
   * @param {number} id
   * @param {boolean} flag
   * @return {!MultipleConstructors}
   * @public
   */
  static $create__int__boolean(id, flag) {
    MultipleConstructors.$clinit();
    let $instance = new MultipleConstructors;
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__int__boolean(
            id, flag);
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @param {number} id
   * @param {boolean} flag
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors__int__boolean(
      id, flag) {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors();
    this.f_id__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        id;
    this.f_flag__com_google_j2cl_transpiler_readable_multipleconstructors_MultipleConstructors_ =
        flag;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof MultipleConstructors;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MultipleConstructors);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    MultipleConstructors.$clinit();
    if (!MultipleConstructors.$classMultipleConstructors_) {
      MultipleConstructors.$classMultipleConstructors_ = Class.$createForClass(
          $Util.$generateId('MultipleConstructors'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.multipleconstructors.MultipleConstructors'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.multipleconstructors.MultipleConstructors'));
    }
    return MultipleConstructors.$classMultipleConstructors_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return MultipleConstructors.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('gen.java.lang.Class$impl');
    $boolean = goog.module.get('vmbootstrap.primitives.$boolean$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }
};


/**
 * The class literal field.
 * @private {Class}
 */
MultipleConstructors.$classMultipleConstructors_ = null;



/**
 * Export class.
 */
exports = MultipleConstructors;
//# sourceMappingURL=MultipleConstructors.js.map