/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jstypewithdefault.SomeJsType.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jstypewithdefault.SomeJsType$impl');


const Interface = goog.require('com.google.j2cl.transpiler.readable.jstypewithdefault.Interface$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Interface$$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jstypewithdefault.Interface$$Overlay$impl');


/**
 * @implements {Interface}
 */
class SomeJsType extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'SomeJsType()'.
   * @return {!SomeJsType}
   * @public
   */
  static $create__() {
    SomeJsType.$clinit();
    let $instance = new SomeJsType();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jstypewithdefault_SomeJsType__();
    return $instance;
  }

  /**
   * Initialization from constructor 'SomeJsType()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jstypewithdefault_SomeJsType__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jstypewithdefault_SomeJsType();
  }

  /**
   * Default method forwarding stub.
   * @override
   * @return {void}
   * @public
   */
  defaultMethod() {
    Interface$$Overlay
        .m_defaultMethod__com_google_j2cl_transpiler_readable_jstypewithdefault_Interface(
            this);
  }

  /**
   * Bridge to JsMethod.
   * @return {void}
   * @public
   */
  m_defaultMethod__() {
    this.defaultMethod();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof SomeJsType;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, SomeJsType);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    SomeJsType.$clinit = function() {};
    Interface$$Overlay = goog.module.get(
        'com.google.j2cl.transpiler.readable.jstypewithdefault.Interface$$Overlay$impl');
    java_lang_Object.$clinit();
    Interface.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jstypewithdefault_SomeJsType() {}
};

$Util.$setClassMetadata(
    SomeJsType,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jstypewithdefault.SomeJsType'));


Interface.$markImplementor(SomeJsType);


/**
 * Export class.
 */
exports = SomeJsType;
//# sourceMappingURL=SomeJsType.js.map