/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.markimplementornativetypes.Foo.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.markimplementornativetypes.Foo$impl');


const RegularInterface = goog.require('com.google.j2cl.transpiler.readable.markimplementornativetypes.RegularInterface$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');
const MyNativeInterface = goog.require('test.foo.MyNativeInterface');

let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.markimplementornativetypes.MyNativeInterface.$Overlay$impl');


/**
 * @implements {MyNativeInterface}
 * @implements {RegularInterface}
 */
class Foo extends j_l_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'Foo()'.
   * @return {!Foo}
   * @public
   */
  static $create__() {
    Foo.$clinit();
    let $instance = new Foo();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_markimplementornativetypes_Foo__();
    return $instance;
  }

  /**
   * Initialization from constructor 'Foo()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_markimplementornativetypes_Foo__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Foo;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Foo);
  }

  /**
   * @public
   */
  static $clinit() {
    Foo.$clinit = function() {};
    j_l_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    Foo,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.markimplementornativetypes.Foo'));


RegularInterface.$markImplementor(Foo);


exports = Foo;
//# sourceMappingURL=Foo.js.map