/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.nestedtrycatch.NestedTryCatch.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.nestedtrycatch.NestedTryCatch$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Exception = goog.forwardDeclare('java.lang.Exception$impl');
let $Exceptions = goog.forwardDeclare('vmbootstrap.Exceptions$impl');


class NestedTryCatch extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'NestedTryCatch()'.
   * @return {!NestedTryCatch}
   * @public
   */
  static $create__() {
    NestedTryCatch.$clinit();
    let $instance = new NestedTryCatch();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_nestedtrycatch_NestedTryCatch__();
    return $instance;
  }

  /**
   * Initialization from constructor 'NestedTryCatch()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_nestedtrycatch_NestedTryCatch__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_nestedtrycatch_NestedTryCatch();
  }

  /**
   * @return {void}
   * @public
   */
  m_main__() {
    try {
      throw $Exceptions.toJs(Exception.$create__());
    } catch (/** @type {*} */ __$exc) {
      __$exc = $Exceptions.toJava(__$exc);
      if (Exception.$isInstance(__$exc)) {
        let ae = /**@type {Exception} */ (__$exc);
        try {
          throw $Exceptions.toJs(Exception.$create__());
        } catch (/** @type {*} */ __$exc$1$) {
          __$exc$1$ = $Exceptions.toJava(__$exc$1$);
          if (Exception.$isInstance(__$exc$1$)) {
            let ie = /**@type {Exception} */ (__$exc$1$);
          } else {
            throw $Exceptions.toJs(__$exc$1$);
          }
        }
      } else {
        throw $Exceptions.toJs(__$exc);
      }
    }
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof NestedTryCatch;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, NestedTryCatch);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    NestedTryCatch.$clinit = function() {};
    Exception = goog.module.get('java.lang.Exception$impl');
    $Exceptions = goog.module.get('vmbootstrap.Exceptions$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_nestedtrycatch_NestedTryCatch() {}
};

$Util.$setClassMetadata(
    NestedTryCatch,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.nestedtrycatch.NestedTryCatch'));



/**
 * Export class.
 */
exports = NestedTryCatch;
//# sourceMappingURL=NestedTryCatch.js.map