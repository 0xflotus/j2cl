[UNKNOWN] => [super();]
[UNKNOWN] => [NestedTryCatch.$clinit();]
[UNKNOWN] => [let $instance = new NestedTryCatch();]
[UNKNOWN] => [$instance.$ctor__com_google_j2cl_transpiler_readable_nestedtrycatch_NestedTryCatch();]
[UNKNOWN] => [return $instance;]
[UNKNOWN] => [this.$ctor__java_lang_Object();]
[UNKNOWN] => [this.$init__com_google_j2cl_transpiler_readable_nestedtrycatch_NestedTryCatch();]
[try {
      throw new Exception();
    } catch (Exception ae) {
      try {
        throw new Exception();
      } catch (Exception ie) {
        // expected empty body.
      }
    }] => [try {
      throw $Exceptions.toJs(Exception.$create());
    } catch (/** @type {*} */ ae) {
      ae = $Exceptions.toJava(ae);
      if (Exception.$isInstance(ae)) {
        try {
          throw $Exceptions.toJs(Exception.$create());
        } catch (/** @type {*} */ ie) {
          ie = $Exceptions.toJava(ie);
          if (Exception.$isInstance(ie)) {
          } else {
            throw $Exceptions.toJs(ie);
          }
        }
      } else {
        throw $Exceptions.toJs(ae);
      }
    }]
[throw new Exception();] => [throw $Exceptions.toJs(Exception.$create());]
[UNKNOWN] => [ae = $Exceptions.toJava(ae);]
[UNKNOWN] => [if (Exception.$isInstance(ae)) {
        try {
          throw $Exceptions.toJs(Exception.$create());
        } catch (/** @type {*} */ ie) {
          ie = $Exceptions.toJava(ie);
          if (Exception.$isInstance(ie)) {
          } else {
            throw $Exceptions.toJs(ie);
          }
        }
      } else {
        throw $Exceptions.toJs(ae);
      }]
[try {
        throw new Exception();
      } catch (Exception ie) {
        // expected empty body.
      }] => [try {
          throw $Exceptions.toJs(Exception.$create());
        } catch (/** @type {*} */ ie) {
          ie = $Exceptions.toJava(ie);
          if (Exception.$isInstance(ie)) {
          } else {
            throw $Exceptions.toJs(ie);
          }
        }]
[throw new Exception();] => [throw $Exceptions.toJs(Exception.$create());]
[UNKNOWN] => [ie = $Exceptions.toJava(ie);]
[UNKNOWN] => [if (Exception.$isInstance(ie)) {
          } else {
            throw $Exceptions.toJs(ie);
          }]
[UNKNOWN] => [throw $Exceptions.toJs(ie);]
[UNKNOWN] => [throw $Exceptions.toJs(ae);]
