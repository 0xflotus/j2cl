/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.mixednestings.MixedNestings$A$1B$1$1.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.mixednestings.MixedNestings.A.$1B.$1.$1$impl');


const MyInterface = goog.require('com.google.j2cl.transpiler.readable.mixednestings.MyInterface$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1 = goog.forwardDeclare('com.google.j2cl.transpiler.readable.mixednestings.MixedNestings.A.$1B.$1$impl');


/**
 * @implements {MyInterface}
 */
class com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1
    extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
    /**
     * @public {com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1}
     */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1 =
        null;
  }

  /**
   * Factory method corresponding to constructor 'new MyInterface(new
   * MyInterface)'.
   * @param {com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1} $outer_this
   * @return {!com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1(
      $outer_this) {
    com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1
        .$clinit();
    let $instance =
        new com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1__com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1(
            $outer_this);
    return $instance;
  }

  /**
   * Initialization from constructor 'new MyInterface(new MyInterface)'.
   * @param {com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1__com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1 =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }

  /**
   * @override
   * @param {number} b
   * @return {number}
   * @public
   */
  m_fun__int(b) {
    return b;
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof
        com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(
        classConstructor,
        com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1
        .$clinit = function() {};
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.mixednestings.MixedNestings$A$1B$1$1'));


MyInterface.$markImplementor(
    com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1);


/**
 * Export class.
 */
exports =
    com_google_j2cl_transpiler_readable_mixednestings_MixedNestings_A_1B_1_1;
//# sourceMappingURL=MixedNestings$A$1B$1$1.js.map