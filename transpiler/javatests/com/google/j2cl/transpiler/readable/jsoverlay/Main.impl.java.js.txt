/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsoverlay.Main.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.jsoverlay.Main$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let NativeJsTypeWithOverlay$$Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsoverlay.Main.NativeJsTypeWithOverlay$$Overlay$impl');
let NativeJsTypeWithOverlay = goog.forwardDeclare('test.foo.NativeJsTypeWithOverlay');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Main extends java_lang_Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Main}
   * @public
   */
  static $create__() {
    Main.$clinit();
    let $instance = new Main();
    $instance.$ctor__com_google_j2cl_transpiler_readable_jsoverlay_Main__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsoverlay_Main__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jsoverlay_Main();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let n = new NativeJsTypeWithOverlay();
    NativeJsTypeWithOverlay$$Overlay
        .m_callM__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay(
            n);
    NativeJsTypeWithOverlay$$Overlay.m_fun__();
    NativeJsTypeWithOverlay.n();
    NativeJsTypeWithOverlay$$Overlay
        .m_bar___$p_com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay$$Overlay();
    NativeJsTypeWithOverlay$$Overlay
        .m_foo__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay_$p_com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay$$Overlay(
            n);
    let a =
        NativeJsTypeWithOverlay$$Overlay
            .f_COMPILE_TIME_CONSTANT__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay$$Overlay +
        NativeJsTypeWithOverlay.nonJsOverlayField;
    NativeJsTypeWithOverlay$$Overlay
        .f_staticField__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay$$Overlay =
        null;
    NativeJsTypeWithOverlay$$Overlay.m_varargs__arrayOf_int(
        /**@type {!Array<number>} */ ($Arrays.$init([1, 2, 3], $int)));
    NativeJsTypeWithOverlay$$Overlay
        .m_baz__com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay_$p_com_google_j2cl_transpiler_readable_jsoverlay_Main_NativeJsTypeWithOverlay$$Overlay(
            n);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Main;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Main.$clinit = function() {};
    NativeJsTypeWithOverlay$$Overlay = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsoverlay.Main.NativeJsTypeWithOverlay$$Overlay$impl');
    NativeJsTypeWithOverlay =
        goog.module.get('test.foo.NativeJsTypeWithOverlay');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsoverlay_Main() {}
};

$Util.$setClassMetadata(
    Main,
    $Util.$makeClassName('com.google.j2cl.transpiler.readable.jsoverlay.Main'));



/**
 * Export class.
 */
exports = Main;
//# sourceMappingURL=Main.js.map