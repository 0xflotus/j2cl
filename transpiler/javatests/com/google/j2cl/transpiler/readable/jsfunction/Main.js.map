[UNKNOWN] => [super();]
[UNKNOWN] => [Main.$clinit();]
[UNKNOWN] => [let $instance = new Main();]
[UNKNOWN] => [$instance.$ctor__com_google_j2cl_transpiler_readable_jsfunction_Main__();]
[UNKNOWN] => [return $instance;]
[UNKNOWN] => [this.$ctor__java_lang_Object__();]
[UNKNOWN] => [this.$init__com_google_j2cl_transpiler_readable_jsfunction_Main();]
[fn] => [fn] "fn"
[a] => [a] "a"
[UNKNOWN] => [Main.$clinit();]
[return fn.foo(a);] => [return fn(a);] "com.google.j2cl.transpiler.readable.jsfunction.Main.fun"
[MyJsFunctionImpl func = new MyJsFunctionImpl();] => [let func = MyJsFunctionImpl.$create__();] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[func] => [func] "func"
[func.foo(10);] => [func(10);] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[callAsFunction(func, 10);] => [Main.callAsFunction(func, 10);] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[fun(createMyJsFunction(), 10);] => [Main.m_fun__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionInterface__int(Main.createMyJsFunction(), 10);] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[int a = func.field;] => [let a = func.f_field__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl;] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[a] => [a] "a"
[func.bar();] => [MyJsFunctionImpl.m_bar__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl(func);] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[final int n = 4;] => [let n = 4;] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[n] => [n] "n"
[fun((number) -> number + n, n);] => [Main.m_fun__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionInterface__int(((/** number */ number$1$) =>{
      return number$1$ + n;
    }), n);] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[number] => [number$1$] "number"
[number + n] => [return number$1$ + n;] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[fun(
        new MyJsFunctionInterface() {
...        },
        n);] => [Main.m_fun__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionInterface__int(((/** number */ a$1$) =>{
      return a$1$ + n;
    }), n);] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[a] => [a$1$] "a"
[return a + n;] => [return a$1$ + n;] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[new MyJsFunctionInterface() {
      @Override
...      }
    }.foo(3);] => [((/** number */ a$2$) =>{
      this.m_handleReceiveCommands___$p_com_google_j2cl_transpiler_readable_jsfunction_Main();
      return 0;
    })(3);] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[a] => [a$2$] "a"
[handleReceiveCommands();] => [this.m_handleReceiveCommands___$p_com_google_j2cl_transpiler_readable_jsfunction_Main();] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[return 0;] => [return 0;] "com.google.j2cl.transpiler.readable.jsfunction.Main.test"
[fn] => [fn] "fn"
[arg] => [arg] "arg"
[f] => [f] "f"
[UNKNOWN] => [Main.$clinit();]
[List<Function<String, String>> list = new ArrayList<>();] => [let list = /**@type {!ArrayList<?function(?string):?string>} */ (ArrayList.$create__());] "com.google.j2cl.transpiler.readable.jsfunction.Main.test2"
[list] => [list] "list"
[f(list.get(0));] => [Main.m_f__com_google_j2cl_transpiler_readable_jsfunction_Main_Function(/**@type {?function(?string):?string} */ ($Casts.$to(list.getAtIndex(0), com_google_j2cl_transpiler_readable_jsfunction_Main_Function)));] "com.google.j2cl.transpiler.readable.jsfunction.Main.test2"
[generator] => [generator] "generator"
[UNKNOWN] => [Main.$clinit();]
[List<T> collected = null;] => [let collected = null;] "com.google.j2cl.transpiler.readable.jsfunction.Main.toArray"
[collected] => [collected] "collected"
[return collected.toArray(generator.apply(collected.size()));] => [return collected.m_toArray__arrayOf_java_lang_Object(/**@type {Array<*>} */ ($Arrays.$castTo(generator.m_apply__int(collected.size()), java_lang_Object, 1)));] "com.google.j2cl.transpiler.readable.jsfunction.Main.toArray"
[JsFunctionVarargs f =
        (int i, int... numbers) -> {
...          return sum;
        };] => [let f = (/** @param {number} i @param {...number} numbers */ (i, ...numbers) =>{
      $Arrays.$stampType(numbers, $int, 1);
...      return sum;
    });] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargs"
[f] => [f] "f"
[i] => [i] "i"
[numbers] => [numbers] "numbers"
[UNKNOWN] => [$Arrays.$stampType(numbers, $int, 1);]
[int sum = i;] => [let sum = i;] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargs"
[sum] => [sum] "sum"
[for (int number : numbers) {
            sum += number;
          }] => [for (let $array = numbers, $index = 0; $index < $array.length; $index++) {
        let number$1$ = $array[$index];
        sum += number$1$;
      }] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargs"
[UNKNOWN] => [let number$1$ = $array[$index];]
[number] => [number$1$] "number"
[sum += number;] => [sum += number$1$;] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargs"
[return sum;] => [return sum;] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargs"
[return f;] => [return f;] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargs"
[return new JsFunctionVarargs() {
      @Override
...      }
    };] => [return (/** @param {number} i @param {...number} numbers */ (i, ...numbers) =>{
      $Arrays.$stampType(numbers, $int, 1);
...      return sum;
    });] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargsInnerClass"
[i] => [i] "i"
[numbers] => [numbers] "numbers"
[UNKNOWN] => [$Arrays.$stampType(numbers, $int, 1);]
[int sum = i;] => [let sum = i;] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargsInnerClass"
[sum] => [sum] "sum"
[for (int number : numbers) {
          sum += number;
        }] => [for (let $array = numbers, $index = 0; $index < $array.length; $index++) {
        let number$1$ = $array[$index];
        sum += number$1$;
      }] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargsInnerClass"
[UNKNOWN] => [let number$1$ = $array[$index];]
[number] => [number$1$] "number"
[sum += number;] => [sum += number$1$;] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargsInnerClass"
[return sum;] => [return sum;] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionVarargsInnerClass"
[JsFunctionOptional f = (i, n) -> (int) (i + n);] => [let f = (/** @param {number} i @param {?number=} n */ (i, n) =>{
      return $Primitives.$narrowDoubleToInt((i + Double.m_doubleValue__java_lang_Double(n)));
    });] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionOptional"
[f] => [f] "f"
[i] => [i] "i"
[n] => [n] "n"
[(int) (i + n)] => [return $Primitives.$narrowDoubleToInt((i + Double.m_doubleValue__java_lang_Double(n)));] "com.google.j2cl.transpiler.readable.jsfunction.Main.testJsFunctionOptional"
[UNKNOWN] => [java_lang_Object.$clinit();]
