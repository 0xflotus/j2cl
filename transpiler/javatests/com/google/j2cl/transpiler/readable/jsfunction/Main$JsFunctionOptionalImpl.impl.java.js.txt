/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsfunction.Main$JsFunctionOptionalImpl.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.jsfunction.Main.JsFunctionOptionalImpl$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');
const $JavaScriptFunction = goog.require('vmbootstrap.JavaScriptFunction$impl');

let Double = goog.forwardDeclare('java.lang.Double$impl');
let $Primitives = goog.forwardDeclare('vmbootstrap.Primitives$impl');


class JsFunctionOptionalImpl extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'JsFunctionOptionalImpl()'.
   * @return {function(number, ?number=):number}
   * @public
   */
  static $create__() {
    JsFunctionOptionalImpl.$clinit();
    let $instance = new JsFunctionOptionalImpl();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionOptionalImpl__();
    return $Util.$makeLambdaFunction(
        $Util.$getPrototype(JsFunctionOptionalImpl).m_m__int__java_lang_Double,
        $instance, JsFunctionOptionalImpl.$copy);
  }

  /**
   * Initialization from constructor 'JsFunctionOptionalImpl()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionOptionalImpl__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionOptionalImpl();
  }

  /**
   * @this {?function(number, ?number=):number}
   * @param {number} i
   * @param {?number=} number$1$
   * @return {number}
   * @public
   */
  m_m__int__java_lang_Double(i, number$1$) {
    return $Primitives.$narrowDoubleToInt(
        (i + Double.m_doubleValue__java_lang_Double(number$1$)));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$is__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionOptionalImpl;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, JsFunctionOptionalImpl);
  }

  /**
   * Copies the fields from {@code from} to {@code to}.
   * @param {JsFunctionOptionalImpl} from
   * @param {*} to
   * @public
   */
  static $copy(from, to) {
    // Marks the object is an instance of this class.
    to.$is__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionOptionalImpl =
        true;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    JsFunctionOptionalImpl.$clinit = function() {};
    Double = goog.module.get('java.lang.Double$impl');
    $Primitives = goog.module.get('vmbootstrap.Primitives$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionOptionalImpl() {
  }
};

$Util.$setClassMetadata(
    JsFunctionOptionalImpl,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsfunction.Main$JsFunctionOptionalImpl'));


$JavaScriptFunction.$markImplementor(JsFunctionOptionalImpl);


/**
 * Export class.
 */
exports = JsFunctionOptionalImpl;
//# sourceMappingURL=Main$JsFunctionOptionalImpl.js.map