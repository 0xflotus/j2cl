/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsfunction.JsFunctionOptimization$1$1$2$1.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.jsfunction.JsFunctionOptimization.$1.$1.$2.$1$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class $1 extends java_lang_Object {
  /**
   * @private
   */
  constructor() {
    super();
    /** @public {?function(?string):?string} */
    this.f_$outer_this__com_google_j2cl_transpiler_readable_jsfunction_JsFunctionOptimization_1_1_2_1 =
        null;
  }

  /**
   * Factory method corresponding to constructor 'new Object(new F)'.
   * @param {?function(?string):?string} $outer_this
   * @return {!$1}
   * @public
   */
  static $create__com_google_j2cl_transpiler_readable_jsfunction_JsFunctionOptimization_1_1_2(
      $outer_this) {
    $1.$clinit();
    let $instance = new $1();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunction_JsFunctionOptimization_1_1_2_1__com_google_j2cl_transpiler_readable_jsfunction_JsFunctionOptimization_1_1_2(
            $outer_this);
    return $instance;
  }

  /**
   * Initialization from constructor 'new Object(new F)'.
   * @param {?function(?string):?string} $outer_this
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunction_JsFunctionOptimization_1_1_2_1__com_google_j2cl_transpiler_readable_jsfunction_JsFunctionOptimization_1_1_2(
      $outer_this) {
    this.f_$outer_this__com_google_j2cl_transpiler_readable_jsfunction_JsFunctionOptimization_1_1_2_1 =
        $outer_this;
    this.$ctor__java_lang_Object__();
  }

  /**
   * @override
   * @return {?string}
   * @public
   */
  toString() {
    return 'Hey';
  }

  /**
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof $1;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, $1);
  }

  /**
   * @public
   */
  static $clinit() {
    $1.$clinit = function() {};
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    $1,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsfunction.JsFunctionOptimization$1$1$2$1'));



exports = $1;
//# sourceMappingURL=JsFunctionOptimization$1$1$2$1.js.map