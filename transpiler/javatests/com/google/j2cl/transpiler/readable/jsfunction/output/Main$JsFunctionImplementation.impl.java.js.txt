/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsfunction.Main$JsFunctionImplementation.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.jsfunction.Main.JsFunctionImplementation$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');
const $JavaScriptFunction = goog.require('vmbootstrap.JavaScriptFunction$impl');

let $Overlay = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunction.Main.JsFunctionInterface.$Overlay$impl');


class JsFunctionImplementation extends java_lang_Object {
  /**
   * @private
   */
  constructor() {
    super();
    /** @public {number} */
    this.f_field__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation =
        0;
  }

  /**
   * Factory method corresponding to constructor 'JsFunctionImplementation()'.
   * @return {function(number):number}
   * @public
   */
  static $create__() {
    JsFunctionImplementation.$clinit();
    let $instance = new JsFunctionImplementation();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation__();
    return $Util.$makeLambdaFunction(
        JsFunctionImplementation.prototype.m_foo__int, $instance,
        JsFunctionImplementation.$copy);
  }

  /**
   * Initialization from constructor 'JsFunctionImplementation()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @param {?function(number):number} $thisArg
   * @return {number}
   * @public
   */
  static m_bar__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation(
      $thisArg) {
    JsFunctionImplementation.$clinit();
    return 0;
  }

  /**
   * @param {?function(number):number} $thisArg
   * @return {number}
   * @public
   */
  static m_fun__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation(
      $thisArg) {
    JsFunctionImplementation.$clinit();
    return JsFunctionImplementation
               .m_bar__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation(
                   $thisArg) +
        $thisArg(1);
  }

  /**
   * @this {?function(number):number}
   * @param {number} a
   * @return {number}
   * @public
   */
  m_foo__int(a) {
    return a +
        JsFunctionImplementation
            .m_bar__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation(
                this) +
        this.f_field__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation;
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        !!instance
              .$is__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, JsFunctionImplementation);
  }

  /**
   * @param {JsFunctionImplementation} from
   * @param {?} to
   * @public
   */
  static $copy(from, to) {
    to.f_field__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation =
        from.f_field__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation;
    // Marks the object is an instance of this class.
    to.$is__com_google_j2cl_transpiler_readable_jsfunction_Main_JsFunctionImplementation =
        true;
  }

  /**
   * @public
   */
  static $clinit() {
    JsFunctionImplementation.$clinit = function() {};
    java_lang_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    JsFunctionImplementation,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsfunction.Main$JsFunctionImplementation'));


$JavaScriptFunction.$markImplementor(JsFunctionImplementation);


exports = JsFunctionImplementation;
//# sourceMappingURL=Main$JsFunctionImplementation.js.map