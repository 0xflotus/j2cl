/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.jsfunction.Main.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.jsfunction.Main$impl');


const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let com_google_j2cl_transpiler_readable_jsfunction_Main_Function = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunction.Main.Function$impl');
let JsFunctionVarargs = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunction.Main.JsFunctionVarargs$impl');
let MyJsFunctionImpl = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionImpl$impl');
let MyJsFunctionInterface = goog.forwardDeclare('com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionInterface$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let java_lang_String = goog.forwardDeclare('java.lang.String$impl');
let ArrayList = goog.forwardDeclare('java.util.ArrayList$impl');
let List$$Overlay = goog.forwardDeclare('java.util.List$$Overlay$impl');
let List = goog.forwardDeclare('java.util.List$impl');
let IntFunction = goog.forwardDeclare('java.util.function.IntFunction$impl');
let $Arrays = goog.forwardDeclare('vmbootstrap.Arrays$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');
let $Primitives = goog.forwardDeclare('vmbootstrap.Primitives$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Main extends java_lang_Object {
  /**
   * Private implementation constructor.
   * @public
   */
  constructor() {
    super();
  }

  /**
   * Factory method corresponding to constructor 'Main()'.
   * @return {!Main}
   * @public
   */
  static $create__() {
    Main.$clinit();
    let $instance = new Main();
    $instance.$ctor__com_google_j2cl_transpiler_readable_jsfunction_Main__();
    return $instance;
  }

  /**
   * Initialization from constructor 'Main()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunction_Main__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_jsfunction_Main();
  }

  /**
   * @param {?function(number):number} fn
   * @param {number} a
   * @return {number}
   * @public
   */
  static m_fun__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionInterface__int(
      fn, a) {
    Main.$clinit();
    return fn(a);
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let func = MyJsFunctionImpl.$create__();
    func(10);
    Main.callAsFunction(func, 10);
    Main.m_fun__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionInterface__int(
        Main.createMyJsFunction(), 10);
    let a =
        func.f_field__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl;
    MyJsFunctionImpl
        .m_bar__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl(
            func);
    let n = 4;
    Main.m_fun__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionInterface__int(
        ((/** number */ number$1$) => {
          return number$1$ + n;
        }),
        n);
    Main.m_fun__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionInterface__int(
        ((/** number */ a$1$) => {
          return a$1$ + n;
        }),
        n);
    ((/** number */ a$2$) => {
      this.m_handleReceiveCommands___$p_com_google_j2cl_transpiler_readable_jsfunction_Main();
      return 0;
    })(3);
  }

  /**
   * @param {*} fn
   * @param {number} arg
   * @return {number}
   * @public
   */
  // native static callAsFunction(fn, arg)

  /**
   * @return {?function(number):number}
   * @public
   */
  // native static createMyJsFunction()

  /**
   * @return {void}
   * @public
   */
  m_handleReceiveCommands___$p_com_google_j2cl_transpiler_readable_jsfunction_Main() {
  }

  /**
   * @param {?function(?string):?string} f
   * @return {void}
   * @public
   */
  static m_f__com_google_j2cl_transpiler_readable_jsfunction_Main_Function(f) {
    Main.$clinit();
  }

  /**
   * @return {void}
   * @public
   */
  m_test2__() {
    let list = /**@type {!ArrayList<?function(?string):?string>} */ (
        ArrayList.$create__());
    Main.m_f__com_google_j2cl_transpiler_readable_jsfunction_Main_Function(
        /**@type {?function(?string):?string} */ ($Casts.$to(
            list.getAtIndex(0),
            com_google_j2cl_transpiler_readable_jsfunction_Main_Function)));
  }

  /**
   * @template M_A, M_T
   * @param {IntFunction<Array<M_A>>} generator
   * @return {Array<M_A>}
   * @public
   */
  static m_toArray__java_util_function_IntFunction(generator) {
    Main.$clinit();
    let collected = null;
    return collected.m_toArray__arrayOf_java_lang_Object(
        /**@type {Array<*>} */ ($Arrays.$castTo(
            generator.m_apply__int(collected.size()), java_lang_Object, 1)));
  }

  /**
   * @return {?function(number, ...number):number}
   * @public
   */
  m_testJsFunctionVarargs___$pp_com_google_j2cl_transpiler_readable_jsfunction() {
    let f =
        (/** @param {number} i @param {...number} numbers */ (
             i, ...numbers) => {
          $Arrays.$stampType(numbers, $int, 1);
          let sum = i;
          for (let $array = numbers, $index = 0; $index < $array.length;
               $index++) {
            let number$1$ = $array[$index];
            sum += number$1$;
          }
          return sum;
        });
    return f;
  }

  /**
   * @return {?function(number, ...number):number}
   * @public
   */
  m_testJsFunctionVarargsInnerClass___$pp_com_google_j2cl_transpiler_readable_jsfunction() {
    return (
        /** @param {number} i @param {...number} numbers */ (i, ...numbers) => {
          $Arrays.$stampType(numbers, $int, 1);
          let sum = i;
          for (let $array = numbers, $index = 0; $index < $array.length;
               $index++) {
            let number$1$ = $array[$index];
            sum += number$1$;
          }
          return sum;
        });
  }

  /**
   * @return {void}
   * @public
   */
  m_testJsFunctionOptional___$pp_com_google_j2cl_transpiler_readable_jsfunction() {
    let f = (/** @param {number} i @param {?number=} n */ (i, n) => {
      return $Primitives.$narrowDoubleToInt(
          (i + Double.m_doubleValue__java_lang_Double(n)));
    });
  }

  /**
   * @return {void}
   * @public
   */
  static m_functionExpressionTypeReplacement___$pp_com_google_j2cl_transpiler_readable_jsfunction() {
    Main.$clinit();
    let f = ((/** ?string */ unused) => {
      let l = /**@type {!ArrayList<List<*>>} */ (ArrayList.$create__());
      l.add(/**@type {!ArrayList<?string>} */ (ArrayList.$create__()));
    });
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Main;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Main.$clinit = function() {};
    com_google_j2cl_transpiler_readable_jsfunction_Main_Function =
        goog.module.get(
            'com.google.j2cl.transpiler.readable.jsfunction.Main.Function$impl');
    JsFunctionVarargs = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsfunction.Main.JsFunctionVarargs$impl');
    MyJsFunctionImpl = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionImpl$impl');
    MyJsFunctionInterface = goog.module.get(
        'com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionInterface$impl');
    Double = goog.module.get('java.lang.Double$impl');
    java_lang_String = goog.module.get('java.lang.String$impl');
    ArrayList = goog.module.get('java.util.ArrayList$impl');
    List$$Overlay = goog.module.get('java.util.List$$Overlay$impl');
    List = goog.module.get('java.util.List$impl');
    IntFunction = goog.module.get('java.util.function.IntFunction$impl');
    $Arrays = goog.module.get('vmbootstrap.Arrays$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    $Primitives = goog.module.get('vmbootstrap.Primitives$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunction_Main() {}
};

$Util.$setClassMetadata(
    Main,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.jsfunction.Main'));



/**
 * Native Method Injection
 */  // Long alias for the class defined in this module
const com_google_j2cl_transpiler_readable_jsfunction_Main = Main;
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @param {*} fn
 * @param {number} arg
 * @return {number}
 * @public
 */
Main.callAsFunction = function(fn, arg) {
  return (/** @type {Function} */ (fn))(arg);
};

/**
 * @return {!Function}
 * @public
 */
Main.createMyJsFunction = function() {
  let myFn = function(a) {
    return a;
  };
  return myFn;
};


/**
 * Export class.
 */
exports = Main;
//# sourceMappingURL=Main.js.map