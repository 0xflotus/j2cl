/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionImpl.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionImpl$impl');


let MyJsFunctionInterface = goog.require('com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionInterface$impl');
let Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Class = goog.forwardDeclare('java.lang.Class$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');

/** @constructor */ let $NativeFunction = window.Function;


/**
 * @implements {MyJsFunctionInterface}
 */
class MyJsFunctionImpl extends Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() {
    super();
    /** @public {number} */
    this.f_field__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl =
        0;
  }

  /**
   * A particular Java constructor as a factory method.
   * @return {function(number):number}
   * @public
   */
  static $create() {
    MyJsFunctionImpl.$clinit();
    let $instance = new MyJsFunctionImpl();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl();
    return $Util.$makeLambdaFunction(
        $Util.$getPrototype(MyJsFunctionImpl).m_foo__int, $instance,
        MyJsFunctionImpl.$copy);
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl();
  }

  /**
   * @return {number}
   * @public
   */
  m_bar() {}

  /**
   * @return {number}
   * @public
   */
  m_fun() {}

  /**
   * @override
   * @this {?function(number):number}
   * @param {number} a
   * @return {number}
   * @public
   */
  m_foo__int(a) {
    return a +
        MyJsFunctionImpl
            .m_bar__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl(
                this) +
        this.f_field__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl;
  }

  /**
   * @param {?function(number):number} $thisArg
   * @return {number}
   * @public
   */
  static m_bar__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl(
      $thisArg) {
    MyJsFunctionImpl.$clinit();
    return 0;
  }

  /**
   * @param {?function(number):number} $thisArg
   * @return {number}
   * @public
   */
  static m_fun__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl(
      $thisArg) {
    MyJsFunctionImpl.$clinit();
    return MyJsFunctionImpl
               .m_bar__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl(
                   $thisArg) +
        $thisArg(1);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance != null &&
        instance
            .$is__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, MyJsFunctionImpl);
  }

  /**
   * Copies the fields from {@code from} to {@code to}.
   * @param {MyJsFunctionImpl} from
   * @param {*} to
   * @public
   */
  static $copy(from, to) {
    to.f_field__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl =
        from.f_field__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl;
    // Marks the object is an instance of this class.
    to.$is__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl =
        true;
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Class = goog.module.get('java.lang.Class$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl() {}
};

$Util.$setClassMetadata(
    MyJsFunctionImpl,
    'com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionImpl');


MyJsFunctionInterface.$markImplementor(MyJsFunctionImpl);


/**
 * Export class.
 */
exports = MyJsFunctionImpl;
//# sourceMappingURL=MyJsFunctionImpl.js.map