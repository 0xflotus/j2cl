/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.jsfunction.Main.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('gen.com.google.j2cl.transpiler.readable.jsfunction.Main$impl');


let Object = goog.require('gen.java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let MyJsFunctionImpl = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionImpl$impl');
let MyJsFunctionInterface = goog.forwardDeclare(
    'gen.com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionInterface$impl');
let Class = goog.forwardDeclare('gen.java.lang.Class$impl');
let $int = goog.forwardDeclare('vmbootstrap.primitives.$int$impl');


class Main extends Object {
  /**
   * Defines instance fields.
   * @private
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!Main}
   * @public
   */
  static $create() {
    Main.$clinit();
    let $instance = new Main;
    $instance.$ctor__com_google_j2cl_transpiler_readable_jsfunction_Main();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @protected
   */
  $ctor__com_google_j2cl_transpiler_readable_jsfunction_Main() {
    this.$ctor__java_lang_Object();
    this.$init__com_google_j2cl_transpiler_readable_jsfunction_Main();
  }

  /**
   * @param {?function(number):number} fn
   * @param {number} a
   * @return {number}
   * @public
   */
  static m_fun__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionInterface__int(
      fn, a) {
    Main.$clinit();
    return fn(a);
  }

  /**
   * @return {void}
   * @public
   */
  m_test() {
    let func = /**@type {?function(number):number} */ (
        $Util.$makeLambdaFunction(
            MyJsFunctionImpl.prototype.m_foo__int, MyJsFunctionImpl.$create(),
            MyJsFunctionImpl.$copy));
    func(10);
    Main.callAsFunction(func, 10);
    Main.m_fun__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionInterface__int(
        Main.createMyJsFunction(), 10);
    let a =
        func.f_field__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl;
    MyJsFunctionImpl
        .m_bar__com_google_j2cl_transpiler_readable_jsfunction_MyJsFunctionImpl(
            func);
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof Main; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Main);
  }

  /**
   * @return {Class}
   * @public
   */
  static $getClass() {
    Main.$clinit();
    if (!Main.$classMain_) {
      Main.$classMain_ = Class.$createForClass(
          $Util.$generateId('Main'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsfunction.Main'),
          $Util.$generateId(
              'com.google.j2cl.transpiler.readable.jsfunction.Main'));
    }
    return Main.$classMain_;
  }

  /**
   * @override
   * @return {Class}
   * @public
   */
  m_getClass() { return Main.$getClass(); }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    MyJsFunctionImpl = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionImpl$impl');
    MyJsFunctionInterface = goog.module.get(
        'gen.com.google.j2cl.transpiler.readable.jsfunction.MyJsFunctionInterface$impl');
    Class = goog.module.get('gen.java.lang.Class$impl');
    $int = goog.module.get('vmbootstrap.primitives.$int$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_jsfunction_Main() {}
};


/**
 * The class literal field.
 * @private {Class}
 */
Main.$classMain_ = null;



/**
 * Native Method Injection
 */
/**
 * @param {*} fn
 * @param {number} arg
 * @return {number}
 * @public
 */
Main.callAsFunction = function(fn, arg) {
  return (/** @type {Function} */ (fn))(arg);
};

/**
 * @return {!Function}
 * @public
 */
Main.createMyJsFunction =
    function() {
  let myFn = function(a) { return a; };
  return myFn;
}


/**
 * Export class.
 */
exports = Main;
//# sourceMappingURL=Main.js.map