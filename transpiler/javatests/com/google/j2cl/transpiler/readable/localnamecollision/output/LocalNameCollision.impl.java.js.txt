/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.localnamecollision.LocalNameCollision.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire, suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables, uselessCode}
 */
goog.module('com.google.j2cl.transpiler.readable.localnamecollision.LocalNameCollision$impl');


const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let Asserts = goog.forwardDeclare('com.google.j2cl.transpiler.readable.localnamecollision.Asserts$impl');
let Class = goog.forwardDeclare('com.google.j2cl.transpiler.readable.localnamecollision.Class$impl');
let A = goog.forwardDeclare('com.google.j2cl.transpiler.readable.localnamecollision.package1.A$impl');
let c_g_j2cl_transpiler_readable_localnamecollision_package2_A = goog.forwardDeclare('com.google.j2cl.transpiler.readable.localnamecollision.package2.A$impl');
let RuntimeException = goog.forwardDeclare('java.lang.RuntimeException$impl');
let $Asserts = goog.forwardDeclare('vmbootstrap.Asserts$impl');


class LocalNameCollision extends j_l_Object {
  /**
   * @private
   */
  constructor() {
    super();
  }

  /**
   * @return {void}
   * @public
   */
  m_testClassLocalVarCollision__() {
    let LocalNameCollision$1$ = false;
    let RuntimeException$1$ = null;
    let Asserts$1$ = 1;
    let $Asserts$1$ = 1;
    let l_Asserts = 1;
    let com_google_j2cl_transpiler_readable_localnamecollision_Class = 1;
    let com_google_j2cl_transpiler_readable_localnamecollision_package1_A = 1;
    let com_google_j2cl_transpiler_readable_localnamecollision_package2_A = 1;
    let A$1$ = 1;
    LocalNameCollision$1$ =
        LocalNameCollision.$isInstance(RuntimeException$1$) ||
        RuntimeException.$isInstance(RuntimeException$1$) ||
        A.$isInstance(RuntimeException$1$) ||
        c_g_j2cl_transpiler_readable_localnamecollision_package2_A.$isInstance(
            RuntimeException$1$) ||
        Class.$isInstance(RuntimeException$1$);
    $Asserts.$assert(
        Asserts.$create__()
            .m_n___$pp_com_google_j2cl_transpiler_readable_localnamecollision() ==
        5);
  }

  /**
   * @param {boolean} LocalNameCollision$1$
   * @param {*} Asserts$1$
   * @param {*} $Asserts$1$
   * @param {number} l_Asserts
   * @param {number} A$1$
   * @return {boolean}
   * @public
   */
  m_testClassParameterCollision__boolean__java_lang_Object__java_lang_Object__int__int(
      LocalNameCollision$1$, Asserts$1$, $Asserts$1$, l_Asserts, A$1$) {
    return LocalNameCollision$1$ &&
        LocalNameCollision.$isInstance(Asserts$1$) &&
        Asserts.$isInstance($Asserts$1$) && (l_Asserts == A$1$);
  }

  /**
   * Factory method corresponding to constructor 'LocalNameCollision(boolean,
   * Object, Object, int, int)'.
   * @param {boolean} LocalNameCollision$1$
   * @param {*} Asserts$1$
   * @param {*} $Asserts$1$
   * @param {number} l_Asserts
   * @param {number} A$1$
   * @return {!LocalNameCollision}
   * @public
   */
  static $create__boolean__java_lang_Object__java_lang_Object__int__int(
      LocalNameCollision$1$, Asserts$1$, $Asserts$1$, l_Asserts, A$1$) {
    LocalNameCollision.$clinit();
    let $instance = new LocalNameCollision();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_localnamecollision_LocalNameCollision__boolean__java_lang_Object__java_lang_Object__int__int(
            LocalNameCollision$1$, Asserts$1$, $Asserts$1$, l_Asserts, A$1$);
    return $instance;
  }

  /**
   * Initialization from constructor 'LocalNameCollision(boolean, Object,
   * Object, int, int)'.
   * @param {boolean} LocalNameCollision$1$
   * @param {*} Asserts$1$
   * @param {*} $Asserts$1$
   * @param {number} l_Asserts
   * @param {number} A$1$
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_localnamecollision_LocalNameCollision__boolean__java_lang_Object__java_lang_Object__int__int(
      LocalNameCollision$1$, Asserts$1$, $Asserts$1$, l_Asserts, A$1$) {
    this.$ctor__java_lang_Object__();
    let result = LocalNameCollision$1$ &&
        LocalNameCollision.$isInstance(Asserts$1$) &&
        Asserts.$isInstance($Asserts$1$) && (l_Asserts == A$1$);
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof LocalNameCollision;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, LocalNameCollision);
  }

  /**
   * @public
   */
  static $clinit() {
    LocalNameCollision.$clinit = function() {};
    Asserts = goog.module.get(
        'com.google.j2cl.transpiler.readable.localnamecollision.Asserts$impl');
    Class = goog.module.get(
        'com.google.j2cl.transpiler.readable.localnamecollision.Class$impl');
    A = goog.module.get(
        'com.google.j2cl.transpiler.readable.localnamecollision.package1.A$impl');
    c_g_j2cl_transpiler_readable_localnamecollision_package2_A = goog.module.get(
        'com.google.j2cl.transpiler.readable.localnamecollision.package2.A$impl');
    RuntimeException = goog.module.get('java.lang.RuntimeException$impl');
    $Asserts = goog.module.get('vmbootstrap.Asserts$impl');
    j_l_Object.$clinit();
  }
};

$Util.$setClassMetadata(
    LocalNameCollision,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.localnamecollision.LocalNameCollision'));



exports = LocalNameCollision;
//# sourceMappingURL=LocalNameCollision.js.map