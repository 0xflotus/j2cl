/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.declarelegacynamespace.OutterRequire$Inner.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode, const, missingRequire, missingOverride}
 */
goog.module('com.google.j2cl.transpiler.readable.declarelegacynamespace.OutterRequire.Inner$impl');
goog.module.declareLegacyNamespace();


const OutterRequire = goog.require('com.google.j2cl.transpiler.readable.declarelegacynamespace.OutterRequire$impl');
const java_lang_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');


class Inner extends java_lang_Object {
  /**
   * JsConstructor 'Inner()'.
   * @public
   */
  constructor() {
    Inner.$clinit();
    super();
    this.$ctor__com_google_j2cl_transpiler_readable_declarelegacynamespace_OutterRequire_Inner__();
  }

  /**
   * Initialization from constructor 'Inner()'.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_declarelegacynamespace_OutterRequire_Inner__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_declarelegacynamespace_OutterRequire_Inner();
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof Inner;
  }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, Inner);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Inner.$clinit = function() {};
    java_lang_Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_declarelegacynamespace_OutterRequire_Inner() {
  }
};

$Util.$setClassMetadata(
    Inner,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.declarelegacynamespace.OutterRequire$Inner'));



/**
 * Export class.
 */
exports = Inner;
//# sourceMappingURL=OutterRequire$Inner.js.map