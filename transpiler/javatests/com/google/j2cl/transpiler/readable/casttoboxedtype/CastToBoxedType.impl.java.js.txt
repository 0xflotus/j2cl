/**
 * @fileoverview Impl transpiled from
 * com.google.j2cl.transpiler.readable.casttoboxedtype.CastToBoxedType.
 *
 * @suppress {suspiciousCode, transitionalSuspiciousCodeWarnings, uselessCode,
 * const, missingRequire}
 */
goog.module('com.google.j2cl.transpiler.readable.casttoboxedtype.CastToBoxedType$impl');


let Object = goog.require('java.lang.Object$impl');
let $Util = goog.require('nativebootstrap.Util$impl');

let Boolean = goog.forwardDeclare('java.lang.Boolean$impl');
let Byte = goog.forwardDeclare('java.lang.Byte$impl');
let Character = goog.forwardDeclare('java.lang.Character$impl');
let Class = goog.forwardDeclare('java.lang.Class$impl');
let Double = goog.forwardDeclare('java.lang.Double$impl');
let Float = goog.forwardDeclare('java.lang.Float$impl');
let Integer = goog.forwardDeclare('java.lang.Integer$impl');
let Long = goog.forwardDeclare('java.lang.Long$impl');
let Number = goog.forwardDeclare('java.lang.Number$impl');
let Short = goog.forwardDeclare('java.lang.Short$impl');
let $Casts = goog.forwardDeclare('vmbootstrap.Casts$impl');


class CastToBoxedType extends Object {
  /**
   * Defines instance fields.
   * @public
   */
  constructor() { super(); }

  /**
   * A particular Java constructor as a factory method.
   * @return {!CastToBoxedType}
   * @public
   */
  static $create__() {
    CastToBoxedType.$clinit();
    let $instance = new CastToBoxedType();
    $instance
        .$ctor__com_google_j2cl_transpiler_readable_casttoboxedtype_CastToBoxedType__();
    return $instance;
  }

  /**
   * Initializes instance fields for a particular Java constructor.
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_casttoboxedtype_CastToBoxedType__() {
    this.$ctor__java_lang_Object__();
    this.$init__com_google_j2cl_transpiler_readable_casttoboxedtype_CastToBoxedType();
  }

  /**
   * @return {void}
   * @public
   */
  m_test__() {
    let o = Integer.$create__int(1);
    let b = /**@type {Byte} */ ($Casts.to(o, Byte));
    let d = /**@type {?number} */ ($Casts.to(o, Double));
    let f = /**@type {Float} */ ($Casts.to(o, Float));
    let i = /**@type {Integer} */ ($Casts.to(o, Integer));
    let l = /**@type {Long} */ ($Casts.to(o, Long));
    let s = /**@type {Short} */ ($Casts.to(o, Short));
    let n = /**@type {(Number|?number)} */ ($Casts.to(o, Number));
    let c = /**@type {Character} */ ($Casts.to(o, Character));
    let bool = /**@type {?boolean} */ ($Casts.to(o, Boolean));
  }

  /**
   * Returns whether the provided instance is an instance of this class.
   * @param {*} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) { return instance instanceof CastToBoxedType; }

  /**
   * Returns whether the provided class is or extends this class.
   * @param {window.Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, CastToBoxedType);
  }

  /**
   * Runs inline static field initializers.
   * @public
   */
  static $clinit() {
    Boolean = goog.module.get('java.lang.Boolean$impl');
    Byte = goog.module.get('java.lang.Byte$impl');
    Character = goog.module.get('java.lang.Character$impl');
    Class = goog.module.get('java.lang.Class$impl');
    Double = goog.module.get('java.lang.Double$impl');
    Float = goog.module.get('java.lang.Float$impl');
    Integer = goog.module.get('java.lang.Integer$impl');
    Long = goog.module.get('java.lang.Long$impl');
    Number = goog.module.get('java.lang.Number$impl');
    Short = goog.module.get('java.lang.Short$impl');
    $Casts = goog.module.get('vmbootstrap.Casts$impl');
    Object.$clinit();
  }

  /**
   * Runs instance field and block initializers.
   * @private
   */
  $init__com_google_j2cl_transpiler_readable_casttoboxedtype_CastToBoxedType() {
  }
};

$Util.$setClassMetadata(
    CastToBoxedType,
    'com.google.j2cl.transpiler.readable.casttoboxedtype.CastToBoxedType');



/**
 * Export class.
 */
exports = CastToBoxedType;
//# sourceMappingURL=CastToBoxedType.js.map